
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop$1() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop$1;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop$1;
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_style(node, key, value, important) {
        if (value === null) {
            node.style.removeProperty(key);
        }
        else {
            node.style.setProperty(key, value, important ? 'important' : '');
        }
    }
    function custom_event(type, detail, bubbles = false) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            // @ts-ignore
            callbacks.slice().forEach(fn => fn.call(this, event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop$1,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop$1;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.4' }, detail), true));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    /**
     * @typedef {Object} WrappedComponent Object returned by the `wrap` method
     * @property {SvelteComponent} component - Component to load (this is always asynchronous)
     * @property {RoutePrecondition[]} [conditions] - Route pre-conditions to validate
     * @property {Object} [props] - Optional dictionary of static props
     * @property {Object} [userData] - Optional user data dictionary
     * @property {bool} _sveltesparouter - Internal flag; always set to true
     */

    /**
     * @callback AsyncSvelteComponent
     * @returns {Promise<SvelteComponent>} Returns a Promise that resolves with a Svelte component
     */

    /**
     * @callback RoutePrecondition
     * @param {RouteDetail} detail - Route detail object
     * @returns {boolean|Promise<boolean>} If the callback returns a false-y value, it's interpreted as the precondition failed, so it aborts loading the component (and won't process other pre-condition callbacks)
     */

    /**
     * @typedef {Object} WrapOptions Options object for the call to `wrap`
     * @property {SvelteComponent} [component] - Svelte component to load (this is incompatible with `asyncComponent`)
     * @property {AsyncSvelteComponent} [asyncComponent] - Function that returns a Promise that fulfills with a Svelte component (e.g. `{asyncComponent: () => import('Foo.svelte')}`)
     * @property {SvelteComponent} [loadingComponent] - Svelte component to be displayed while the async route is loading (as a placeholder); when unset or false-y, no component is shown while component
     * @property {object} [loadingParams] - Optional dictionary passed to the `loadingComponent` component as params (for an exported prop called `params`)
     * @property {object} [userData] - Optional object that will be passed to events such as `routeLoading`, `routeLoaded`, `conditionsFailed`
     * @property {object} [props] - Optional key-value dictionary of static props that will be passed to the component. The props are expanded with {...props}, so the key in the dictionary becomes the name of the prop.
     * @property {RoutePrecondition[]|RoutePrecondition} [conditions] - Route pre-conditions to add, which will be executed in order
     */

    /**
     * Wraps a component to enable multiple capabilities:
     * 1. Using dynamically-imported component, with (e.g. `{asyncComponent: () => import('Foo.svelte')}`), which also allows bundlers to do code-splitting.
     * 2. Adding route pre-conditions (e.g. `{conditions: [...]}`)
     * 3. Adding static props that are passed to the component
     * 4. Adding custom userData, which is passed to route events (e.g. route loaded events) or to route pre-conditions (e.g. `{userData: {foo: 'bar}}`)
     * 
     * @param {WrapOptions} args - Arguments object
     * @returns {WrappedComponent} Wrapped component
     */
    function wrap$1(args) {
        if (!args) {
            throw Error('Parameter args is required')
        }

        // We need to have one and only one of component and asyncComponent
        // This does a "XNOR"
        if (!args.component == !args.asyncComponent) {
            throw Error('One and only one of component and asyncComponent is required')
        }

        // If the component is not async, wrap it into a function returning a Promise
        if (args.component) {
            args.asyncComponent = () => Promise.resolve(args.component);
        }

        // Parameter asyncComponent and each item of conditions must be functions
        if (typeof args.asyncComponent != 'function') {
            throw Error('Parameter asyncComponent must be a function')
        }
        if (args.conditions) {
            // Ensure it's an array
            if (!Array.isArray(args.conditions)) {
                args.conditions = [args.conditions];
            }
            for (let i = 0; i < args.conditions.length; i++) {
                if (!args.conditions[i] || typeof args.conditions[i] != 'function') {
                    throw Error('Invalid parameter conditions[' + i + ']')
                }
            }
        }

        // Check if we have a placeholder component
        if (args.loadingComponent) {
            args.asyncComponent.loading = args.loadingComponent;
            args.asyncComponent.loadingParams = args.loadingParams || undefined;
        }

        // Returns an object that contains all the functions to execute too
        // The _sveltesparouter flag is to confirm the object was created by this router
        const obj = {
            component: args.asyncComponent,
            userData: args.userData,
            conditions: (args.conditions && args.conditions.length) ? args.conditions : undefined,
            props: (args.props && Object.keys(args.props).length) ? args.props : {},
            _sveltesparouter: true
        };

        return obj
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop$1) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop$1) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop$1;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop$1;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop$1;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    function parse(str, loose) {
    	if (str instanceof RegExp) return { keys:false, pattern:str };
    	var c, o, tmp, ext, keys=[], pattern='', arr = str.split('/');
    	arr[0] || arr.shift();

    	while (tmp = arr.shift()) {
    		c = tmp[0];
    		if (c === '*') {
    			keys.push('wild');
    			pattern += '/(.*)';
    		} else if (c === ':') {
    			o = tmp.indexOf('?', 1);
    			ext = tmp.indexOf('.', 1);
    			keys.push( tmp.substring(1, !!~o ? o : !!~ext ? ext : tmp.length) );
    			pattern += !!~o && !~ext ? '(?:/([^/]+?))?' : '/([^/]+?)';
    			if (!!~ext) pattern += (!!~o ? '?' : '') + '\\' + tmp.substring(ext);
    		} else {
    			pattern += '/' + tmp;
    		}
    	}

    	return {
    		keys: keys,
    		pattern: new RegExp('^' + pattern + (loose ? '(?=$|\/)' : '\/?$'), 'i')
    	};
    }

    /* node_modules/.pnpm/svelte-spa-router@3.2.0/node_modules/svelte-spa-router/Router.svelte generated by Svelte v3.46.4 */

    const { Error: Error_1$1, Object: Object_1, console: console_1$6 } = globals;

    // (251:0) {:else}
    function create_else_block$f(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [/*props*/ ctx[2]];
    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    		switch_instance.$on("routeEvent", /*routeEvent_handler_1*/ ctx[7]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*props*/ 4)
    			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*props*/ ctx[2])])
    			: {};

    			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					switch_instance.$on("routeEvent", /*routeEvent_handler_1*/ ctx[7]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$f.name,
    		type: "else",
    		source: "(251:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (244:0) {#if componentParams}
    function create_if_block$j(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [{ params: /*componentParams*/ ctx[1] }, /*props*/ ctx[2]];
    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    		switch_instance.$on("routeEvent", /*routeEvent_handler*/ ctx[6]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*componentParams, props*/ 6)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*componentParams*/ 2 && { params: /*componentParams*/ ctx[1] },
    					dirty & /*props*/ 4 && get_spread_object(/*props*/ ctx[2])
    				])
    			: {};

    			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					switch_instance.$on("routeEvent", /*routeEvent_handler*/ ctx[6]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$j.name,
    		type: "if",
    		source: "(244:0) {#if componentParams}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$E(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$j, create_else_block$f];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*componentParams*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error_1$1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$E.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function wrap(component, userData, ...conditions) {
    	// Use the new wrap method and show a deprecation warning
    	// eslint-disable-next-line no-console
    	console.warn('Method `wrap` from `svelte-spa-router` is deprecated and will be removed in a future version. Please use `svelte-spa-router/wrap` instead. See http://bit.ly/svelte-spa-router-upgrading');

    	return wrap$1({ component, userData, conditions });
    }

    /**
     * @typedef {Object} Location
     * @property {string} location - Location (page/view), for example `/book`
     * @property {string} [querystring] - Querystring from the hash, as a string not parsed
     */
    /**
     * Returns the current location from the hash.
     *
     * @returns {Location} Location object
     * @private
     */
    function getLocation() {
    	const hashPosition = window.location.href.indexOf('#/');

    	let location = hashPosition > -1
    	? window.location.href.substr(hashPosition + 1)
    	: '/';

    	// Check if there's a querystring
    	const qsPosition = location.indexOf('?');

    	let querystring = '';

    	if (qsPosition > -1) {
    		querystring = location.substr(qsPosition + 1);
    		location = location.substr(0, qsPosition);
    	}

    	return { location, querystring };
    }

    const loc = readable(null, // eslint-disable-next-line prefer-arrow-callback
    function start(set) {
    	set(getLocation());

    	const update = () => {
    		set(getLocation());
    	};

    	window.addEventListener('hashchange', update, false);

    	return function stop() {
    		window.removeEventListener('hashchange', update, false);
    	};
    });

    const location$1 = derived(loc, $loc => $loc.location);
    const querystring = derived(loc, $loc => $loc.querystring);
    const params = writable(undefined);

    async function push(location) {
    	if (!location || location.length < 1 || location.charAt(0) != '/' && location.indexOf('#/') !== 0) {
    		throw Error('Invalid parameter location');
    	}

    	// Execute this code when the current call stack is complete
    	await tick();

    	// Note: this will include scroll state in history even when restoreScrollState is false
    	history.replaceState(
    		{
    			...history.state,
    			__svelte_spa_router_scrollX: window.scrollX,
    			__svelte_spa_router_scrollY: window.scrollY
    		},
    		undefined,
    		undefined
    	);

    	window.location.hash = (location.charAt(0) == '#' ? '' : '#') + location;
    }

    async function pop() {
    	// Execute this code when the current call stack is complete
    	await tick();

    	window.history.back();
    }

    async function replace(location) {
    	if (!location || location.length < 1 || location.charAt(0) != '/' && location.indexOf('#/') !== 0) {
    		throw Error('Invalid parameter location');
    	}

    	// Execute this code when the current call stack is complete
    	await tick();

    	const dest = (location.charAt(0) == '#' ? '' : '#') + location;

    	try {
    		const newState = { ...history.state };
    		delete newState['__svelte_spa_router_scrollX'];
    		delete newState['__svelte_spa_router_scrollY'];
    		window.history.replaceState(newState, undefined, dest);
    	} catch(e) {
    		// eslint-disable-next-line no-console
    		console.warn('Caught exception while replacing the current page. If you\'re running this in the Svelte REPL, please note that the `replace` method might not work in this environment.');
    	}

    	// The method above doesn't trigger the hashchange event, so let's do that manually
    	window.dispatchEvent(new Event('hashchange'));
    }

    function link(node, opts) {
    	opts = linkOpts(opts);

    	// Only apply to <a> tags
    	if (!node || !node.tagName || node.tagName.toLowerCase() != 'a') {
    		throw Error('Action "link" can only be used with <a> tags');
    	}

    	updateLink(node, opts);

    	return {
    		update(updated) {
    			updated = linkOpts(updated);
    			updateLink(node, updated);
    		}
    	};
    }

    // Internal function used by the link function
    function updateLink(node, opts) {
    	let href = opts.href || node.getAttribute('href');

    	// Destination must start with '/' or '#/'
    	if (href && href.charAt(0) == '/') {
    		// Add # to the href attribute
    		href = '#' + href;
    	} else if (!href || href.length < 2 || href.slice(0, 2) != '#/') {
    		throw Error('Invalid value for "href" attribute: ' + href);
    	}

    	node.setAttribute('href', href);

    	node.addEventListener('click', event => {
    		// Prevent default anchor onclick behaviour
    		event.preventDefault();

    		if (!opts.disabled) {
    			scrollstateHistoryHandler(event.currentTarget.getAttribute('href'));
    		}
    	});
    }

    // Internal function that ensures the argument of the link action is always an object
    function linkOpts(val) {
    	if (val && typeof val == 'string') {
    		return { href: val };
    	} else {
    		return val || {};
    	}
    }

    /**
     * The handler attached to an anchor tag responsible for updating the
     * current history state with the current scroll state
     *
     * @param {string} href - Destination
     */
    function scrollstateHistoryHandler(href) {
    	// Setting the url (3rd arg) to href will break clicking for reasons, so don't try to do that
    	history.replaceState(
    		{
    			...history.state,
    			__svelte_spa_router_scrollX: window.scrollX,
    			__svelte_spa_router_scrollY: window.scrollY
    		},
    		undefined,
    		undefined
    	);

    	// This will force an update as desired, but this time our scroll state will be attached
    	window.location.hash = href;
    }

    function instance$E($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Router', slots, []);
    	let { routes = {} } = $$props;
    	let { prefix = '' } = $$props;
    	let { restoreScrollState = false } = $$props;

    	/**
     * Container for a route: path, component
     */
    	class RouteItem {
    		/**
     * Initializes the object and creates a regular expression from the path, using regexparam.
     *
     * @param {string} path - Path to the route (must start with '/' or '*')
     * @param {SvelteComponent|WrappedComponent} component - Svelte component for the route, optionally wrapped
     */
    		constructor(path, component) {
    			if (!component || typeof component != 'function' && (typeof component != 'object' || component._sveltesparouter !== true)) {
    				throw Error('Invalid component object');
    			}

    			// Path must be a regular or expression, or a string starting with '/' or '*'
    			if (!path || typeof path == 'string' && (path.length < 1 || path.charAt(0) != '/' && path.charAt(0) != '*') || typeof path == 'object' && !(path instanceof RegExp)) {
    				throw Error('Invalid value for "path" argument - strings must start with / or *');
    			}

    			const { pattern, keys } = parse(path);
    			this.path = path;

    			// Check if the component is wrapped and we have conditions
    			if (typeof component == 'object' && component._sveltesparouter === true) {
    				this.component = component.component;
    				this.conditions = component.conditions || [];
    				this.userData = component.userData;
    				this.props = component.props || {};
    			} else {
    				// Convert the component to a function that returns a Promise, to normalize it
    				this.component = () => Promise.resolve(component);

    				this.conditions = [];
    				this.props = {};
    			}

    			this._pattern = pattern;
    			this._keys = keys;
    		}

    		/**
     * Checks if `path` matches the current route.
     * If there's a match, will return the list of parameters from the URL (if any).
     * In case of no match, the method will return `null`.
     *
     * @param {string} path - Path to test
     * @returns {null|Object.<string, string>} List of paramters from the URL if there's a match, or `null` otherwise.
     */
    		match(path) {
    			// If there's a prefix, check if it matches the start of the path.
    			// If not, bail early, else remove it before we run the matching.
    			if (prefix) {
    				if (typeof prefix == 'string') {
    					if (path.startsWith(prefix)) {
    						path = path.substr(prefix.length) || '/';
    					} else {
    						return null;
    					}
    				} else if (prefix instanceof RegExp) {
    					const match = path.match(prefix);

    					if (match && match[0]) {
    						path = path.substr(match[0].length) || '/';
    					} else {
    						return null;
    					}
    				}
    			}

    			// Check if the pattern matches
    			const matches = this._pattern.exec(path);

    			if (matches === null) {
    				return null;
    			}

    			// If the input was a regular expression, this._keys would be false, so return matches as is
    			if (this._keys === false) {
    				return matches;
    			}

    			const out = {};
    			let i = 0;

    			while (i < this._keys.length) {
    				// In the match parameters, URL-decode all values
    				try {
    					out[this._keys[i]] = decodeURIComponent(matches[i + 1] || '') || null;
    				} catch(e) {
    					out[this._keys[i]] = null;
    				}

    				i++;
    			}

    			return out;
    		}

    		/**
     * Dictionary with route details passed to the pre-conditions functions, as well as the `routeLoading`, `routeLoaded` and `conditionsFailed` events
     * @typedef {Object} RouteDetail
     * @property {string|RegExp} route - Route matched as defined in the route definition (could be a string or a reguar expression object)
     * @property {string} location - Location path
     * @property {string} querystring - Querystring from the hash
     * @property {object} [userData] - Custom data passed by the user
     * @property {SvelteComponent} [component] - Svelte component (only in `routeLoaded` events)
     * @property {string} [name] - Name of the Svelte component (only in `routeLoaded` events)
     */
    		/**
     * Executes all conditions (if any) to control whether the route can be shown. Conditions are executed in the order they are defined, and if a condition fails, the following ones aren't executed.
     * 
     * @param {RouteDetail} detail - Route detail
     * @returns {boolean} Returns true if all the conditions succeeded
     */
    		async checkConditions(detail) {
    			for (let i = 0; i < this.conditions.length; i++) {
    				if (!await this.conditions[i](detail)) {
    					return false;
    				}
    			}

    			return true;
    		}
    	}

    	// Set up all routes
    	const routesList = [];

    	if (routes instanceof Map) {
    		// If it's a map, iterate on it right away
    		routes.forEach((route, path) => {
    			routesList.push(new RouteItem(path, route));
    		});
    	} else {
    		// We have an object, so iterate on its own properties
    		Object.keys(routes).forEach(path => {
    			routesList.push(new RouteItem(path, routes[path]));
    		});
    	}

    	// Props for the component to render
    	let component = null;

    	let componentParams = null;
    	let props = {};

    	// Event dispatcher from Svelte
    	const dispatch = createEventDispatcher();

    	// Just like dispatch, but executes on the next iteration of the event loop
    	async function dispatchNextTick(name, detail) {
    		// Execute this code when the current call stack is complete
    		await tick();

    		dispatch(name, detail);
    	}

    	// If this is set, then that means we have popped into this var the state of our last scroll position
    	let previousScrollState = null;

    	let popStateChanged = null;

    	if (restoreScrollState) {
    		popStateChanged = event => {
    			// If this event was from our history.replaceState, event.state will contain
    			// our scroll history. Otherwise, event.state will be null (like on forward
    			// navigation)
    			if (event.state && event.state.__svelte_spa_router_scrollY) {
    				previousScrollState = event.state;
    			} else {
    				previousScrollState = null;
    			}
    		};

    		// This is removed in the destroy() invocation below
    		window.addEventListener('popstate', popStateChanged);

    		afterUpdate(() => {
    			// If this exists, then this is a back navigation: restore the scroll position
    			if (previousScrollState) {
    				window.scrollTo(previousScrollState.__svelte_spa_router_scrollX, previousScrollState.__svelte_spa_router_scrollY);
    			} else {
    				// Otherwise this is a forward navigation: scroll to top
    				window.scrollTo(0, 0);
    			}
    		});
    	}

    	// Always have the latest value of loc
    	let lastLoc = null;

    	// Current object of the component loaded
    	let componentObj = null;

    	// Handle hash change events
    	// Listen to changes in the $loc store and update the page
    	// Do not use the $: syntax because it gets triggered by too many things
    	const unsubscribeLoc = loc.subscribe(async newLoc => {
    		lastLoc = newLoc;

    		// Find a route matching the location
    		let i = 0;

    		while (i < routesList.length) {
    			const match = routesList[i].match(newLoc.location);

    			if (!match) {
    				i++;
    				continue;
    			}

    			const detail = {
    				route: routesList[i].path,
    				location: newLoc.location,
    				querystring: newLoc.querystring,
    				userData: routesList[i].userData,
    				params: match && typeof match == 'object' && Object.keys(match).length
    				? match
    				: null
    			};

    			// Check if the route can be loaded - if all conditions succeed
    			if (!await routesList[i].checkConditions(detail)) {
    				// Don't display anything
    				$$invalidate(0, component = null);

    				componentObj = null;

    				// Trigger an event to notify the user, then exit
    				dispatchNextTick('conditionsFailed', detail);

    				return;
    			}

    			// Trigger an event to alert that we're loading the route
    			// We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick
    			dispatchNextTick('routeLoading', Object.assign({}, detail));

    			// If there's a component to show while we're loading the route, display it
    			const obj = routesList[i].component;

    			// Do not replace the component if we're loading the same one as before, to avoid the route being unmounted and re-mounted
    			if (componentObj != obj) {
    				if (obj.loading) {
    					$$invalidate(0, component = obj.loading);
    					componentObj = obj;
    					$$invalidate(1, componentParams = obj.loadingParams);
    					$$invalidate(2, props = {});

    					// Trigger the routeLoaded event for the loading component
    					// Create a copy of detail so we don't modify the object for the dynamic route (and the dynamic route doesn't modify our object too)
    					dispatchNextTick('routeLoaded', Object.assign({}, detail, {
    						component,
    						name: component.name,
    						params: componentParams
    					}));
    				} else {
    					$$invalidate(0, component = null);
    					componentObj = null;
    				}

    				// Invoke the Promise
    				const loaded = await obj();

    				// Now that we're here, after the promise resolved, check if we still want this component, as the user might have navigated to another page in the meanwhile
    				if (newLoc != lastLoc) {
    					// Don't update the component, just exit
    					return;
    				}

    				// If there is a "default" property, which is used by async routes, then pick that
    				$$invalidate(0, component = loaded && loaded.default || loaded);

    				componentObj = obj;
    			}

    			// Set componentParams only if we have a match, to avoid a warning similar to `<Component> was created with unknown prop 'params'`
    			// Of course, this assumes that developers always add a "params" prop when they are expecting parameters
    			if (match && typeof match == 'object' && Object.keys(match).length) {
    				$$invalidate(1, componentParams = match);
    			} else {
    				$$invalidate(1, componentParams = null);
    			}

    			// Set static props, if any
    			$$invalidate(2, props = routesList[i].props);

    			// Dispatch the routeLoaded event then exit
    			// We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick
    			dispatchNextTick('routeLoaded', Object.assign({}, detail, {
    				component,
    				name: component.name,
    				params: componentParams
    			})).then(() => {
    				params.set(componentParams);
    			});

    			return;
    		}

    		// If we're still here, there was no match, so show the empty component
    		$$invalidate(0, component = null);

    		componentObj = null;
    		params.set(undefined);
    	});

    	onDestroy(() => {
    		unsubscribeLoc();
    		popStateChanged && window.removeEventListener('popstate', popStateChanged);
    	});

    	const writable_props = ['routes', 'prefix', 'restoreScrollState'];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$6.warn(`<Router> was created with unknown prop '${key}'`);
    	});

    	function routeEvent_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function routeEvent_handler_1(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('routes' in $$props) $$invalidate(3, routes = $$props.routes);
    		if ('prefix' in $$props) $$invalidate(4, prefix = $$props.prefix);
    		if ('restoreScrollState' in $$props) $$invalidate(5, restoreScrollState = $$props.restoreScrollState);
    	};

    	$$self.$capture_state = () => ({
    		readable,
    		writable,
    		derived,
    		tick,
    		_wrap: wrap$1,
    		wrap,
    		getLocation,
    		loc,
    		location: location$1,
    		querystring,
    		params,
    		push,
    		pop,
    		replace,
    		link,
    		updateLink,
    		linkOpts,
    		scrollstateHistoryHandler,
    		onDestroy,
    		createEventDispatcher,
    		afterUpdate,
    		parse,
    		routes,
    		prefix,
    		restoreScrollState,
    		RouteItem,
    		routesList,
    		component,
    		componentParams,
    		props,
    		dispatch,
    		dispatchNextTick,
    		previousScrollState,
    		popStateChanged,
    		lastLoc,
    		componentObj,
    		unsubscribeLoc
    	});

    	$$self.$inject_state = $$props => {
    		if ('routes' in $$props) $$invalidate(3, routes = $$props.routes);
    		if ('prefix' in $$props) $$invalidate(4, prefix = $$props.prefix);
    		if ('restoreScrollState' in $$props) $$invalidate(5, restoreScrollState = $$props.restoreScrollState);
    		if ('component' in $$props) $$invalidate(0, component = $$props.component);
    		if ('componentParams' in $$props) $$invalidate(1, componentParams = $$props.componentParams);
    		if ('props' in $$props) $$invalidate(2, props = $$props.props);
    		if ('previousScrollState' in $$props) previousScrollState = $$props.previousScrollState;
    		if ('popStateChanged' in $$props) popStateChanged = $$props.popStateChanged;
    		if ('lastLoc' in $$props) lastLoc = $$props.lastLoc;
    		if ('componentObj' in $$props) componentObj = $$props.componentObj;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*restoreScrollState*/ 32) {
    			// Update history.scrollRestoration depending on restoreScrollState
    			history.scrollRestoration = restoreScrollState ? 'manual' : 'auto';
    		}
    	};

    	return [
    		component,
    		componentParams,
    		props,
    		routes,
    		prefix,
    		restoreScrollState,
    		routeEvent_handler,
    		routeEvent_handler_1
    	];
    }

    class Router extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$E, create_fragment$E, safe_not_equal, {
    			routes: 3,
    			prefix: 4,
    			restoreScrollState: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Router",
    			options,
    			id: create_fragment$E.name
    		});
    	}

    	get routes() {
    		throw new Error_1$1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set routes(value) {
    		throw new Error_1$1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prefix() {
    		throw new Error_1$1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prefix(value) {
    		throw new Error_1$1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get restoreScrollState() {
    		throw new Error_1$1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set restoreScrollState(value) {
    		throw new Error_1$1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Modals/ProfilePhotoModal.svelte generated by Svelte v3.46.4 */

    const file$D = "src/components/Modals/ProfilePhotoModal.svelte";

    function create_fragment$D(ctx) {
    	let div6;
    	let div5;
    	let div4;
    	let div0;
    	let h5;
    	let t1;
    	let button0;
    	let t2;
    	let div2;
    	let div1;
    	let label;
    	let t4;
    	let input;
    	let t5;
    	let img;
    	let img_src_value;
    	let t6;
    	let div3;
    	let button1;
    	let t8;
    	let button2;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			div0 = element("div");
    			h5 = element("h5");
    			h5.textContent = "Edit Profile";
    			t1 = space();
    			button0 = element("button");
    			t2 = space();
    			div2 = element("div");
    			div1 = element("div");
    			label = element("label");
    			label.textContent = "Profile photo";
    			t4 = space();
    			input = element("input");
    			t5 = space();
    			img = element("img");
    			t6 = space();
    			div3 = element("div");
    			button1 = element("button");
    			button1.textContent = "Close";
    			t8 = space();
    			button2 = element("button");
    			button2.textContent = "Save Profile photo";
    			attr_dev(h5, "class", "modal-title");
    			attr_dev(h5, "id", "ModalProfileModalLabel");
    			add_location(h5, file$D, 73, 8, 1915);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "btn-close");
    			attr_dev(button0, "data-bs-dismiss", "modal");
    			attr_dev(button0, "aria-label", "Close");
    			add_location(button0, file$D, 74, 8, 1993);
    			attr_dev(div0, "class", "modal-header");
    			add_location(div0, file$D, 72, 6, 1880);
    			attr_dev(label, "for", "profilePhoto");
    			add_location(label, file$D, 79, 10, 2180);
    			attr_dev(input, "type", "file");
    			attr_dev(input, "name", "profilePhoto");
    			attr_dev(input, "id", "profilePhoto");
    			attr_dev(input, "accept", ".png, .jpg, .jpeg");
    			add_location(input, file$D, 80, 10, 2238);
    			if (!src_url_equal(img.src, img_src_value = "")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			attr_dev(img, "id", "showProfileImage");
    			attr_dev(img, "class", "photoLoaded svelte-7bg6c8");
    			add_location(img, file$D, 81, 10, 2360);
    			attr_dev(div1, "class", "photo");
    			add_location(div1, file$D, 78, 8, 2150);
    			attr_dev(div2, "class", "modal-body text-start");
    			add_location(div2, file$D, 77, 6, 2106);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "btn btn-secondary");
    			attr_dev(button1, "data-bs-dismiss", "modal");
    			add_location(button1, file$D, 86, 8, 2492);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "btn btn-outline-primary btn-flylinkers");
    			attr_dev(button2, "data-bs-dismiss", "modal");
    			add_location(button2, file$D, 87, 8, 2587);
    			attr_dev(div3, "class", "modal-footer");
    			add_location(div3, file$D, 85, 6, 2457);
    			attr_dev(div4, "class", "modal-content");
    			add_location(div4, file$D, 70, 4, 1845);
    			attr_dev(div5, "class", "modal-dialog modal-dialog-centered modal-lg");
    			add_location(div5, file$D, 68, 2, 1782);
    			attr_dev(div6, "class", "modal fade");
    			attr_dev(div6, "id", "ModalProfile");
    			attr_dev(div6, "tabindex", "-1");
    			attr_dev(div6, "aria-labelledby", "ModalProfileModalLabel");
    			attr_dev(div6, "aria-hidden", "true");
    			add_location(div6, file$D, 67, 0, 1663);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div0);
    			append_dev(div0, h5);
    			append_dev(div0, t1);
    			append_dev(div0, button0);
    			append_dev(div4, t2);
    			append_dev(div4, div2);
    			append_dev(div2, div1);
    			append_dev(div1, label);
    			append_dev(div1, t4);
    			append_dev(div1, input);
    			append_dev(div1, t5);
    			append_dev(div1, img);
    			append_dev(div4, t6);
    			append_dev(div4, div3);
    			append_dev(div3, button1);
    			append_dev(div3, t8);
    			append_dev(div3, button2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "change", /*showProfileImg*/ ctx[1], false, false, false),
    					listen_dev(
    						button2,
    						"click",
    						function () {
    							if (is_function(/*updateProfile*/ ctx[2](/*id*/ ctx[0]))) /*updateProfile*/ ctx[2](/*id*/ ctx[0]).apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$D.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$D($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProfilePhotoModal', slots, []);
    	let profilePhotoB64;
    	let urlProfilePhoto;
    	let idProfilePhoto;
    	let { id, urlAPI } = $$props;

    	const showProfileImg = () => {
    		const render = new FileReader();
    		render.readAsDataURL(profilePhoto.files[0]);

    		render.onloadend = () => {
    			showProfileImage.style.display = 'flex';
    			showProfileImage.src = render.result;
    			profilePhotoB64 = render.result;
    		};
    	};

    	const convertProfileB64 = async () => {
    		const response = await fetch(`${urlAPI}/resources/img/`, {
    			method: 'POST',
    			headers: { 'Content-Type': 'application/json' },
    			body: JSON.stringify({ img: profilePhotoB64 })
    		});

    		const content = await response.json();
    		urlProfilePhoto = content.img;
    		idProfilePhoto = content.id;
    	};

    	const updateProfile = async id => {
    		await convertProfileB64();

    		const response = await fetch(`${urlAPI}/user/create/?id=${id}`, {
    			method: 'PUT',
    			headers: { 'Content-Type': 'application/json' },
    			body: JSON.stringify({ photo: urlProfilePhoto })
    		});

    		const content = await response.json();

    		if (content) {
    			localStorage.removeItem('profilePhoto');
    			const profileImg = document.getElementById('dropdownMenuButton1');
    			const headerUserImage = document.getElementById('headerUserImage');
    			profileImg.setAttribute('src', `${urlAPI}${urlProfilePhoto}`);
    			headerUserImage.setAttribute('src', `${urlAPI}${urlProfilePhoto}`);
    		}
    	};

    	const writable_props = ['id', 'urlAPI'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ProfilePhotoModal> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    		if ('urlAPI' in $$props) $$invalidate(3, urlAPI = $$props.urlAPI);
    	};

    	$$self.$capture_state = () => ({
    		profilePhotoB64,
    		urlProfilePhoto,
    		idProfilePhoto,
    		id,
    		urlAPI,
    		showProfileImg,
    		convertProfileB64,
    		updateProfile
    	});

    	$$self.$inject_state = $$props => {
    		if ('profilePhotoB64' in $$props) profilePhotoB64 = $$props.profilePhotoB64;
    		if ('urlProfilePhoto' in $$props) urlProfilePhoto = $$props.urlProfilePhoto;
    		if ('idProfilePhoto' in $$props) idProfilePhoto = $$props.idProfilePhoto;
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    		if ('urlAPI' in $$props) $$invalidate(3, urlAPI = $$props.urlAPI);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [id, showProfileImg, updateProfile, urlAPI];
    }

    class ProfilePhotoModal extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$D, create_fragment$D, safe_not_equal, { id: 0, urlAPI: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProfilePhotoModal",
    			options,
    			id: create_fragment$D.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[0] === undefined && !('id' in props)) {
    			console.warn("<ProfilePhotoModal> was created without expected prop 'id'");
    		}

    		if (/*urlAPI*/ ctx[3] === undefined && !('urlAPI' in props)) {
    			console.warn("<ProfilePhotoModal> was created without expected prop 'urlAPI'");
    		}
    	}

    	get id() {
    		throw new Error("<ProfilePhotoModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<ProfilePhotoModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlAPI() {
    		throw new Error("<ProfilePhotoModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error("<ProfilePhotoModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/profile/UserPhoto.svelte generated by Svelte v3.46.4 */
    const file$C = "src/components/profile/UserPhoto.svelte";

    // (36:2) {:else}
    function create_else_block$e(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[2] + /*photo*/ ctx[1]))) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "profilePhoto");
    			attr_dev(img, "class", "svelte-1tdigc9");
    			add_location(img, file$C, 36, 4, 948);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*urlAPI, photo*/ 6 && !src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[2] + /*photo*/ ctx[1]))) {
    				attr_dev(img, "src", img_src_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$e.name,
    		type: "else",
    		source: "(36:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (31:2) {#if id}
    function create_if_block$i(ctx) {
    	let img;
    	let img_src_value;
    	let t0;
    	let ul;
    	let li;
    	let a;

    	const block = {
    		c: function create() {
    			img = element("img");
    			t0 = space();
    			ul = element("ul");
    			li = element("li");
    			a = element("a");
    			a.textContent = "Update profile photo";
    			if (!src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[2] + /*photo*/ ctx[1]))) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "profilePhoto");
    			attr_dev(img, "class", "dropdown-toggle svelte-1tdigc9");
    			attr_dev(img, "type", "button");
    			attr_dev(img, "id", "dropdownMenuButton1");
    			attr_dev(img, "data-bs-toggle", "dropdown");
    			attr_dev(img, "aria-expanded", "false");
    			add_location(img, file$C, 31, 4, 569);
    			attr_dev(a, "class", "dropdown-item");
    			attr_dev(a, "href", "/");
    			attr_dev(a, "data-bs-toggle", "modal");
    			attr_dev(a, "data-bs-target", "#ModalProfile");
    			add_location(a, file$C, 33, 10, 806);
    			add_location(li, file$C, 33, 6, 802);
    			attr_dev(ul, "class", "dropdown-menu");
    			attr_dev(ul, "aria-labelledby", "dropdownMenuButton1");
    			add_location(ul, file$C, 32, 4, 731);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, ul, anchor);
    			append_dev(ul, li);
    			append_dev(li, a);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*urlAPI, photo*/ 6 && !src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[2] + /*photo*/ ctx[1]))) {
    				attr_dev(img, "src", img_src_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(ul);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$i.name,
    		type: "if",
    		source: "(31:2) {#if id}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$C(ctx) {
    	let div;

    	function select_block_type(ctx, dirty) {
    		if (/*id*/ ctx[0]) return create_if_block$i;
    		return create_else_block$e;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", "Profile-card-avatar dropdown svelte-1tdigc9");
    			add_location(div, file$C, 29, 0, 511);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_block.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, null);
    				}
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$C.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$C($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('UserPhoto', slots, []);
    	let { photo, urlAPI, id } = $$props;

    	if (id === undefined) {
    		id = '';
    	}

    	const writable_props = ['photo', 'urlAPI', 'id'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UserPhoto> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('photo' in $$props) $$invalidate(1, photo = $$props.photo);
    		if ('urlAPI' in $$props) $$invalidate(2, urlAPI = $$props.urlAPI);
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    	};

    	$$self.$capture_state = () => ({ ProfilePhotoModal, photo, urlAPI, id });

    	$$self.$inject_state = $$props => {
    		if ('photo' in $$props) $$invalidate(1, photo = $$props.photo);
    		if ('urlAPI' in $$props) $$invalidate(2, urlAPI = $$props.urlAPI);
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [id, photo, urlAPI];
    }

    class UserPhoto extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$C, create_fragment$C, safe_not_equal, { photo: 1, urlAPI: 2, id: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UserPhoto",
    			options,
    			id: create_fragment$C.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*photo*/ ctx[1] === undefined && !('photo' in props)) {
    			console.warn("<UserPhoto> was created without expected prop 'photo'");
    		}

    		if (/*urlAPI*/ ctx[2] === undefined && !('urlAPI' in props)) {
    			console.warn("<UserPhoto> was created without expected prop 'urlAPI'");
    		}

    		if (/*id*/ ctx[0] === undefined && !('id' in props)) {
    			console.warn("<UserPhoto> was created without expected prop 'id'");
    		}
    	}

    	get photo() {
    		throw new Error("<UserPhoto>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set photo(value) {
    		throw new Error("<UserPhoto>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlAPI() {
    		throw new Error("<UserPhoto>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error("<UserPhoto>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<UserPhoto>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<UserPhoto>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    // List of nodes to update
    const nodes = [];

    // Current location
    let location;

    // Function that updates all nodes marking the active ones
    function checkActive(el) {
        const matchesLocation = el.pattern.test(location);
        toggleClasses(el, el.className, matchesLocation);
        toggleClasses(el, el.inactiveClassName, !matchesLocation);
    }

    function toggleClasses(el, className, shouldAdd) {
        (className || '').split(' ').forEach((cls) => {
            if (!cls) {
                return
            }
            // Remove the class firsts
            el.node.classList.remove(cls);

            // If the pattern doesn't match, then set the class
            if (shouldAdd) {
                el.node.classList.add(cls);
            }
        });
    }

    // Listen to changes in the location
    loc.subscribe((value) => {
        // Update the location
        location = value.location + (value.querystring ? '?' + value.querystring : '');

        // Update all nodes
        nodes.map(checkActive);
    });

    /**
     * @typedef {Object} ActiveOptions
     * @property {string|RegExp} [path] - Path expression that makes the link active when matched (must start with '/' or '*'); default is the link's href
     * @property {string} [className] - CSS class to apply to the element when active; default value is "active"
     */

    /**
     * Svelte Action for automatically adding the "active" class to elements (links, or any other DOM element) when the current location matches a certain path.
     * 
     * @param {HTMLElement} node - The target node (automatically set by Svelte)
     * @param {ActiveOptions|string|RegExp} [opts] - Can be an object of type ActiveOptions, or a string (or regular expressions) representing ActiveOptions.path.
     * @returns {{destroy: function(): void}} Destroy function
     */
    function active(node, opts) {
        // Check options
        if (opts && (typeof opts == 'string' || (typeof opts == 'object' && opts instanceof RegExp))) {
            // Interpret strings and regular expressions as opts.path
            opts = {
                path: opts
            };
        }
        else {
            // Ensure opts is a dictionary
            opts = opts || {};
        }

        // Path defaults to link target
        if (!opts.path && node.hasAttribute('href')) {
            opts.path = node.getAttribute('href');
            if (opts.path && opts.path.length > 1 && opts.path.charAt(0) == '#') {
                opts.path = opts.path.substring(1);
            }
        }

        // Default class name
        if (!opts.className) {
            opts.className = 'active';
        }

        // If path is a string, it must start with '/' or '*'
        if (!opts.path || 
            typeof opts.path == 'string' && (opts.path.length < 1 || (opts.path.charAt(0) != '/' && opts.path.charAt(0) != '*'))
        ) {
            throw Error('Invalid value for "path" argument')
        }

        // If path is not a regular expression already, make it
        const {pattern} = typeof opts.path == 'string' ?
            parse(opts.path) :
            {pattern: opts.path};

        // Add the node to the list
        const el = {
            node,
            className: opts.className,
            inactiveClassName: opts.inactiveClassName,
            pattern
        };
        nodes.push(el);

        // Trigger the action right away
        checkActive(el);

        return {
            // When the element is destroyed, remove it from the list
            destroy() {
                nodes.splice(nodes.indexOf(el), 1);
            }
        }
    }

    /* src/components/profile-card/ProfileCard.svelte generated by Svelte v3.46.4 */
    const file$B = "src/components/profile-card/ProfileCard.svelte";

    function create_fragment$B(ctx) {
    	let div6;
    	let div5;
    	let userpotho;
    	let t0;
    	let div2;
    	let div0;
    	let h2;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let span0;
    	let t5;
    	let t6;
    	let div1;
    	let p0;
    	let t7;
    	let span1;
    	let t9;
    	let p1;
    	let t10;
    	let span2;
    	let t12;
    	let div4;
    	let p2;
    	let a;
    	let div3;
    	let i;
    	let t13;
    	let current;
    	let mounted;
    	let dispose;

    	userpotho = new UserPhoto({
    			props: {
    				photo: /*photo*/ ctx[2],
    				urlAPI: /*urlAPI*/ ctx[4]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			div5 = element("div");
    			create_component(userpotho.$$.fragment);
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			h2 = element("h2");
    			t1 = text(/*name*/ ctx[0]);
    			t2 = space();
    			t3 = text(/*last_name*/ ctx[3]);
    			t4 = space();
    			span0 = element("span");
    			t5 = text(/*title*/ ctx[1]);
    			t6 = space();
    			div1 = element("div");
    			p0 = element("p");
    			t7 = text("Who viewed your profile-card ");
    			span1 = element("span");
    			span1.textContent = "3.8K";
    			t9 = space();
    			p1 = element("p");
    			t10 = text("Views of your post ");
    			span2 = element("span");
    			span2.textContent = "3.8K";
    			t12 = space();
    			div4 = element("div");
    			p2 = element("p");
    			a = element("a");
    			div3 = element("div");
    			i = element("i");
    			t13 = text("\n            Edit profile");
    			attr_dev(h2, "class", "pt-2 pt-lg-0 svelte-svq0p9");
    			add_location(h2, file$B, 58, 8, 1274);
    			attr_dev(span0, "class", "svelte-svq0p9");
    			add_location(span0, file$B, 59, 8, 1331);
    			attr_dev(div0, "class", "Profile-card-user mt-4 mt-lg-0 svelte-svq0p9");
    			add_location(div0, file$B, 57, 6, 1221);
    			attr_dev(span1, "class", "svelte-svq0p9");
    			add_location(span1, file$B, 62, 40, 1448);
    			attr_dev(p0, "class", "svelte-svq0p9");
    			add_location(p0, file$B, 62, 8, 1416);
    			attr_dev(span2, "class", "svelte-svq0p9");
    			add_location(span2, file$B, 63, 30, 1501);
    			attr_dev(p1, "class", "svelte-svq0p9");
    			add_location(p1, file$B, 63, 8, 1479);
    			attr_dev(div1, "class", "Profile-card-text my-2");
    			add_location(div1, file$B, 61, 6, 1371);
    			attr_dev(div2, "class", "Profile-card-info text-center mt-2 svelte-svq0p9");
    			add_location(div2, file$B, 56, 4, 1166);
    			attr_dev(i, "class", "fas fa-bookmark svelte-svq0p9");
    			add_location(i, file$B, 70, 12, 1733);
    			attr_dev(div3, "class", "Profile-edit-profile svelte-svq0p9");
    			add_location(div3, file$B, 69, 10, 1686);
    			attr_dev(a, "href", "/profile");
    			attr_dev(a, "class", "d-flex align-items-center");
    			add_location(a, file$B, 68, 8, 1602);
    			add_location(p2, file$B, 67, 6, 1590);
    			attr_dev(div4, "class", "Profile-card-edit svelte-svq0p9");
    			add_location(div4, file$B, 66, 4, 1552);
    			attr_dev(div5, "class", "Profile-card-content d-flex flex-column justify-content-center align-items-center");
    			add_location(div5, file$B, 54, 2, 1032);
    			attr_dev(div6, "class", "Profile-card Default-containers px-0 svelte-svq0p9");
    			add_location(div6, file$B, 53, 0, 979);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div5);
    			mount_component(userpotho, div5, null);
    			append_dev(div5, t0);
    			append_dev(div5, div2);
    			append_dev(div2, div0);
    			append_dev(div0, h2);
    			append_dev(h2, t1);
    			append_dev(h2, t2);
    			append_dev(h2, t3);
    			append_dev(div0, t4);
    			append_dev(div0, span0);
    			append_dev(span0, t5);
    			append_dev(div2, t6);
    			append_dev(div2, div1);
    			append_dev(div1, p0);
    			append_dev(p0, t7);
    			append_dev(p0, span1);
    			append_dev(div1, t9);
    			append_dev(div1, p1);
    			append_dev(p1, t10);
    			append_dev(p1, span2);
    			append_dev(div5, t12);
    			append_dev(div5, div4);
    			append_dev(div4, p2);
    			append_dev(p2, a);
    			append_dev(a, div3);
    			append_dev(div3, i);
    			append_dev(div3, t13);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(link.call(null, a)),
    					action_destroyer(active.call(null, a))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const userpotho_changes = {};
    			if (dirty & /*photo*/ 4) userpotho_changes.photo = /*photo*/ ctx[2];
    			if (dirty & /*urlAPI*/ 16) userpotho_changes.urlAPI = /*urlAPI*/ ctx[4];
    			userpotho.$set(userpotho_changes);
    			if (!current || dirty & /*name*/ 1) set_data_dev(t1, /*name*/ ctx[0]);
    			if (!current || dirty & /*last_name*/ 8) set_data_dev(t3, /*last_name*/ ctx[3]);
    			if (!current || dirty & /*title*/ 2) set_data_dev(t5, /*title*/ ctx[1]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(userpotho.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(userpotho.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			destroy_component(userpotho);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$B.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$B($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProfileCard', slots, []);
    	let { name, title, photo, last_name, urlAPI } = $$props;
    	const writable_props = ['name', 'title', 'photo', 'last_name', 'urlAPI'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ProfileCard> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('title' in $$props) $$invalidate(1, title = $$props.title);
    		if ('photo' in $$props) $$invalidate(2, photo = $$props.photo);
    		if ('last_name' in $$props) $$invalidate(3, last_name = $$props.last_name);
    		if ('urlAPI' in $$props) $$invalidate(4, urlAPI = $$props.urlAPI);
    	};

    	$$self.$capture_state = () => ({
    		UserPotho: UserPhoto,
    		link,
    		active,
    		name,
    		title,
    		photo,
    		last_name,
    		urlAPI
    	});

    	$$self.$inject_state = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('title' in $$props) $$invalidate(1, title = $$props.title);
    		if ('photo' in $$props) $$invalidate(2, photo = $$props.photo);
    		if ('last_name' in $$props) $$invalidate(3, last_name = $$props.last_name);
    		if ('urlAPI' in $$props) $$invalidate(4, urlAPI = $$props.urlAPI);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [name, title, photo, last_name, urlAPI];
    }

    class ProfileCard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$B, create_fragment$B, safe_not_equal, {
    			name: 0,
    			title: 1,
    			photo: 2,
    			last_name: 3,
    			urlAPI: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProfileCard",
    			options,
    			id: create_fragment$B.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*name*/ ctx[0] === undefined && !('name' in props)) {
    			console.warn("<ProfileCard> was created without expected prop 'name'");
    		}

    		if (/*title*/ ctx[1] === undefined && !('title' in props)) {
    			console.warn("<ProfileCard> was created without expected prop 'title'");
    		}

    		if (/*photo*/ ctx[2] === undefined && !('photo' in props)) {
    			console.warn("<ProfileCard> was created without expected prop 'photo'");
    		}

    		if (/*last_name*/ ctx[3] === undefined && !('last_name' in props)) {
    			console.warn("<ProfileCard> was created without expected prop 'last_name'");
    		}

    		if (/*urlAPI*/ ctx[4] === undefined && !('urlAPI' in props)) {
    			console.warn("<ProfileCard> was created without expected prop 'urlAPI'");
    		}
    	}

    	get name() {
    		throw new Error("<ProfileCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<ProfileCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<ProfileCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<ProfileCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get photo() {
    		throw new Error("<ProfileCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set photo(value) {
    		throw new Error("<ProfileCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get last_name() {
    		throw new Error("<ProfileCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set last_name(value) {
    		throw new Error("<ProfileCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlAPI() {
    		throw new Error("<ProfileCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error("<ProfileCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/groups-card/Group.svelte generated by Svelte v3.46.4 */

    const file$A = "src/components/groups-card/Group.svelte";

    function create_fragment$A(ctx) {
    	let div;
    	let ul;
    	let a;
    	let li;
    	let i;
    	let t0;
    	let span;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			ul = element("ul");
    			a = element("a");
    			li = element("li");
    			i = element("i");
    			t0 = space();
    			span = element("span");
    			t1 = text(/*name*/ ctx[0]);
    			attr_dev(i, "class", "fas fa-users svelte-1vzc48p");
    			add_location(i, file$A, 25, 8, 308);
    			add_location(span, file$A, 26, 8, 345);
    			attr_dev(li, "class", "svelte-1vzc48p");
    			add_location(li, file$A, 24, 6, 295);
    			attr_dev(a, "href", /*link*/ ctx[1]);
    			attr_dev(a, "class", "svelte-1vzc48p");
    			add_location(a, file$A, 23, 4, 273);
    			attr_dev(ul, "class", "svelte-1vzc48p");
    			add_location(ul, file$A, 22, 2, 264);
    			attr_dev(div, "class", "Group svelte-1vzc48p");
    			add_location(div, file$A, 21, 0, 242);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, ul);
    			append_dev(ul, a);
    			append_dev(a, li);
    			append_dev(li, i);
    			append_dev(li, t0);
    			append_dev(li, span);
    			append_dev(span, t1);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*name*/ 1) set_data_dev(t1, /*name*/ ctx[0]);

    			if (dirty & /*link*/ 2) {
    				attr_dev(a, "href", /*link*/ ctx[1]);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$A.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$A($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Group', slots, []);
    	let { name } = $$props;
    	let { link } = $$props;
    	const writable_props = ['name', 'link'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Group> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('link' in $$props) $$invalidate(1, link = $$props.link);
    	};

    	$$self.$capture_state = () => ({ name, link });

    	$$self.$inject_state = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('link' in $$props) $$invalidate(1, link = $$props.link);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [name, link];
    }

    class Group extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$A, create_fragment$A, safe_not_equal, { name: 0, link: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Group",
    			options,
    			id: create_fragment$A.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*name*/ ctx[0] === undefined && !('name' in props)) {
    			console.warn("<Group> was created without expected prop 'name'");
    		}

    		if (/*link*/ ctx[1] === undefined && !('link' in props)) {
    			console.warn("<Group> was created without expected prop 'link'");
    		}
    	}

    	get name() {
    		throw new Error("<Group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<Group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get link() {
    		throw new Error("<Group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set link(value) {
    		throw new Error("<Group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/groups-card/Groups.svelte generated by Svelte v3.46.4 */
    const file$z = "src/components/groups-card/Groups.svelte";

    function get_each_context$e(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[1] = list[i];
    	return child_ctx;
    }

    // (38:2) {:else}
    function create_else_block$d(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "Loading...";
    			add_location(p, file$z, 38, 4, 550);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$d.name,
    		type: "else",
    		source: "(38:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (36:2) {#each data as group}
    function create_each_block$e(ctx) {
    	let group;
    	let current;
    	const group_spread_levels = [/*group*/ ctx[1]];
    	let group_props = {};

    	for (let i = 0; i < group_spread_levels.length; i += 1) {
    		group_props = assign(group_props, group_spread_levels[i]);
    	}

    	group = new Group({ props: group_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(group.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(group, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const group_changes = (dirty & /*data*/ 1)
    			? get_spread_update(group_spread_levels, [get_spread_object(/*group*/ ctx[1])])
    			: {};

    			group.$set(group_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(group.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(group.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(group, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$e.name,
    		type: "each",
    		source: "(36:2) {#each data as group}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$z(ctx) {
    	let div;
    	let h6;
    	let t1;
    	let current;
    	let each_value = /*data*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$e(get_each_context$e(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block$d(ctx);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			h6 = element("h6");
    			h6.textContent = "Groups";
    			t1 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			if (each_1_else) {
    				each_1_else.c();
    			}

    			attr_dev(h6, "class", "svelte-jg8a8m");
    			add_location(h6, file$z, 34, 2, 472);
    			attr_dev(div, "class", "Groups d-none d-lg-block Default-containers svelte-jg8a8m");
    			add_location(div, file$z, 33, 0, 412);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h6);
    			append_dev(div, t1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			if (each_1_else) {
    				each_1_else.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*data*/ 1) {
    				each_value = /*data*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$e(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$e(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();

    				if (each_value.length) {
    					if (each_1_else) {
    						each_1_else.d(1);
    						each_1_else = null;
    					}
    				} else if (!each_1_else) {
    					each_1_else = create_else_block$d(ctx);
    					each_1_else.c();
    					each_1_else.m(div, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    			if (each_1_else) each_1_else.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$z($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Groups', slots, []);

    	const data = [
    		{ name: 'Aviation', link: '/' },
    		{ name: 'Events', link: '/' },
    		{ name: 'Prodct', link: '/' },
    		{ name: 'Seminars', link: '/' },
    		{ name: 'Planes', link: '/' }
    	];

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Groups> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Group, data });
    	return [data];
    }

    class Groups extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$z, create_fragment$z, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Groups",
    			options,
    			id: create_fragment$z.name
    		});
    	}
    }

    /* src/components/hashtags-card/Hashtag.svelte generated by Svelte v3.46.4 */

    const file$y = "src/components/hashtags-card/Hashtag.svelte";

    function create_fragment$y(ctx) {
    	let div;
    	let ul;
    	let a;
    	let li;
    	let span;
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			ul = element("ul");
    			a = element("a");
    			li = element("li");
    			span = element("span");
    			t0 = text("# ");
    			t1 = text(/*name*/ ctx[0]);
    			attr_dev(span, "class", "svelte-my1t9e");
    			add_location(span, file$y, 22, 8, 305);
    			attr_dev(li, "class", "svelte-my1t9e");
    			add_location(li, file$y, 21, 6, 292);
    			attr_dev(a, "href", /*link*/ ctx[1]);
    			add_location(a, file$y, 20, 4, 270);
    			attr_dev(ul, "class", "svelte-my1t9e");
    			add_location(ul, file$y, 19, 2, 261);
    			attr_dev(div, "class", "Hastag svelte-my1t9e");
    			add_location(div, file$y, 18, 0, 238);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, ul);
    			append_dev(ul, a);
    			append_dev(a, li);
    			append_dev(li, span);
    			append_dev(span, t0);
    			append_dev(span, t1);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*name*/ 1) set_data_dev(t1, /*name*/ ctx[0]);

    			if (dirty & /*link*/ 2) {
    				attr_dev(a, "href", /*link*/ ctx[1]);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$y($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Hashtag', slots, []);
    	let { name } = $$props;
    	let { link } = $$props;
    	const writable_props = ['name', 'link'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Hashtag> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('link' in $$props) $$invalidate(1, link = $$props.link);
    	};

    	$$self.$capture_state = () => ({ name, link });

    	$$self.$inject_state = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('link' in $$props) $$invalidate(1, link = $$props.link);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [name, link];
    }

    class Hashtag extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$y, create_fragment$y, safe_not_equal, { name: 0, link: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Hashtag",
    			options,
    			id: create_fragment$y.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*name*/ ctx[0] === undefined && !('name' in props)) {
    			console.warn("<Hashtag> was created without expected prop 'name'");
    		}

    		if (/*link*/ ctx[1] === undefined && !('link' in props)) {
    			console.warn("<Hashtag> was created without expected prop 'link'");
    		}
    	}

    	get name() {
    		throw new Error("<Hashtag>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<Hashtag>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get link() {
    		throw new Error("<Hashtag>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set link(value) {
    		throw new Error("<Hashtag>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/hashtags-card/Hashtags.svelte generated by Svelte v3.46.4 */
    const file$x = "src/components/hashtags-card/Hashtags.svelte";

    function get_each_context$d(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[1] = list[i];
    	return child_ctx;
    }

    // (61:2) {:else}
    function create_else_block$c(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "Loading...";
    			attr_dev(p, "class", "svelte-1714uyw");
    			add_location(p, file$x, 61, 4, 951);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$c.name,
    		type: "else",
    		source: "(61:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (59:2) {#each data as hashtag}
    function create_each_block$d(ctx) {
    	let hashtag;
    	let current;
    	const hashtag_spread_levels = [/*hashtag*/ ctx[1]];
    	let hashtag_props = {};

    	for (let i = 0; i < hashtag_spread_levels.length; i += 1) {
    		hashtag_props = assign(hashtag_props, hashtag_spread_levels[i]);
    	}

    	hashtag = new Hashtag({ props: hashtag_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(hashtag.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(hashtag, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const hashtag_changes = (dirty & /*data*/ 1)
    			? get_spread_update(hashtag_spread_levels, [get_spread_object(/*hashtag*/ ctx[1])])
    			: {};

    			hashtag.$set(hashtag_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(hashtag.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(hashtag.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(hashtag, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$d.name,
    		type: "each",
    		source: "(59:2) {#each data as hashtag}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$x(ctx) {
    	let div1;
    	let h6;
    	let t1;
    	let t2;
    	let div0;
    	let p;
    	let current;
    	let each_value = /*data*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$d(get_each_context$d(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block$c(ctx);
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			h6 = element("h6");
    			h6.textContent = "Followed Hashtags";
    			t1 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			if (each_1_else) {
    				each_1_else.c();
    			}

    			t2 = space();
    			div0 = element("div");
    			p = element("p");
    			p.textContent = "Discover More";
    			attr_dev(h6, "class", "svelte-1714uyw");
    			add_location(h6, file$x, 57, 2, 856);
    			attr_dev(p, "class", "svelte-1714uyw");
    			add_location(p, file$x, 64, 4, 1034);
    			attr_dev(div0, "class", "Hashtags-discover text-center py-3 svelte-1714uyw");
    			add_location(div0, file$x, 63, 2, 981);
    			attr_dev(div1, "class", "Hashtags d-none d-lg-block Default-containers px-0 pb-0 svelte-1714uyw");
    			add_location(div1, file$x, 56, 0, 784);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h6);
    			append_dev(div1, t1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			if (each_1_else) {
    				each_1_else.m(div1, null);
    			}

    			append_dev(div1, t2);
    			append_dev(div1, div0);
    			append_dev(div0, p);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*data*/ 1) {
    				each_value = /*data*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$d(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$d(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div1, t2);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();

    				if (each_value.length) {
    					if (each_1_else) {
    						each_1_else.d(1);
    						each_1_else = null;
    					}
    				} else if (!each_1_else) {
    					each_1_else = create_else_block$c(ctx);
    					each_1_else.c();
    					each_1_else.m(div1, t2);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);
    			if (each_1_else) each_1_else.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$x.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$x($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Hashtags', slots, []);

    	const data = [
    		{ name: 'Aviation', link: '/' },
    		{ name: 'Events', link: '/' },
    		{ name: 'Prodct', link: '/' },
    		{ name: 'Seminars', link: '/' },
    		{ name: 'Planes', link: '/' },
    		{ name: 'Pilot', link: '/' },
    		{ name: 'Airplane', link: '/' }
    	];

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Hashtags> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Hashtag, data });
    	return [data];
    }

    class Hashtags extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$x, create_fragment$x, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Hashtags",
    			options,
    			id: create_fragment$x.name
    		});
    	}
    }

    /* src/components/SidebarLeft.svelte generated by Svelte v3.46.4 */
    const file$w = "src/components/SidebarLeft.svelte";

    function create_fragment$w(ctx) {
    	let div1;
    	let div0;
    	let profilecard;
    	let t0;
    	let groups;
    	let t1;
    	let hashtags;
    	let current;

    	profilecard = new ProfileCard({
    			props: {
    				name: /*name*/ ctx[0],
    				last_name: /*last_name*/ ctx[3],
    				title: /*title*/ ctx[1],
    				photo: /*photo*/ ctx[2],
    				urlAPI: /*urlAPI*/ ctx[4]
    			},
    			$$inline: true
    		});

    	groups = new Groups({ $$inline: true });
    	hashtags = new Hashtags({ $$inline: true });

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			create_component(profilecard.$$.fragment);
    			t0 = space();
    			create_component(groups.$$.fragment);
    			t1 = space();
    			create_component(hashtags.$$.fragment);
    			attr_dev(div0, "class", "Sidebar-container");
    			add_location(div0, file$w, 17, 2, 373);
    			attr_dev(div1, "class", "Sidebar col-12 col-lg-3");
    			add_location(div1, file$w, 16, 0, 333);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			mount_component(profilecard, div0, null);
    			append_dev(div0, t0);
    			mount_component(groups, div0, null);
    			append_dev(div0, t1);
    			mount_component(hashtags, div0, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const profilecard_changes = {};
    			if (dirty & /*name*/ 1) profilecard_changes.name = /*name*/ ctx[0];
    			if (dirty & /*last_name*/ 8) profilecard_changes.last_name = /*last_name*/ ctx[3];
    			if (dirty & /*title*/ 2) profilecard_changes.title = /*title*/ ctx[1];
    			if (dirty & /*photo*/ 4) profilecard_changes.photo = /*photo*/ ctx[2];
    			if (dirty & /*urlAPI*/ 16) profilecard_changes.urlAPI = /*urlAPI*/ ctx[4];
    			profilecard.$set(profilecard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(profilecard.$$.fragment, local);
    			transition_in(groups.$$.fragment, local);
    			transition_in(hashtags.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(profilecard.$$.fragment, local);
    			transition_out(groups.$$.fragment, local);
    			transition_out(hashtags.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(profilecard);
    			destroy_component(groups);
    			destroy_component(hashtags);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$w.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$w($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SidebarLeft', slots, []);
    	let { name, title, photo, last_name, urlAPI } = $$props;
    	const writable_props = ['name', 'title', 'photo', 'last_name', 'urlAPI'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SidebarLeft> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('title' in $$props) $$invalidate(1, title = $$props.title);
    		if ('photo' in $$props) $$invalidate(2, photo = $$props.photo);
    		if ('last_name' in $$props) $$invalidate(3, last_name = $$props.last_name);
    		if ('urlAPI' in $$props) $$invalidate(4, urlAPI = $$props.urlAPI);
    	};

    	$$self.$capture_state = () => ({
    		ProfileCard,
    		Groups,
    		Hashtags,
    		name,
    		title,
    		photo,
    		last_name,
    		urlAPI
    	});

    	$$self.$inject_state = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('title' in $$props) $$invalidate(1, title = $$props.title);
    		if ('photo' in $$props) $$invalidate(2, photo = $$props.photo);
    		if ('last_name' in $$props) $$invalidate(3, last_name = $$props.last_name);
    		if ('urlAPI' in $$props) $$invalidate(4, urlAPI = $$props.urlAPI);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [name, title, photo, last_name, urlAPI];
    }

    class SidebarLeft extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$w, create_fragment$w, safe_not_equal, {
    			name: 0,
    			title: 1,
    			photo: 2,
    			last_name: 3,
    			urlAPI: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SidebarLeft",
    			options,
    			id: create_fragment$w.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*name*/ ctx[0] === undefined && !('name' in props)) {
    			console.warn("<SidebarLeft> was created without expected prop 'name'");
    		}

    		if (/*title*/ ctx[1] === undefined && !('title' in props)) {
    			console.warn("<SidebarLeft> was created without expected prop 'title'");
    		}

    		if (/*photo*/ ctx[2] === undefined && !('photo' in props)) {
    			console.warn("<SidebarLeft> was created without expected prop 'photo'");
    		}

    		if (/*last_name*/ ctx[3] === undefined && !('last_name' in props)) {
    			console.warn("<SidebarLeft> was created without expected prop 'last_name'");
    		}

    		if (/*urlAPI*/ ctx[4] === undefined && !('urlAPI' in props)) {
    			console.warn("<SidebarLeft> was created without expected prop 'urlAPI'");
    		}
    	}

    	get name() {
    		throw new Error("<SidebarLeft>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<SidebarLeft>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<SidebarLeft>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<SidebarLeft>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get photo() {
    		throw new Error("<SidebarLeft>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set photo(value) {
    		throw new Error("<SidebarLeft>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get last_name() {
    		throw new Error("<SidebarLeft>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set last_name(value) {
    		throw new Error("<SidebarLeft>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlAPI() {
    		throw new Error("<SidebarLeft>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error("<SidebarLeft>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/post/NavPost.svelte generated by Svelte v3.46.4 */

    const file$v = "src/components/post/NavPost.svelte";

    function create_fragment$v(ctx) {
    	let div4;
    	let div0;
    	let label;
    	let i0;
    	let t0;
    	let span0;
    	let t2;
    	let input;
    	let t3;
    	let div1;
    	let i1;
    	let t4;
    	let span1;
    	let t6;
    	let div2;
    	let i2;
    	let t7;
    	let span2;
    	let t9;
    	let div3;
    	let i3;
    	let t10;
    	let span3;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div0 = element("div");
    			label = element("label");
    			i0 = element("i");
    			t0 = space();
    			span0 = element("span");
    			span0.textContent = "Photo";
    			t2 = space();
    			input = element("input");
    			t3 = space();
    			div1 = element("div");
    			i1 = element("i");
    			t4 = space();
    			span1 = element("span");
    			span1.textContent = "Video";
    			t6 = space();
    			div2 = element("div");
    			i2 = element("i");
    			t7 = space();
    			span2 = element("span");
    			span2.textContent = "Event";
    			t9 = space();
    			div3 = element("div");
    			i3 = element("i");
    			t10 = space();
    			span3 = element("span");
    			span3.textContent = "Write article";
    			attr_dev(i0, "class", "fas fa-image svelte-1x5l75b");
    			add_location(i0, file$v, 45, 6, 923);
    			attr_dev(span0, "class", "svelte-1x5l75b");
    			add_location(span0, file$v, 46, 6, 958);
    			attr_dev(input, "type", "file");
    			attr_dev(input, "name", "loadPhotoInput");
    			attr_dev(input, "id", "loadPhotoInput");
    			attr_dev(input, "class", "d-none");
    			attr_dev(input, "accept", ".png, .jpg, .jpeg, .gif");
    			add_location(input, file$v, 47, 6, 983);
    			attr_dev(label, "for", "loadPhotoInput");
    			attr_dev(label, "class", "svelte-1x5l75b");
    			add_location(label, file$v, 44, 4, 888);
    			attr_dev(div0, "class", "Header-nav Header-nav-image mx-3 svelte-1x5l75b");
    			attr_dev(div0, "id", "loadPhotoPost");
    			attr_dev(div0, "type", "file");
    			add_location(div0, file$v, 43, 2, 806);
    			attr_dev(i1, "class", "fas fa-film svelte-1x5l75b");
    			add_location(i1, file$v, 52, 6, 1228);
    			attr_dev(span1, "class", "svelte-1x5l75b");
    			add_location(span1, file$v, 53, 6, 1262);
    			attr_dev(div1, "class", "Header-nav Header-nav-film mx-3 disabled svelte-1x5l75b");
    			add_location(div1, file$v, 50, 2, 1141);
    			attr_dev(i2, "class", "fas fa-calendar svelte-1x5l75b");
    			add_location(i2, file$v, 58, 6, 1401);
    			attr_dev(span2, "class", "svelte-1x5l75b");
    			add_location(span2, file$v, 59, 6, 1439);
    			attr_dev(div2, "class", "Header-nav Header-nav-calendar mx-3 disabled svelte-1x5l75b");
    			add_location(div2, file$v, 56, 2, 1310);
    			attr_dev(i3, "class", "fas fa-file-alt svelte-1x5l75b");
    			add_location(i3, file$v, 64, 6, 1585);
    			attr_dev(span3, "class", "svelte-1x5l75b");
    			add_location(span3, file$v, 65, 6, 1623);
    			attr_dev(div3, "class", "Header-nav Header-nav-file-alt mx-3 hidden disabled svelte-1x5l75b");
    			add_location(div3, file$v, 62, 2, 1487);
    			attr_dev(div4, "class", "Nav-add-post d-flex justify-content-center");
    			add_location(div4, file$v, 42, 0, 747);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div0);
    			append_dev(div0, label);
    			append_dev(label, i0);
    			append_dev(label, t0);
    			append_dev(label, span0);
    			append_dev(label, t2);
    			append_dev(label, input);
    			append_dev(div4, t3);
    			append_dev(div4, div1);
    			append_dev(div1, i1);
    			append_dev(div1, t4);
    			append_dev(div1, span1);
    			append_dev(div4, t6);
    			append_dev(div4, div2);
    			append_dev(div2, i2);
    			append_dev(div2, t7);
    			append_dev(div2, span2);
    			append_dev(div4, t9);
    			append_dev(div4, div3);
    			append_dev(div3, i3);
    			append_dev(div3, t10);
    			append_dev(div3, span3);

    			if (!mounted) {
    				dispose = listen_dev(input, "change", /*showPostImg*/ ctx[0], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$v.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$v($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NavPost', slots, []);

    	const showPostImg = () => {
    		const render = new FileReader();
    		render.readAsDataURL(loadPhotoInput.files[0]);

    		render.onloadend = () => {
    			postImg.classList.remove('d-none');
    			postImg.src = render.result;
    			ableBtn();
    		};
    	};

    	const ableBtn = () => {
    		const btnsendPost = document.getElementById('btnSendPost');
    		btnsendPost.removeAttribute('disabled');
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NavPost> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ showPostImg, ableBtn });
    	return [showPostImg];
    }

    class NavPost extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$v, create_fragment$v, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NavPost",
    			options,
    			id: create_fragment$v.name
    		});
    	}
    }

    /* src/components/post/AddPost.svelte generated by Svelte v3.46.4 */
    const file$u = "src/components/post/AddPost.svelte";

    function create_fragment$u(ctx) {
    	let div2;
    	let div1;
    	let textarea;
    	let t0;
    	let div0;
    	let t1;
    	let t2;
    	let t3;
    	let img;
    	let t4;
    	let navpost;
    	let t5;
    	let button;
    	let current;
    	let mounted;
    	let dispose;
    	navpost = new NavPost({ $$inline: true });

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			textarea = element("textarea");
    			t0 = space();
    			div0 = element("div");
    			t1 = text(/*characterCount*/ ctx[0]);
    			t2 = text("/255");
    			t3 = space();
    			img = element("img");
    			t4 = space();
    			create_component(navpost.$$.fragment);
    			t5 = space();
    			button = element("button");
    			button.textContent = "Post";
    			attr_dev(textarea, "name", "");
    			attr_dev(textarea, "cols", "");
    			attr_dev(textarea, "rows", "1");
    			attr_dev(textarea, "id", "postDescription");
    			attr_dev(textarea, "class", "Default-containers svelte-1oryodd");
    			attr_dev(textarea, "placeholder", "Start a post...");
    			add_location(textarea, file$u, 117, 4, 2940);
    			attr_dev(div0, "id", "characterCountSpan");
    			attr_dev(div0, "class", "characterCount characterCount-active svelte-1oryodd");
    			add_location(div0, file$u, 118, 4, 3099);
    			attr_dev(img, "alt", "postImg");
    			attr_dev(img, "id", "postImg");
    			attr_dev(img, "class", "d-none mb-3");
    			add_location(img, file$u, 121, 4, 3216);
    			attr_dev(div1, "class", "Add-post-input mx-3 d-flex flex-column justify-content-center position-relative");
    			add_location(div1, file$u, 116, 2, 2842);
    			attr_dev(button, "id", "btnSendPost");
    			attr_dev(button, "class", "btn btn-outline-primary btn-flylinkers btn-post mt-3 svelte-1oryodd");
    			button.disabled = true;
    			add_location(button, file$u, 126, 2, 3295);
    			attr_dev(div2, "class", "Add-post Default-containers px-lg-5 d-flex flex-column svelte-1oryodd");
    			add_location(div2, file$u, 114, 0, 2770);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, textarea);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, t1);
    			append_dev(div0, t2);
    			append_dev(div1, t3);
    			append_dev(div1, img);
    			append_dev(div2, t4);
    			mount_component(navpost, div2, null);
    			append_dev(div2, t5);
    			append_dev(div2, button);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(textarea, "keydown", /*validateInfoPost*/ ctx[1], false, false, false),
    					listen_dev(button, "click", /*sendPost*/ ctx[2], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*characterCount*/ 1) set_data_dev(t1, /*characterCount*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navpost.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navpost.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(navpost);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$u($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AddPost', slots, []);
    	let { id, urlAPI } = $$props;
    	let characterCount = 0;

    	const validateInfoPost = e => {
    		e.target.style.height = e.target.scrollHeight > e.target.clientHeight
    		? e.target.scrollHeight + "px"
    		: "60px";

    		// console.log(e.target.value.length);
    		$$invalidate(0, characterCount = e.target.value.length);

    		if (e.target.value.length <= 255) {
    			characterCountSpan.classList.add('characterCount-active');

    			if (e.key === 'Enter') {
    				e.target.rows++;
    			}

    			if (e.target.value !== '') {
    				btnSendPost.removeAttribute('disabled');
    			} else {
    				btnSendPost.setAttribute('disabled', '');

    				if (postImg.src) {
    					btnSendPost.removeAttribute('disabled');
    				}
    			}
    		} else {
    			btnSendPost.setAttribute('disabled', '');
    			characterCountSpan.classList.remove('characterCount-active');
    		}
    	};

    	const sendPost = async () => {
    		let imagePost = '';

    		if (!!postImg.src) {
    			// imagePost = postImg.src
    			const convertImageB64 = await fetch(`${urlAPI}/resources/img/`, {
    				method: 'POST',
    				headers: { 'Content-Type': 'application/json' },
    				body: JSON.stringify({ img: postImg.src })
    			});

    			const content = await convertImageB64.json();
    			imagePost = content.img;
    		}

    		if (postDescription.value !== '' && imagePost === '' || postDescription.value === '' && imagePost !== '' || postDescription.value !== '' && imagePost !== '') {
    			//   const dataPost = {
    			//     id : id,
    			//     description : postDescription.value,
    			//     img : imagePost
    			//   }
    			// console.log(dataPost);
    			const post = await fetch(`${urlAPI}/post/create/`, {
    				method: 'POST',
    				headers: { 'Content-Type': 'application/json' },
    				body: JSON.stringify({
    					user: id,
    					img: imagePost,
    					desc: postDescription.value
    				})
    			});

    			const content = await post.json();

    			if (content) {
    				postDescription.value = '';

    				if (postImg.src) {
    					postImg.setAttribute('src', '');
    					postImg.classList.toggle('d-none');
    				}
    			}
    		}
    	};

    	const writable_props = ['id', 'urlAPI'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AddPost> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(3, id = $$props.id);
    		if ('urlAPI' in $$props) $$invalidate(4, urlAPI = $$props.urlAPI);
    	};

    	$$self.$capture_state = () => ({
    		NavPost,
    		id,
    		urlAPI,
    		characterCount,
    		validateInfoPost,
    		sendPost
    	});

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(3, id = $$props.id);
    		if ('urlAPI' in $$props) $$invalidate(4, urlAPI = $$props.urlAPI);
    		if ('characterCount' in $$props) $$invalidate(0, characterCount = $$props.characterCount);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [characterCount, validateInfoPost, sendPost, id, urlAPI];
    }

    class AddPost extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$u, create_fragment$u, safe_not_equal, { id: 3, urlAPI: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AddPost",
    			options,
    			id: create_fragment$u.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[3] === undefined && !('id' in props)) {
    			console.warn("<AddPost> was created without expected prop 'id'");
    		}

    		if (/*urlAPI*/ ctx[4] === undefined && !('urlAPI' in props)) {
    			console.warn("<AddPost> was created without expected prop 'urlAPI'");
    		}
    	}

    	get id() {
    		throw new Error("<AddPost>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<AddPost>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlAPI() {
    		throw new Error("<AddPost>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error("<AddPost>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function startTime (create_time){
      let datePost;

      const postDate = new Date(create_time);
      const dateNow = new Date();
      const substractDate = (dateNow - postDate);

      const minute = 60_000;
      const hour = minute * 60;
      const days = hour * 24;
      const week = days * 7;
      const month = week * 4;
      const year = month * 12;

      let daysCount = (1 * substractDate)/ days;
      let timePost;

      // console.log(Math.round(daysCount));

      if (substractDate < hour) {
        timePost = (1 * substractDate)/ minute; 
        datePost = Math.floor(timePost) + 'Min';
        return datePost
      }
      if (daysCount < 1 && substractDate > hour){
        timePost = (1 * substractDate)/ hour; 
        datePost = Math.floor(timePost) + 'H';
        return datePost
      }
      if (daysCount >= 1 && daysCount < 7) {
        timePost = daysCount;
        datePost = Math.round(timePost) + ' D';
        return datePost
      }

      if (daysCount >= 7){
        timePost = (1 * substractDate)/ week; 
        datePost = Math.floor(timePost) + ' W';

        if (timePost >= 4) {
          timePost = (1 * substractDate)/ month; 
          datePost = Math.floor(timePost) + ' M';

          if (timePost >= 12) {
            timePost = (1 * substractDate)/ year; 
            datePost = Math.floor(timePost) + ' Year';
          }
        }
        return datePost
      }
      return datePost
    }

    /* src/components/post/Comment.svelte generated by Svelte v3.46.4 */
    const file$t = "src/components/post/Comment.svelte";

    function create_fragment$t(ctx) {
    	let div3;
    	let div2;
    	let div1;
    	let a0;
    	let img;
    	let img_src_value;
    	let a0_href_value;
    	let t0;
    	let span;
    	let div0;
    	let a1;
    	let p0;
    	let t1_value = /*comment*/ ctx[0].user.name + "";
    	let t1;
    	let t2;
    	let t3_value = /*comment*/ ctx[0].user.last_name + "";
    	let t3;
    	let a1_href_value;
    	let t4;
    	let p1;
    	let t5_value = startTime(/*comment*/ ctx[0].create_time) + "";
    	let t5;
    	let t6;
    	let t7_value = /*comment*/ ctx[0].comment + "";
    	let t7;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			a0 = element("a");
    			img = element("img");
    			t0 = space();
    			span = element("span");
    			div0 = element("div");
    			a1 = element("a");
    			p0 = element("p");
    			t1 = text(t1_value);
    			t2 = space();
    			t3 = text(t3_value);
    			t4 = space();
    			p1 = element("p");
    			t5 = text(t5_value);
    			t6 = space();
    			t7 = text(t7_value);
    			if (!src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[1] + /*comment*/ ctx[0].user.photo))) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			attr_dev(img, "class", "svelte-1c8dgly");
    			add_location(img, file$t, 52, 8, 1139);
    			attr_dev(a0, "href", a0_href_value = "/profile/" + /*comment*/ ctx[0].user.email);
    			attr_dev(a0, "class", "d-flex");
    			add_location(a0, file$t, 51, 6, 1055);
    			attr_dev(p0, "class", "User-comment svelte-1c8dgly");
    			add_location(p0, file$t, 57, 12, 1376);
    			attr_dev(a1, "href", a1_href_value = "/profile/" + /*comment*/ ctx[0].user.email);
    			attr_dev(a1, "class", "d-flex");
    			add_location(a1, file$t, 56, 10, 1288);
    			attr_dev(p1, "class", "startTime svelte-1c8dgly");
    			add_location(p1, file$t, 59, 10, 1474);
    			attr_dev(div0, "class", "userInfo mb-1 d-flex justify-content-between svelte-1c8dgly");
    			add_location(div0, file$t, 55, 8, 1219);
    			attr_dev(span, "class", "svelte-1c8dgly");
    			add_location(span, file$t, 54, 6, 1204);
    			attr_dev(div1, "class", "Comments-users svelte-1c8dgly");
    			add_location(div1, file$t, 50, 4, 1020);
    			attr_dev(div2, "class", "Comments-content");
    			add_location(div2, file$t, 49, 2, 985);
    			attr_dev(div3, "class", "Comments svelte-1c8dgly");
    			add_location(div3, file$t, 48, 0, 960);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			append_dev(div1, a0);
    			append_dev(a0, img);
    			append_dev(div1, t0);
    			append_dev(div1, span);
    			append_dev(span, div0);
    			append_dev(div0, a1);
    			append_dev(a1, p0);
    			append_dev(p0, t1);
    			append_dev(p0, t2);
    			append_dev(p0, t3);
    			append_dev(div0, t4);
    			append_dev(div0, p1);
    			append_dev(p1, t5);
    			append_dev(span, t6);
    			append_dev(span, t7);

    			if (!mounted) {
    				dispose = [
    					action_destroyer(link.call(null, a0)),
    					action_destroyer(active.call(null, a0)),
    					action_destroyer(link.call(null, a1)),
    					action_destroyer(active.call(null, a1))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*urlAPI, comment*/ 3 && !src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[1] + /*comment*/ ctx[0].user.photo))) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*comment*/ 1 && a0_href_value !== (a0_href_value = "/profile/" + /*comment*/ ctx[0].user.email)) {
    				attr_dev(a0, "href", a0_href_value);
    			}

    			if (dirty & /*comment*/ 1 && t1_value !== (t1_value = /*comment*/ ctx[0].user.name + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*comment*/ 1 && t3_value !== (t3_value = /*comment*/ ctx[0].user.last_name + "")) set_data_dev(t3, t3_value);

    			if (dirty & /*comment*/ 1 && a1_href_value !== (a1_href_value = "/profile/" + /*comment*/ ctx[0].user.email)) {
    				attr_dev(a1, "href", a1_href_value);
    			}

    			if (dirty & /*comment*/ 1 && t5_value !== (t5_value = startTime(/*comment*/ ctx[0].create_time) + "")) set_data_dev(t5, t5_value);
    			if (dirty & /*comment*/ 1 && t7_value !== (t7_value = /*comment*/ ctx[0].comment + "")) set_data_dev(t7, t7_value);
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$t($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Comment', slots, []);
    	let { comment, urlAPI } = $$props;
    	const writable_props = ['comment', 'urlAPI'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Comment> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('comment' in $$props) $$invalidate(0, comment = $$props.comment);
    		if ('urlAPI' in $$props) $$invalidate(1, urlAPI = $$props.urlAPI);
    	};

    	$$self.$capture_state = () => ({
    		link,
    		active,
    		UserPhoto,
    		startTime,
    		comment,
    		urlAPI
    	});

    	$$self.$inject_state = $$props => {
    		if ('comment' in $$props) $$invalidate(0, comment = $$props.comment);
    		if ('urlAPI' in $$props) $$invalidate(1, urlAPI = $$props.urlAPI);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [comment, urlAPI];
    }

    class Comment extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$t, create_fragment$t, safe_not_equal, { comment: 0, urlAPI: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Comment",
    			options,
    			id: create_fragment$t.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*comment*/ ctx[0] === undefined && !('comment' in props)) {
    			console.warn("<Comment> was created without expected prop 'comment'");
    		}

    		if (/*urlAPI*/ ctx[1] === undefined && !('urlAPI' in props)) {
    			console.warn("<Comment> was created without expected prop 'urlAPI'");
    		}
    	}

    	get comment() {
    		throw new Error("<Comment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set comment(value) {
    		throw new Error("<Comment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlAPI() {
    		throw new Error("<Comment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error("<Comment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/post/Post.svelte generated by Svelte v3.46.4 */
    const file$s = "src/components/post/Post.svelte";

    function get_each_context$c(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[31] = list[i];
    	return child_ctx;
    }

    // (490:8) {:else}
    function create_else_block$b(ctx) {
    	let div;
    	let img_1;
    	let img_1_src_value;
    	let t0;
    	let h2;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let span0;
    	let t5;
    	let t6;
    	let span1;
    	let t7_value = startTime(/*create_time*/ ctx[9]) + "";
    	let t7;

    	const block = {
    		c: function create() {
    			div = element("div");
    			img_1 = element("img");
    			t0 = space();
    			h2 = element("h2");
    			t1 = text(/*name*/ ctx[3]);
    			t2 = space();
    			t3 = text(/*last_name*/ ctx[4]);
    			t4 = space();
    			span0 = element("span");
    			t5 = text(/*title*/ ctx[5]);
    			t6 = space();
    			span1 = element("span");
    			t7 = text(t7_value);
    			if (!src_url_equal(img_1.src, img_1_src_value = "" + (/*urlAPI*/ ctx[11] + /*photo*/ ctx[6]))) attr_dev(img_1, "src", img_1_src_value);
    			attr_dev(img_1, "alt", "");
    			attr_dev(img_1, "class", "svelte-47ntgb");
    			add_location(img_1, file$s, 491, 12, 13158);
    			attr_dev(span0, "class", "svelte-47ntgb");
    			add_location(span0, file$s, 494, 14, 13257);
    			attr_dev(span1, "class", "svelte-47ntgb");
    			add_location(span1, file$s, 495, 14, 13292);
    			attr_dev(h2, "class", "svelte-47ntgb");
    			add_location(h2, file$s, 492, 12, 13205);
    			attr_dev(div, "class", "Card-user svelte-47ntgb");
    			add_location(div, file$s, 490, 10, 13122);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img_1);
    			append_dev(div, t0);
    			append_dev(div, h2);
    			append_dev(h2, t1);
    			append_dev(h2, t2);
    			append_dev(h2, t3);
    			append_dev(h2, t4);
    			append_dev(h2, span0);
    			append_dev(span0, t5);
    			append_dev(h2, t6);
    			append_dev(h2, span1);
    			append_dev(span1, t7);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*urlAPI, photo*/ 2112 && !src_url_equal(img_1.src, img_1_src_value = "" + (/*urlAPI*/ ctx[11] + /*photo*/ ctx[6]))) {
    				attr_dev(img_1, "src", img_1_src_value);
    			}

    			if (dirty[0] & /*name*/ 8) set_data_dev(t1, /*name*/ ctx[3]);
    			if (dirty[0] & /*last_name*/ 16) set_data_dev(t3, /*last_name*/ ctx[4]);
    			if (dirty[0] & /*title*/ 32) set_data_dev(t5, /*title*/ ctx[5]);
    			if (dirty[0] & /*create_time*/ 512 && t7_value !== (t7_value = startTime(/*create_time*/ ctx[9]) + "")) set_data_dev(t7, t7_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$b.name,
    		type: "else",
    		source: "(490:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (479:8) {#if user}
    function create_if_block_2$5(ctx) {
    	let div;
    	let a;
    	let img_1;
    	let img_1_src_value;
    	let t0;
    	let h2;
    	let t1_value = /*user*/ ctx[2].name + "";
    	let t1;
    	let t2;
    	let t3_value = /*user*/ ctx[2].last_name + "";
    	let t3;
    	let t4;
    	let span0;
    	let t5_value = /*user*/ ctx[2].title + "";
    	let t5;
    	let t6;
    	let span1;
    	let t7_value = startTime(/*create_time*/ ctx[9]) + "";
    	let t7;
    	let a_href_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			a = element("a");
    			img_1 = element("img");
    			t0 = space();
    			h2 = element("h2");
    			t1 = text(t1_value);
    			t2 = space();
    			t3 = text(t3_value);
    			t4 = space();
    			span0 = element("span");
    			t5 = text(t5_value);
    			t6 = space();
    			span1 = element("span");
    			t7 = text(t7_value);
    			if (!src_url_equal(img_1.src, img_1_src_value = "" + (/*urlAPI*/ ctx[11] + /*user*/ ctx[2].photo))) attr_dev(img_1, "src", img_1_src_value);
    			attr_dev(img_1, "alt", "");
    			attr_dev(img_1, "class", "svelte-47ntgb");
    			add_location(img_1, file$s, 481, 14, 12842);
    			attr_dev(span0, "class", "svelte-47ntgb");
    			add_location(span0, file$s, 484, 16, 12962);
    			attr_dev(span1, "class", "svelte-47ntgb");
    			add_location(span1, file$s, 485, 16, 13004);
    			attr_dev(h2, "class", "svelte-47ntgb");
    			add_location(h2, file$s, 482, 14, 12896);
    			attr_dev(a, "href", a_href_value = "/profile/" + /*user*/ ctx[2].email);
    			attr_dev(a, "class", "d-flex");
    			add_location(a, file$s, 480, 12, 12760);
    			attr_dev(div, "class", "Card-user svelte-47ntgb");
    			add_location(div, file$s, 479, 10, 12700);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, a);
    			append_dev(a, img_1);
    			append_dev(a, t0);
    			append_dev(a, h2);
    			append_dev(h2, t1);
    			append_dev(h2, t2);
    			append_dev(h2, t3);
    			append_dev(h2, t4);
    			append_dev(h2, span0);
    			append_dev(span0, t5);
    			append_dev(h2, t6);
    			append_dev(h2, span1);
    			append_dev(span1, t7);

    			if (!mounted) {
    				dispose = [
    					action_destroyer(link.call(null, a)),
    					action_destroyer(active.call(null, a)),
    					listen_dev(div, "click", /*visitProfile*/ ctx[13], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*urlAPI, user*/ 2052 && !src_url_equal(img_1.src, img_1_src_value = "" + (/*urlAPI*/ ctx[11] + /*user*/ ctx[2].photo))) {
    				attr_dev(img_1, "src", img_1_src_value);
    			}

    			if (dirty[0] & /*user*/ 4 && t1_value !== (t1_value = /*user*/ ctx[2].name + "")) set_data_dev(t1, t1_value);
    			if (dirty[0] & /*user*/ 4 && t3_value !== (t3_value = /*user*/ ctx[2].last_name + "")) set_data_dev(t3, t3_value);
    			if (dirty[0] & /*user*/ 4 && t5_value !== (t5_value = /*user*/ ctx[2].title + "")) set_data_dev(t5, t5_value);
    			if (dirty[0] & /*create_time*/ 512 && t7_value !== (t7_value = startTime(/*create_time*/ ctx[9]) + "")) set_data_dev(t7, t7_value);

    			if (dirty[0] & /*user*/ 4 && a_href_value !== (a_href_value = "/profile/" + /*user*/ ctx[2].email)) {
    				attr_dev(a, "href", a_href_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$5.name,
    		type: "if",
    		source: "(479:8) {#if user}",
    		ctx
    	});

    	return block;
    }

    // (513:8) {#if !!img}
    function create_if_block_1$8(ctx) {
    	let img_1;
    	let img_1_src_value;

    	const block = {
    		c: function create() {
    			img_1 = element("img");
    			if (!src_url_equal(img_1.src, img_1_src_value = "" + (/*urlAPI*/ ctx[11] + /*img*/ ctx[8]))) attr_dev(img_1, "src", img_1_src_value);
    			attr_dev(img_1, "alt", "img post");
    			attr_dev(img_1, "class", "svelte-47ntgb");
    			add_location(img_1, file$s, 513, 11, 13675);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*urlAPI, img*/ 2304 && !src_url_equal(img_1.src, img_1_src_value = "" + (/*urlAPI*/ ctx[11] + /*img*/ ctx[8]))) {
    				attr_dev(img_1, "src", img_1_src_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$8.name,
    		type: "if",
    		source: "(513:8) {#if !!img}",
    		ctx
    	});

    	return block;
    }

    // (571:6) {#if dataComment}
    function create_if_block$h(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*dataComment*/ ctx[12];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$c(get_each_context$c(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*dataComment, urlAPI*/ 6144) {
    				each_value = /*dataComment*/ ctx[12];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$c(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$c(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$h.name,
    		type: "if",
    		source: "(571:6) {#if dataComment}",
    		ctx
    	});

    	return block;
    }

    // (572:8) {#each dataComment as comment}
    function create_each_block$c(ctx) {
    	let comment;
    	let current;

    	comment = new Comment({
    			props: {
    				comment: /*comment*/ ctx[31],
    				urlAPI: /*urlAPI*/ ctx[11]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(comment.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(comment, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const comment_changes = {};
    			if (dirty[0] & /*dataComment*/ 4096) comment_changes.comment = /*comment*/ ctx[31];
    			if (dirty[0] & /*urlAPI*/ 2048) comment_changes.urlAPI = /*urlAPI*/ ctx[11];
    			comment.$set(comment_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(comment.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(comment.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(comment, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$c.name,
    		type: "each",
    		source: "(572:8) {#each dataComment as comment}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$s(ctx) {
    	let div17;
    	let div3;
    	let div1;
    	let t0;
    	let div0;
    	let i0;
    	let t1;
    	let div2;
    	let span0;
    	let t2;
    	let t3;
    	let div4;
    	let figure;
    	let t4;
    	let div9;
    	let div8;
    	let div5;
    	let i1;
    	let t5;
    	let span1;
    	let t6_value = /*reactions*/ ctx[0].like + "";
    	let t6;
    	let t7;
    	let div6;
    	let i2;
    	let t8;
    	let span2;
    	let t9_value = /*reactions*/ ctx[0].love + "";
    	let t9;
    	let t10;
    	let div7;
    	let i3;
    	let t11;
    	let span4;
    	let span3;
    	let t12;
    	let t13;
    	let t14;
    	let div14;
    	let div13;
    	let button0;
    	let i4;
    	let i4_id_value;
    	let t15;
    	let span5;
    	let button0_id_value;
    	let t17;
    	let button1;
    	let i5;
    	let i5_id_value;
    	let t18;
    	let span6;
    	let button1_id_value;
    	let t20;
    	let div10;
    	let i6;
    	let t21;
    	let span7;
    	let t23;
    	let div11;
    	let i7;
    	let t24;
    	let span8;
    	let t26;
    	let div12;
    	let i8;
    	let t27;
    	let span9;
    	let t29;
    	let div16;
    	let div15;
    	let img_1;
    	let img_1_src_value;
    	let t30;
    	let form;
    	let input;
    	let input_id_value;
    	let t31;
    	let button2;
    	let t32;
    	let button2_id_value;
    	let t33;
    	let div16_id_value;
    	let current;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*user*/ ctx[2]) return create_if_block_2$5;
    		return create_else_block$b;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);
    	let if_block1 = !!/*img*/ ctx[8] && create_if_block_1$8(ctx);
    	let if_block2 = /*dataComment*/ ctx[12] && create_if_block$h(ctx);

    	const block = {
    		c: function create() {
    			div17 = element("div");
    			div3 = element("div");
    			div1 = element("div");
    			if_block0.c();
    			t0 = space();
    			div0 = element("div");
    			i0 = element("i");
    			t1 = space();
    			div2 = element("div");
    			span0 = element("span");
    			t2 = text(/*desc*/ ctx[7]);
    			t3 = space();
    			div4 = element("div");
    			figure = element("figure");
    			if (if_block1) if_block1.c();
    			t4 = space();
    			div9 = element("div");
    			div8 = element("div");
    			div5 = element("div");
    			i1 = element("i");
    			t5 = space();
    			span1 = element("span");
    			t6 = text(t6_value);
    			t7 = space();
    			div6 = element("div");
    			i2 = element("i");
    			t8 = space();
    			span2 = element("span");
    			t9 = text(t9_value);
    			t10 = space();
    			div7 = element("div");
    			i3 = element("i");
    			t11 = space();
    			span4 = element("span");
    			span3 = element("span");
    			t12 = text(/*comments*/ ctx[1]);
    			t13 = text(" Comments");
    			t14 = space();
    			div14 = element("div");
    			div13 = element("div");
    			button0 = element("button");
    			i4 = element("i");
    			t15 = space();
    			span5 = element("span");
    			span5.textContent = "Like";
    			t17 = space();
    			button1 = element("button");
    			i5 = element("i");
    			t18 = space();
    			span6 = element("span");
    			span6.textContent = "love";
    			t20 = space();
    			div10 = element("div");
    			i6 = element("i");
    			t21 = space();
    			span7 = element("span");
    			span7.textContent = "Comment";
    			t23 = space();
    			div11 = element("div");
    			i7 = element("i");
    			t24 = space();
    			span8 = element("span");
    			span8.textContent = "Share";
    			t26 = space();
    			div12 = element("div");
    			i8 = element("i");
    			t27 = space();
    			span9 = element("span");
    			span9.textContent = "Send";
    			t29 = space();
    			div16 = element("div");
    			div15 = element("div");
    			img_1 = element("img");
    			t30 = space();
    			form = element("form");
    			input = element("input");
    			t31 = space();
    			button2 = element("button");
    			t32 = text("Post");
    			t33 = space();
    			if (if_block2) if_block2.c();
    			attr_dev(i0, "class", "fas fa-ellipsis-h svelte-47ntgb");
    			add_location(i0, file$s, 501, 8, 13428);
    			attr_dev(div0, "class", "Card-settings svelte-47ntgb");
    			add_location(div0, file$s, 500, 6, 13392);
    			attr_dev(div1, "class", "Card-Header px-3 px-md-0 svelte-47ntgb");
    			add_location(div1, file$s, 476, 4, 12631);
    			attr_dev(span0, "class", "mx-0 svelte-47ntgb");
    			add_location(span0, file$s, 506, 6, 13541);
    			attr_dev(div2, "class", "Card-description mx-3 mx-md-0 svelte-47ntgb");
    			add_location(div2, file$s, 505, 4, 13491);
    			attr_dev(div3, "class", "Card-container");
    			add_location(div3, file$s, 475, 2, 12598);
    			attr_dev(figure, "class", "svelte-47ntgb");
    			add_location(figure, file$s, 511, 6, 13635);
    			attr_dev(div4, "class", "Card-photo px-0 svelte-47ntgb");
    			add_location(div4, file$s, 510, 4, 13599);
    			attr_dev(i1, "class", "fas fa-thumbs-up");
    			add_location(i1, file$s, 521, 12, 13920);
    			attr_dev(span1, "id", /*likeValue*/ ctx[14]);
    			attr_dev(span1, "class", "svelte-47ntgb");
    			add_location(span1, file$s, 522, 12, 13965);
    			attr_dev(div5, "class", "Reaction Header-nav-like mx-2 svelte-47ntgb");
    			add_location(div5, file$s, 520, 8, 13864);
    			attr_dev(i2, "class", "fas fa-heart");
    			add_location(i2, file$s, 525, 10, 14088);
    			attr_dev(span2, "id", /*loveValue*/ ctx[15]);
    			attr_dev(span2, "class", "svelte-47ntgb");
    			add_location(span2, file$s, 526, 10, 14127);
    			attr_dev(div6, "class", "Reaction Header-nav-heart mx-2 svelte-47ntgb");
    			add_location(div6, file$s, 524, 8, 14033);
    			attr_dev(i3, "class", "fas fa-comment");
    			add_location(i3, file$s, 529, 10, 14252);
    			attr_dev(span3, "class", "svelte-47ntgb");
    			add_location(span3, file$s, 531, 12, 14336);
    			attr_dev(span4, "class", "svelte-47ntgb");
    			add_location(span4, file$s, 530, 10, 14293);
    			attr_dev(div7, "class", "Reaction Header-nav-comment mx-2 svelte-47ntgb");
    			add_location(div7, file$s, 528, 8, 14195);
    			attr_dev(div8, "class", "Card-board-icons-first d-flex px-3 px-md-0");
    			add_location(div8, file$s, 519, 6, 13799);
    			attr_dev(div9, "class", "Card-board-icons svelte-47ntgb");
    			add_location(div9, file$s, 518, 4, 13762);
    			attr_dev(i4, "id", i4_id_value = "btnLike" + /*id*/ ctx[10]);
    			attr_dev(i4, "class", "fa-thumbs-up far");
    			add_location(i4, file$s, 539, 10, 14661);
    			attr_dev(span5, "class", "svelte-47ntgb");
    			add_location(span5, file$s, 540, 10, 14721);
    			attr_dev(button0, "id", button0_id_value = "btnReactionLike" + /*id*/ ctx[10]);
    			attr_dev(button0, "class", "Action Header-nav-thumbs-up svelte-47ntgb");
    			add_location(button0, file$s, 538, 8, 14555);
    			attr_dev(i5, "id", i5_id_value = "btnLove" + /*id*/ ctx[10]);
    			attr_dev(i5, "class", "fa-heart far");
    			add_location(i5, file$s, 543, 10, 14867);
    			attr_dev(span6, "class", "svelte-47ntgb");
    			add_location(span6, file$s, 544, 10, 14922);
    			attr_dev(button1, "id", button1_id_value = "btnReactionLove" + /*id*/ ctx[10]);
    			attr_dev(button1, "class", "Action Header-nav-heart svelte-47ntgb");
    			add_location(button1, file$s, 542, 8, 14765);
    			attr_dev(i6, "class", "fa-comments far");
    			add_location(i6, file$s, 547, 10, 15041);
    			attr_dev(span7, "class", "svelte-47ntgb");
    			add_location(span7, file$s, 548, 10, 15083);
    			attr_dev(div10, "class", "Action Header-nav-comments svelte-47ntgb");
    			add_location(div10, file$s, 546, 8, 14966);
    			attr_dev(i7, "class", "fas fa-share");
    			add_location(i7, file$s, 551, 10, 15191);
    			attr_dev(span8, "class", "svelte-47ntgb");
    			add_location(span8, file$s, 552, 10, 15230);
    			attr_dev(div11, "class", "Action Header-nav-share hidden disabled svelte-47ntgb");
    			add_location(div11, file$s, 550, 8, 15127);
    			attr_dev(i8, "class", "fas fa-paper-plane");
    			add_location(i8, file$s, 555, 10, 15342);
    			attr_dev(span9, "class", "svelte-47ntgb");
    			add_location(span9, file$s, 556, 10, 15387);
    			attr_dev(div12, "class", "Action Header-nav-paper-plane hidden disabled svelte-47ntgb");
    			add_location(div12, file$s, 554, 8, 15272);
    			attr_dev(div13, "class", "Card-board-actions d-flex justify-content-center justify-content-md-start svelte-47ntgb");
    			add_location(div13, file$s, 537, 6, 14459);
    			attr_dev(div14, "class", "Card-board-actions svelte-47ntgb");
    			add_location(div14, file$s, 536, 4, 14420);
    			if (!src_url_equal(img_1.src, img_1_src_value = "" + (/*urlAPI*/ ctx[11] + localStorage.getItem('profilePhoto')))) attr_dev(img_1, "src", img_1_src_value);
    			attr_dev(img_1, "alt", "img");
    			attr_dev(img_1, "class", "svelte-47ntgb");
    			add_location(img_1, file$s, 563, 8, 15573);
    			attr_dev(input, "id", input_id_value = "inputAddComment" + /*id*/ ctx[10]);
    			attr_dev(input, "type", "text");
    			attr_dev(input, "class", "Comments-input svelte-47ntgb");
    			attr_dev(input, "placeholder", "Write a comment...");
    			add_location(input, file$s, 565, 10, 15667);
    			attr_dev(button2, "id", button2_id_value = "btn-sendComment" + /*id*/ ctx[10]);
    			attr_dev(button2, "class", "btn-sendComment svelte-47ntgb");
    			button2.disabled = true;
    			add_location(button2, file$s, 566, 10, 15802);
    			attr_dev(form, "class", "svelte-47ntgb");
    			add_location(form, file$s, 564, 8, 15650);
    			attr_dev(div15, "class", "Comments-add d-flex justify-content-between svelte-47ntgb");
    			add_location(div15, file$s, 562, 6, 15507);
    			attr_dev(div16, "id", div16_id_value = "comment" + /*id*/ ctx[10]);
    			attr_dev(div16, "class", "comments mt-3 d-none");
    			add_location(div16, file$s, 561, 4, 15449);
    			attr_dev(div17, "class", "Card Default-containers");
    			add_location(div17, file$s, 472, 0, 12556);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div17, anchor);
    			append_dev(div17, div3);
    			append_dev(div3, div1);
    			if_block0.m(div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, i0);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			append_dev(div2, span0);
    			append_dev(span0, t2);
    			append_dev(div17, t3);
    			append_dev(div17, div4);
    			append_dev(div4, figure);
    			if (if_block1) if_block1.m(figure, null);
    			append_dev(div17, t4);
    			append_dev(div17, div9);
    			append_dev(div9, div8);
    			append_dev(div8, div5);
    			append_dev(div5, i1);
    			append_dev(div5, t5);
    			append_dev(div5, span1);
    			append_dev(span1, t6);
    			append_dev(div8, t7);
    			append_dev(div8, div6);
    			append_dev(div6, i2);
    			append_dev(div6, t8);
    			append_dev(div6, span2);
    			append_dev(span2, t9);
    			append_dev(div8, t10);
    			append_dev(div8, div7);
    			append_dev(div7, i3);
    			append_dev(div7, t11);
    			append_dev(div7, span4);
    			append_dev(span4, span3);
    			append_dev(span3, t12);
    			append_dev(span4, t13);
    			append_dev(div17, t14);
    			append_dev(div17, div14);
    			append_dev(div14, div13);
    			append_dev(div13, button0);
    			append_dev(button0, i4);
    			append_dev(button0, t15);
    			append_dev(button0, span5);
    			append_dev(div13, t17);
    			append_dev(div13, button1);
    			append_dev(button1, i5);
    			append_dev(button1, t18);
    			append_dev(button1, span6);
    			append_dev(div13, t20);
    			append_dev(div13, div10);
    			append_dev(div10, i6);
    			append_dev(div10, t21);
    			append_dev(div10, span7);
    			append_dev(div13, t23);
    			append_dev(div13, div11);
    			append_dev(div11, i7);
    			append_dev(div11, t24);
    			append_dev(div11, span8);
    			append_dev(div13, t26);
    			append_dev(div13, div12);
    			append_dev(div12, i8);
    			append_dev(div12, t27);
    			append_dev(div12, span9);
    			append_dev(div17, t29);
    			append_dev(div17, div16);
    			append_dev(div16, div15);
    			append_dev(div15, img_1);
    			append_dev(div15, t30);
    			append_dev(div15, form);
    			append_dev(form, input);
    			append_dev(form, t31);
    			append_dev(form, button2);
    			append_dev(button2, t32);
    			append_dev(div16, t33);
    			if (if_block2) if_block2.m(div16, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(span4, "click", /*showComments*/ ctx[17], false, false, false),
    					listen_dev(button0, "click", /*changeReaction*/ ctx[16], false, false, false),
    					listen_dev(button1, "click", /*changeReaction*/ ctx[16], false, false, false),
    					listen_dev(div10, "click", /*showComments*/ ctx[17], false, false, false),
    					listen_dev(input, "keyup", /*commentAbled*/ ctx[18], false, false, false),
    					listen_dev(button2, "click", /*addComment*/ ctx[19], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div1, t0);
    				}
    			}

    			if (!current || dirty[0] & /*desc*/ 128) set_data_dev(t2, /*desc*/ ctx[7]);

    			if (!!/*img*/ ctx[8]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$8(ctx);
    					if_block1.c();
    					if_block1.m(figure, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if ((!current || dirty[0] & /*reactions*/ 1) && t6_value !== (t6_value = /*reactions*/ ctx[0].like + "")) set_data_dev(t6, t6_value);
    			if ((!current || dirty[0] & /*reactions*/ 1) && t9_value !== (t9_value = /*reactions*/ ctx[0].love + "")) set_data_dev(t9, t9_value);
    			if (!current || dirty[0] & /*comments*/ 2) set_data_dev(t12, /*comments*/ ctx[1]);

    			if (!current || dirty[0] & /*id*/ 1024 && i4_id_value !== (i4_id_value = "btnLike" + /*id*/ ctx[10])) {
    				attr_dev(i4, "id", i4_id_value);
    			}

    			if (!current || dirty[0] & /*id*/ 1024 && button0_id_value !== (button0_id_value = "btnReactionLike" + /*id*/ ctx[10])) {
    				attr_dev(button0, "id", button0_id_value);
    			}

    			if (!current || dirty[0] & /*id*/ 1024 && i5_id_value !== (i5_id_value = "btnLove" + /*id*/ ctx[10])) {
    				attr_dev(i5, "id", i5_id_value);
    			}

    			if (!current || dirty[0] & /*id*/ 1024 && button1_id_value !== (button1_id_value = "btnReactionLove" + /*id*/ ctx[10])) {
    				attr_dev(button1, "id", button1_id_value);
    			}

    			if (!current || dirty[0] & /*urlAPI*/ 2048 && !src_url_equal(img_1.src, img_1_src_value = "" + (/*urlAPI*/ ctx[11] + localStorage.getItem('profilePhoto')))) {
    				attr_dev(img_1, "src", img_1_src_value);
    			}

    			if (!current || dirty[0] & /*id*/ 1024 && input_id_value !== (input_id_value = "inputAddComment" + /*id*/ ctx[10])) {
    				attr_dev(input, "id", input_id_value);
    			}

    			if (!current || dirty[0] & /*id*/ 1024 && button2_id_value !== (button2_id_value = "btn-sendComment" + /*id*/ ctx[10])) {
    				attr_dev(button2, "id", button2_id_value);
    			}

    			if (/*dataComment*/ ctx[12]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*dataComment*/ 4096) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block$h(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div16, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty[0] & /*id*/ 1024 && div16_id_value !== (div16_id_value = "comment" + /*id*/ ctx[10])) {
    				attr_dev(div16, "id", div16_id_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div17);
    			if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$s($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Post', slots, []);
    	let { userId } = $$props;
    	let { desc, reactions, img, comments, create_time, user, id, user_id, update_time } = $$props;
    	let { name, middle_name, last_name, title, photo, email } = $$props;
    	let { userMain, urlAPI } = $$props;
    	let userLink;

    	if (userId === undefined) {
    		userId = userMain;
    	}

    	if (userMain === undefined) {
    		userMain = userId;
    	}

    	if (user) {
    		(name = '', middle_name = '', last_name = '', title = '', photo = '', email = '', update_time = '', user_id = '', userLink = user.email);
    	} else {
    		user = '';
    		userLink = email;
    	}

    	const viewUserProfile = () => {
    		if (user) {
    			const userEmail = user.email;
    			window.location.pathname = `profile/${userEmail}`;
    		}
    	};

    	const visitProfile = () => {
    		localStorage.setItem('visitProfile', user.email);
    	};

    	const likeValue = `likeValue${id}`;
    	const loveValue = `loveValue${id}`;
    	let reactionsPost = '';

    	const reactionUser = async () => {
    		const spanLikeValue = document.getElementById(`likeValue${id}`);
    		const spanLoveValue = document.getElementById(`loveValue${id}`);
    		const btnLike = document.getElementById(`btnLike${id}`);
    		const btnLove = document.getElementById(`btnLove${id}`);

    		if (spanLikeValue.textContent !== '0' || spanLoveValue.textContent !== '0') {
    			const getIdReaction = await fetch(`${urlAPI}/post/like/?post_id=${id}`);
    			const response = await getIdReaction.json();
    			reactionsPost = response;

    			response.forEach(reaction => {
    				if (reaction.id === userId && reaction.like) {
    					btnLike.classList.remove('far');
    					btnLike.classList.add('fas');
    				}

    				if (reaction.id === userId && reaction.love) {
    					btnLove.classList.remove('far');
    					btnLove.classList.add('fas');
    				}
    			});
    		}
    	};

    	const changeReaction = async e => {
    		const btnReactionLike = document.getElementById(`btnReactionLike${id}`);
    		const btnReactionLove = document.getElementById(`btnReactionLove${id}`);
    		btnReactionLike.setAttribute('disabled', '');
    		btnReactionLove.setAttribute('disabled', '');
    		const spanLikeValue = document.getElementById(`likeValue${id}`);
    		const spanLoveValue = document.getElementById(`loveValue${id}`);

    		if (spanLikeValue.textContent === '0' || spanLoveValue.textContent === '0') {
    			const getIdReaction = await fetch(`${urlAPI}/post/like/?post_id=${id}`);
    			const response = await getIdReaction.json();
    			reactionsPost = response;
    		} // console.log(reactionsPost);

    		const likeAcount = document.getElementById(likeValue);
    		const loveAcount = document.getElementById(loveValue);
    		const element = e.target.parentNode.childNodes[0];
    		const reactionType = element.classList[0];
    		const reactionElement = element.classList[1];
    		const btnLike = document.getElementById(`btnLike${id}`);
    		const btnLove = document.getElementById(`btnLove${id}`);
    		let myLike = false;

    		if (reactionsPost !== '' && !reactionsPost.Error) {
    			reactionsPost.forEach(like => {
    				if (like.id !== userId) {
    					myLike = false;
    				}

    				if (like.id === userId) {
    					myLike = true;
    				}
    			});
    		}

    		let myLove = false;

    		if (reactionsPost !== '' && !reactionsPost.Error) {
    			reactionsPost.forEach(love => {
    				if (love.id !== userId) {
    					myLove = false;
    				}

    				if (love.id === userId) {
    					myLove = true;
    				}
    			});
    		}

    		// update like reaction
    		if (myLike && reactionType === 'fa-thumbs-up') {
    			if (reactionElement === 'far') {
    				// console.log('actualizando like');
    				const like = await fetch(`${urlAPI}/post/like/?post_id=${id}&user=${userId}`, {
    					method: 'PUT',
    					headers: { 'Content-Type': 'application/json' },
    					body: JSON.stringify({ like: 1 })
    				});

    				const response = like.json();

    				if (response) {
    					$$invalidate(0, reactions.like += 1, reactions);
    					likeAcount.textContent = reactions.like;
    					toggleReaction();

    					if (btnLove.classList[1] === 'fas') {
    						btnLove.classList.remove('fas');
    						btnLove.classList.add('far');
    						$$invalidate(0, reactions.love -= 1, reactions);
    						loveAcount.textContent = reactions.love;
    					}
    				} // await reactionUser()
    			}

    			if (reactionElement === 'fas') {
    				// console.log('actualizando dislike');
    				const dislike = await fetch(`${urlAPI}/post/like/?post_id=${id}&user=${userId}`, {
    					method: 'PUT',
    					headers: { 'Content-Type': 'application/json' },
    					body: JSON.stringify({})
    				});

    				const response = dislike.json();

    				if (response) {
    					$$invalidate(0, reactions.like -= 1, reactions);
    					likeAcount.textContent = reactions.like;
    					toggleReaction();
    				} // await reactionUser()
    			}
    		}

    		// update love reaction
    		if (myLove && reactionType === 'fa-heart') {
    			if (reactionElement === 'far') {
    				// console.log('actualizando love');
    				const dislove = await fetch(`${urlAPI}/post/like/?post_id=${id}&user=${userId}`, {
    					method: 'PUT',
    					headers: { 'Content-Type': 'application/json' },
    					body: JSON.stringify({ love: 1 })
    				});

    				const response = dislove.json();

    				if (response) {
    					$$invalidate(0, reactions.love += 1, reactions);
    					loveAcount.textContent = reactions.love;
    					toggleReaction();

    					if (btnLike.classList[1] === 'fas') {
    						btnLike.classList.remove('fas');
    						btnLike.classList.add('far');
    						$$invalidate(0, reactions.like -= 1, reactions);
    						likeAcount.textContent = reactions.like;
    					}
    				}
    			}

    			// console.log(reactionsPost, reactionType, reactionElement, userId);
    			if (reactionElement === 'fas') {
    				// console.log('actualizando dislove');
    				const dislove = await fetch(`${urlAPI}/post/like/?post_id=${id}&user=${userId}`, {
    					method: 'PUT',
    					headers: { 'Content-Type': 'application/json' },
    					body: JSON.stringify({})
    				});

    				const response = dislove.json();

    				if (response) {
    					$$invalidate(0, reactions.love -= 1, reactions);
    					loveAcount.textContent = reactions.love;
    					toggleReaction();
    				} // await reactionUser()
    			}
    		}

    		//new like
    		if (reactionType === 'fa-thumbs-up' && reactionElement === 'far') {
    			if (reactions.like === 0 && reactions.love === 0 || !myLike && !myLove) {
    				// console.log('creando like');
    				const createReaction = await fetch(`${urlAPI}/post/like/`, {
    					method: 'POST',
    					headers: { 'Content-Type': 'application/json' },
    					body: JSON.stringify({ user_id: userId, post_id: id, like: 1 })
    				});

    				const response = createReaction.json();

    				if (response) {
    					$$invalidate(0, reactions.like += 1, reactions);
    					likeAcount.textContent = reactions.like;
    					toggleReaction();
    				}
    			}
    		}

    		// new love
    		if (reactionType === 'fa-heart' && reactionElement === 'far') {
    			if (reactions.like === 0 && reactions.love === 0 || !myLike && !myLove) {
    				// console.log('creando love');
    				const createReaction = await fetch(`${urlAPI}/post/like/`, {
    					method: 'POST',
    					headers: { 'Content-Type': 'application/json' },
    					body: JSON.stringify({ user_id: userId, post_id: id, love: 1 })
    				});

    				const response = createReaction.json();

    				if (response) {
    					$$invalidate(0, reactions.love += 1, reactions);
    					loveAcount.textContent = reactions.love;
    					toggleReaction();
    				}
    			}
    		}

    		function toggleReaction() {
    			if (element.classList[1] === 'far') {
    				element.classList.remove('far');
    				element.classList.add('fas');
    			} else {
    				element.classList.remove('fas');
    				element.classList.add('far');
    			}
    		}

    		await reactionUser();
    		btnReactionLike.removeAttribute('disabled');
    		btnReactionLove.removeAttribute('disabled');
    	};

    	const showComments = () => {
    		const comment = document.getElementById(`comment${id}`);
    		comment.classList.remove('d-none');
    		getCommets();
    	};

    	let dataComment;

    	const getCommets = async () => {
    		if (comments >= 1) {
    			const response = await fetch(`${urlAPI}/post/comment/?post_id=${id}`);
    			const content = await response.json();
    			$$invalidate(12, dataComment = content);
    		}
    	};

    	const commentAbled = e => {
    		const btnSendComment = document.getElementById(`btn-sendComment${id}`);

    		if (e.target.value !== '') {
    			btnSendComment.removeAttribute('disabled');
    		} else {
    			btnSendComment.setAttribute('disabled', '');
    		}
    	};

    	const addComment = async e => {
    		e.preventDefault();
    		const inputAddComment = document.getElementById(`inputAddComment${id}`);

    		const response = await fetch(`${urlAPI}/post/comment/`, {
    			method: 'POST',
    			headers: { 'Content-Type': 'application/json' },
    			body: JSON.stringify({
    				comment: inputAddComment.value,
    				user_id: userId,
    				post_id: id
    			})
    		});

    		const content = await response.json();

    		if (content) {
    			inputAddComment.value = '';
    			$$invalidate(1, comments += 1);
    			getCommets();
    		}
    	};

    	onMount(() => {
    		reactionUser();
    	});

    	const writable_props = [
    		'userId',
    		'desc',
    		'reactions',
    		'img',
    		'comments',
    		'create_time',
    		'user',
    		'id',
    		'user_id',
    		'update_time',
    		'name',
    		'middle_name',
    		'last_name',
    		'title',
    		'photo',
    		'email',
    		'userMain',
    		'urlAPI'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Post> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('userId' in $$props) $$invalidate(20, userId = $$props.userId);
    		if ('desc' in $$props) $$invalidate(7, desc = $$props.desc);
    		if ('reactions' in $$props) $$invalidate(0, reactions = $$props.reactions);
    		if ('img' in $$props) $$invalidate(8, img = $$props.img);
    		if ('comments' in $$props) $$invalidate(1, comments = $$props.comments);
    		if ('create_time' in $$props) $$invalidate(9, create_time = $$props.create_time);
    		if ('user' in $$props) $$invalidate(2, user = $$props.user);
    		if ('id' in $$props) $$invalidate(10, id = $$props.id);
    		if ('user_id' in $$props) $$invalidate(21, user_id = $$props.user_id);
    		if ('update_time' in $$props) $$invalidate(22, update_time = $$props.update_time);
    		if ('name' in $$props) $$invalidate(3, name = $$props.name);
    		if ('middle_name' in $$props) $$invalidate(23, middle_name = $$props.middle_name);
    		if ('last_name' in $$props) $$invalidate(4, last_name = $$props.last_name);
    		if ('title' in $$props) $$invalidate(5, title = $$props.title);
    		if ('photo' in $$props) $$invalidate(6, photo = $$props.photo);
    		if ('email' in $$props) $$invalidate(24, email = $$props.email);
    		if ('userMain' in $$props) $$invalidate(25, userMain = $$props.userMain);
    		if ('urlAPI' in $$props) $$invalidate(11, urlAPI = $$props.urlAPI);
    	};

    	$$self.$capture_state = () => ({
    		link,
    		active,
    		Comment,
    		startTime,
    		onMount,
    		userId,
    		desc,
    		reactions,
    		img,
    		comments,
    		create_time,
    		user,
    		id,
    		user_id,
    		update_time,
    		name,
    		middle_name,
    		last_name,
    		title,
    		photo,
    		email,
    		userMain,
    		urlAPI,
    		userLink,
    		viewUserProfile,
    		visitProfile,
    		likeValue,
    		loveValue,
    		reactionsPost,
    		reactionUser,
    		changeReaction,
    		showComments,
    		dataComment,
    		getCommets,
    		commentAbled,
    		addComment
    	});

    	$$self.$inject_state = $$props => {
    		if ('userId' in $$props) $$invalidate(20, userId = $$props.userId);
    		if ('desc' in $$props) $$invalidate(7, desc = $$props.desc);
    		if ('reactions' in $$props) $$invalidate(0, reactions = $$props.reactions);
    		if ('img' in $$props) $$invalidate(8, img = $$props.img);
    		if ('comments' in $$props) $$invalidate(1, comments = $$props.comments);
    		if ('create_time' in $$props) $$invalidate(9, create_time = $$props.create_time);
    		if ('user' in $$props) $$invalidate(2, user = $$props.user);
    		if ('id' in $$props) $$invalidate(10, id = $$props.id);
    		if ('user_id' in $$props) $$invalidate(21, user_id = $$props.user_id);
    		if ('update_time' in $$props) $$invalidate(22, update_time = $$props.update_time);
    		if ('name' in $$props) $$invalidate(3, name = $$props.name);
    		if ('middle_name' in $$props) $$invalidate(23, middle_name = $$props.middle_name);
    		if ('last_name' in $$props) $$invalidate(4, last_name = $$props.last_name);
    		if ('title' in $$props) $$invalidate(5, title = $$props.title);
    		if ('photo' in $$props) $$invalidate(6, photo = $$props.photo);
    		if ('email' in $$props) $$invalidate(24, email = $$props.email);
    		if ('userMain' in $$props) $$invalidate(25, userMain = $$props.userMain);
    		if ('urlAPI' in $$props) $$invalidate(11, urlAPI = $$props.urlAPI);
    		if ('userLink' in $$props) userLink = $$props.userLink;
    		if ('reactionsPost' in $$props) reactionsPost = $$props.reactionsPost;
    		if ('dataComment' in $$props) $$invalidate(12, dataComment = $$props.dataComment);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		reactions,
    		comments,
    		user,
    		name,
    		last_name,
    		title,
    		photo,
    		desc,
    		img,
    		create_time,
    		id,
    		urlAPI,
    		dataComment,
    		visitProfile,
    		likeValue,
    		loveValue,
    		changeReaction,
    		showComments,
    		commentAbled,
    		addComment,
    		userId,
    		user_id,
    		update_time,
    		middle_name,
    		email,
    		userMain
    	];
    }

    class Post extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$s,
    			create_fragment$s,
    			safe_not_equal,
    			{
    				userId: 20,
    				desc: 7,
    				reactions: 0,
    				img: 8,
    				comments: 1,
    				create_time: 9,
    				user: 2,
    				id: 10,
    				user_id: 21,
    				update_time: 22,
    				name: 3,
    				middle_name: 23,
    				last_name: 4,
    				title: 5,
    				photo: 6,
    				email: 24,
    				userMain: 25,
    				urlAPI: 11
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Post",
    			options,
    			id: create_fragment$s.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*userId*/ ctx[20] === undefined && !('userId' in props)) {
    			console.warn("<Post> was created without expected prop 'userId'");
    		}

    		if (/*desc*/ ctx[7] === undefined && !('desc' in props)) {
    			console.warn("<Post> was created without expected prop 'desc'");
    		}

    		if (/*reactions*/ ctx[0] === undefined && !('reactions' in props)) {
    			console.warn("<Post> was created without expected prop 'reactions'");
    		}

    		if (/*img*/ ctx[8] === undefined && !('img' in props)) {
    			console.warn("<Post> was created without expected prop 'img'");
    		}

    		if (/*comments*/ ctx[1] === undefined && !('comments' in props)) {
    			console.warn("<Post> was created without expected prop 'comments'");
    		}

    		if (/*create_time*/ ctx[9] === undefined && !('create_time' in props)) {
    			console.warn("<Post> was created without expected prop 'create_time'");
    		}

    		if (/*user*/ ctx[2] === undefined && !('user' in props)) {
    			console.warn("<Post> was created without expected prop 'user'");
    		}

    		if (/*id*/ ctx[10] === undefined && !('id' in props)) {
    			console.warn("<Post> was created without expected prop 'id'");
    		}

    		if (/*user_id*/ ctx[21] === undefined && !('user_id' in props)) {
    			console.warn("<Post> was created without expected prop 'user_id'");
    		}

    		if (/*update_time*/ ctx[22] === undefined && !('update_time' in props)) {
    			console.warn("<Post> was created without expected prop 'update_time'");
    		}

    		if (/*name*/ ctx[3] === undefined && !('name' in props)) {
    			console.warn("<Post> was created without expected prop 'name'");
    		}

    		if (/*middle_name*/ ctx[23] === undefined && !('middle_name' in props)) {
    			console.warn("<Post> was created without expected prop 'middle_name'");
    		}

    		if (/*last_name*/ ctx[4] === undefined && !('last_name' in props)) {
    			console.warn("<Post> was created without expected prop 'last_name'");
    		}

    		if (/*title*/ ctx[5] === undefined && !('title' in props)) {
    			console.warn("<Post> was created without expected prop 'title'");
    		}

    		if (/*photo*/ ctx[6] === undefined && !('photo' in props)) {
    			console.warn("<Post> was created without expected prop 'photo'");
    		}

    		if (/*email*/ ctx[24] === undefined && !('email' in props)) {
    			console.warn("<Post> was created without expected prop 'email'");
    		}

    		if (/*userMain*/ ctx[25] === undefined && !('userMain' in props)) {
    			console.warn("<Post> was created without expected prop 'userMain'");
    		}

    		if (/*urlAPI*/ ctx[11] === undefined && !('urlAPI' in props)) {
    			console.warn("<Post> was created without expected prop 'urlAPI'");
    		}
    	}

    	get userId() {
    		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userId(value) {
    		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get desc() {
    		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set desc(value) {
    		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get reactions() {
    		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set reactions(value) {
    		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get img() {
    		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set img(value) {
    		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get comments() {
    		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set comments(value) {
    		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get create_time() {
    		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set create_time(value) {
    		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get user() {
    		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set user(value) {
    		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get user_id() {
    		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set user_id(value) {
    		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get update_time() {
    		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set update_time(value) {
    		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get name() {
    		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get middle_name() {
    		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set middle_name(value) {
    		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get last_name() {
    		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set last_name(value) {
    		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get photo() {
    		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set photo(value) {
    		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get email() {
    		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set email(value) {
    		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get userMain() {
    		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userMain(value) {
    		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlAPI() {
    		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Loader.svelte generated by Svelte v3.46.4 */

    const file$r = "src/components/Loader.svelte";

    function create_fragment$r(ctx) {
    	let div2;
    	let div1;
    	let div0;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			add_location(div0, file$r, 2, 4, 56);
    			attr_dev(div1, "class", "loader");
    			add_location(div1, file$r, 1, 2, 31);
    			attr_dev(div2, "class", "loader-content");
    			add_location(div2, file$r, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$r($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Loader', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Loader> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Loader extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$r, create_fragment$r, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Loader",
    			options,
    			id: create_fragment$r.name
    		});
    	}
    }

    /* src/components/TimelineH.svelte generated by Svelte v3.46.4 */

    const { console: console_1$5 } = globals;
    const file$q = "src/components/TimelineH.svelte";

    function get_each_context$b(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	return child_ctx;
    }

    // (65:4) {#if id}
    function create_if_block$g(ctx) {
    	let addpost;
    	let current;

    	addpost = new AddPost({
    			props: {
    				id: /*id*/ ctx[0],
    				urlAPI: /*urlAPI*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(addpost.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(addpost, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const addpost_changes = {};
    			if (dirty & /*id*/ 1) addpost_changes.id = /*id*/ ctx[0];
    			if (dirty & /*urlAPI*/ 2) addpost_changes.urlAPI = /*urlAPI*/ ctx[1];
    			addpost.$set(addpost_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(addpost.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(addpost.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(addpost, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$g.name,
    		type: "if",
    		source: "(65:4) {#if id}",
    		ctx
    	});

    	return block;
    }

    // (68:4) {#each $posts as dataPost}
    function create_each_block$b(ctx) {
    	let post;
    	let current;

    	const post_spread_levels = [
    		/*dataPost*/ ctx[9],
    		{ userId: /*userId*/ ctx[3] },
    		{ urlAPI: /*urlAPI*/ ctx[1] }
    	];

    	let post_props = {};

    	for (let i = 0; i < post_spread_levels.length; i += 1) {
    		post_props = assign(post_props, post_spread_levels[i]);
    	}

    	post = new Post({ props: post_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(post.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(post, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const post_changes = (dirty & /*$posts, userId, urlAPI*/ 14)
    			? get_spread_update(post_spread_levels, [
    					dirty & /*$posts*/ 4 && get_spread_object(/*dataPost*/ ctx[9]),
    					dirty & /*userId*/ 8 && { userId: /*userId*/ ctx[3] },
    					dirty & /*urlAPI*/ 2 && { urlAPI: /*urlAPI*/ ctx[1] }
    				])
    			: {};

    			post.$set(post_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(post.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(post.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(post, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$b.name,
    		type: "each",
    		source: "(68:4) {#each $posts as dataPost}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$q(ctx) {
    	let div2;
    	let div1;
    	let t0;
    	let t1;
    	let div0;
    	let current;
    	let if_block = /*id*/ ctx[0] && create_if_block$g(ctx);
    	let each_value = /*$posts*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$b(get_each_context$b(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			if (if_block) if_block.c();
    			t0 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t1 = space();
    			div0 = element("div");
    			div0.textContent = "Sorry! there aren't more posts.";
    			attr_dev(div0, "id", "endPosts");
    			attr_dev(div0, "class", "d-none text-center fw-bold");
    			set_style(div0, "color", "var(--main-color)");
    			add_location(div0, file$q, 71, 4, 1569);
    			attr_dev(div1, "class", "Timeline-container");
    			add_location(div1, file$q, 63, 2, 1387);
    			attr_dev(div2, "class", "Timeline col-12 col-lg-6");
    			add_location(div2, file$q, 62, 0, 1346);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*id*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*id*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$g(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, t0);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*$posts, userId, urlAPI*/ 14) {
    				each_value = /*$posts*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$b(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$b(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div1, t1);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let $posts;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TimelineH', slots, []);
    	let { id } = $$props;
    	let { urlAPI } = $$props;
    	const userId = id;
    	const posts = writable([]);
    	validate_store(posts, 'posts');
    	component_subscribe($$self, posts, value => $$invalidate(2, $posts = value));
    	let page = 0;
    	let countPost = 0;

    	async function getPosts(page1) {
    		if (page1) {
    			page = page1;
    		} else {
    			page += 1;
    		}

    		try {
    			const response = await fetch(`${urlAPI}/post/home/?page=${page}&user_id=${id}`);
    			const content = await response.json();
    			countPost = content.count;

    			if (content.results) {
    				posts.set([...$posts, ...content.results]);
    			} else {
    				endPosts.classList.remove('d-none');
    			}
    		} catch(error) {
    			console.log(error);
    		}
    	}

    	async function clearPost() {
    		posts.set([]);
    	}

    	if (id === parseInt(localStorage.getItem('userId'))) {
    		setTimeout(
    			() => {
    				btnSendPost.addEventListener('click', e => {
    					setTimeout(
    						() => {
    							clearPost();
    							getPosts(1);
    						},
    						1000
    					);
    				});
    			},
    			2000
    		);
    	}

    	document.addEventListener('scroll', async e => {
    		if (window.innerHeight + window.scrollY >= main.offsetHeight - 1) {
    			if (countPost > 3) {
    				getPosts();
    			}
    		}
    	});

    	onMount(getPosts);
    	const writable_props = ['id', 'urlAPI'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$5.warn(`<TimelineH> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    		if ('urlAPI' in $$props) $$invalidate(1, urlAPI = $$props.urlAPI);
    	};

    	$$self.$capture_state = () => ({
    		AddPost,
    		Post,
    		Loader,
    		onMount,
    		writable,
    		id,
    		urlAPI,
    		userId,
    		posts,
    		page,
    		countPost,
    		getPosts,
    		clearPost,
    		$posts
    	});

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    		if ('urlAPI' in $$props) $$invalidate(1, urlAPI = $$props.urlAPI);
    		if ('page' in $$props) page = $$props.page;
    		if ('countPost' in $$props) countPost = $$props.countPost;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [id, urlAPI, $posts, userId, posts, getPosts];
    }

    class TimelineH extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$q, create_fragment$q, safe_not_equal, { id: 0, urlAPI: 1, getPosts: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TimelineH",
    			options,
    			id: create_fragment$q.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[0] === undefined && !('id' in props)) {
    			console_1$5.warn("<TimelineH> was created without expected prop 'id'");
    		}

    		if (/*urlAPI*/ ctx[1] === undefined && !('urlAPI' in props)) {
    			console_1$5.warn("<TimelineH> was created without expected prop 'urlAPI'");
    		}
    	}

    	get id() {
    		throw new Error("<TimelineH>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<TimelineH>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlAPI() {
    		throw new Error("<TimelineH>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error("<TimelineH>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getPosts() {
    		return this.$$.ctx[5];
    	}

    	set getPosts(value) {
    		throw new Error("<TimelineH>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/events-card/Event.svelte generated by Svelte v3.46.4 */

    const file$p = "src/components/events-card/Event.svelte";

    function create_fragment$p(ctx) {
    	let div5;
    	let ul;
    	let li;
    	let div0;
    	let i;
    	let t0;
    	let h6;
    	let t1;
    	let t2;
    	let div3;
    	let div1;
    	let img;
    	let img_src_value;
    	let t3;
    	let div2;
    	let p0;
    	let t4;
    	let span0;
    	let t5;
    	let t6;
    	let p1;
    	let t7;
    	let span1;
    	let t8;
    	let t9;
    	let p2;
    	let t10;
    	let span2;
    	let t11;
    	let t12;
    	let p3;
    	let t13;
    	let span3;
    	let t14;
    	let t15;
    	let div4;
    	let a;
    	let t16;

    	const block = {
    		c: function create() {
    			div5 = element("div");
    			ul = element("ul");
    			li = element("li");
    			div0 = element("div");
    			i = element("i");
    			t0 = space();
    			h6 = element("h6");
    			t1 = text(/*title*/ ctx[0]);
    			t2 = space();
    			div3 = element("div");
    			div1 = element("div");
    			img = element("img");
    			t3 = space();
    			div2 = element("div");
    			p0 = element("p");
    			t4 = text("Date: ");
    			span0 = element("span");
    			t5 = text(/*date*/ ctx[2]);
    			t6 = space();
    			p1 = element("p");
    			t7 = text("Start time: ");
    			span1 = element("span");
    			t8 = text(/*start*/ ctx[3]);
    			t9 = space();
    			p2 = element("p");
    			t10 = text("Final hour: ");
    			span2 = element("span");
    			t11 = text(/*end*/ ctx[4]);
    			t12 = space();
    			p3 = element("p");
    			t13 = text("Place: ");
    			span3 = element("span");
    			t14 = text(/*place*/ ctx[5]);
    			t15 = space();
    			div4 = element("div");
    			a = element("a");
    			t16 = text(/*linkName*/ ctx[7]);
    			attr_dev(i, "class", "fas fa-circle svelte-1kzlnii");
    			add_location(i, file$p, 45, 8, 771);
    			attr_dev(h6, "class", "svelte-1kzlnii");
    			add_location(h6, file$p, 46, 8, 809);
    			attr_dev(div0, "class", "Event-row d-flex align-items-center");
    			add_location(div0, file$p, 44, 6, 713);
    			if (!src_url_equal(img.src, img_src_value = /*eventLogo*/ ctx[1])) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			attr_dev(img, "class", "svelte-1kzlnii");
    			add_location(img, file$p, 50, 10, 959);
    			attr_dev(div1, "class", "Event-img col-6 d-flex align-items-end justify-content-end svelte-1kzlnii");
    			add_location(div1, file$p, 49, 8, 876);
    			add_location(span0, file$p, 53, 19, 1066);
    			add_location(p0, file$p, 53, 10, 1057);
    			add_location(span1, file$p, 54, 25, 1115);
    			add_location(p1, file$p, 54, 10, 1100);
    			add_location(span2, file$p, 55, 25, 1165);
    			add_location(p2, file$p, 55, 10, 1150);
    			add_location(span3, file$p, 56, 20, 1208);
    			add_location(p3, file$p, 56, 10, 1198);
    			attr_dev(div2, "class", "Event-details col-6 svelte-1kzlnii");
    			add_location(div2, file$p, 52, 8, 1013);
    			attr_dev(div3, "class", "row mt-1");
    			add_location(div3, file$p, 48, 6, 845);
    			attr_dev(a, "href", /*href*/ ctx[6]);
    			add_location(a, file$p, 60, 8, 1304);
    			attr_dev(div4, "class", "Event-link m-3 svelte-1kzlnii");
    			add_location(div4, file$p, 59, 6, 1267);
    			attr_dev(li, "class", "svelte-1kzlnii");
    			add_location(li, file$p, 43, 4, 702);
    			attr_dev(ul, "class", "svelte-1kzlnii");
    			add_location(ul, file$p, 42, 2, 693);
    			attr_dev(div5, "class", "Event svelte-1kzlnii");
    			add_location(div5, file$p, 41, 0, 671);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div5, anchor);
    			append_dev(div5, ul);
    			append_dev(ul, li);
    			append_dev(li, div0);
    			append_dev(div0, i);
    			append_dev(div0, t0);
    			append_dev(div0, h6);
    			append_dev(h6, t1);
    			append_dev(li, t2);
    			append_dev(li, div3);
    			append_dev(div3, div1);
    			append_dev(div1, img);
    			append_dev(div3, t3);
    			append_dev(div3, div2);
    			append_dev(div2, p0);
    			append_dev(p0, t4);
    			append_dev(p0, span0);
    			append_dev(span0, t5);
    			append_dev(div2, t6);
    			append_dev(div2, p1);
    			append_dev(p1, t7);
    			append_dev(p1, span1);
    			append_dev(span1, t8);
    			append_dev(div2, t9);
    			append_dev(div2, p2);
    			append_dev(p2, t10);
    			append_dev(p2, span2);
    			append_dev(span2, t11);
    			append_dev(div2, t12);
    			append_dev(div2, p3);
    			append_dev(p3, t13);
    			append_dev(p3, span3);
    			append_dev(p3, t14);
    			append_dev(li, t15);
    			append_dev(li, div4);
    			append_dev(div4, a);
    			append_dev(a, t16);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*title*/ 1) set_data_dev(t1, /*title*/ ctx[0]);

    			if (dirty & /*eventLogo*/ 2 && !src_url_equal(img.src, img_src_value = /*eventLogo*/ ctx[1])) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*date*/ 4) set_data_dev(t5, /*date*/ ctx[2]);
    			if (dirty & /*start*/ 8) set_data_dev(t8, /*start*/ ctx[3]);
    			if (dirty & /*end*/ 16) set_data_dev(t11, /*end*/ ctx[4]);
    			if (dirty & /*place*/ 32) set_data_dev(t14, /*place*/ ctx[5]);
    			if (dirty & /*linkName*/ 128) set_data_dev(t16, /*linkName*/ ctx[7]);

    			if (dirty & /*href*/ 64) {
    				attr_dev(a, "href", /*href*/ ctx[6]);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Event', slots, []);
    	let { title, eventLogo, date, start, end, place, href, linkName } = $$props;
    	const writable_props = ['title', 'eventLogo', 'date', 'start', 'end', 'place', 'href', 'linkName'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Event> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('title' in $$props) $$invalidate(0, title = $$props.title);
    		if ('eventLogo' in $$props) $$invalidate(1, eventLogo = $$props.eventLogo);
    		if ('date' in $$props) $$invalidate(2, date = $$props.date);
    		if ('start' in $$props) $$invalidate(3, start = $$props.start);
    		if ('end' in $$props) $$invalidate(4, end = $$props.end);
    		if ('place' in $$props) $$invalidate(5, place = $$props.place);
    		if ('href' in $$props) $$invalidate(6, href = $$props.href);
    		if ('linkName' in $$props) $$invalidate(7, linkName = $$props.linkName);
    	};

    	$$self.$capture_state = () => ({
    		title,
    		eventLogo,
    		date,
    		start,
    		end,
    		place,
    		href,
    		linkName
    	});

    	$$self.$inject_state = $$props => {
    		if ('title' in $$props) $$invalidate(0, title = $$props.title);
    		if ('eventLogo' in $$props) $$invalidate(1, eventLogo = $$props.eventLogo);
    		if ('date' in $$props) $$invalidate(2, date = $$props.date);
    		if ('start' in $$props) $$invalidate(3, start = $$props.start);
    		if ('end' in $$props) $$invalidate(4, end = $$props.end);
    		if ('place' in $$props) $$invalidate(5, place = $$props.place);
    		if ('href' in $$props) $$invalidate(6, href = $$props.href);
    		if ('linkName' in $$props) $$invalidate(7, linkName = $$props.linkName);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [title, eventLogo, date, start, end, place, href, linkName];
    }

    class Event$2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$p, create_fragment$p, safe_not_equal, {
    			title: 0,
    			eventLogo: 1,
    			date: 2,
    			start: 3,
    			end: 4,
    			place: 5,
    			href: 6,
    			linkName: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Event",
    			options,
    			id: create_fragment$p.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*title*/ ctx[0] === undefined && !('title' in props)) {
    			console.warn("<Event> was created without expected prop 'title'");
    		}

    		if (/*eventLogo*/ ctx[1] === undefined && !('eventLogo' in props)) {
    			console.warn("<Event> was created without expected prop 'eventLogo'");
    		}

    		if (/*date*/ ctx[2] === undefined && !('date' in props)) {
    			console.warn("<Event> was created without expected prop 'date'");
    		}

    		if (/*start*/ ctx[3] === undefined && !('start' in props)) {
    			console.warn("<Event> was created without expected prop 'start'");
    		}

    		if (/*end*/ ctx[4] === undefined && !('end' in props)) {
    			console.warn("<Event> was created without expected prop 'end'");
    		}

    		if (/*place*/ ctx[5] === undefined && !('place' in props)) {
    			console.warn("<Event> was created without expected prop 'place'");
    		}

    		if (/*href*/ ctx[6] === undefined && !('href' in props)) {
    			console.warn("<Event> was created without expected prop 'href'");
    		}

    		if (/*linkName*/ ctx[7] === undefined && !('linkName' in props)) {
    			console.warn("<Event> was created without expected prop 'linkName'");
    		}
    	}

    	get title() {
    		throw new Error("<Event>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Event>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get eventLogo() {
    		throw new Error("<Event>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set eventLogo(value) {
    		throw new Error("<Event>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get date() {
    		throw new Error("<Event>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set date(value) {
    		throw new Error("<Event>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get start() {
    		throw new Error("<Event>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set start(value) {
    		throw new Error("<Event>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get end() {
    		throw new Error("<Event>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set end(value) {
    		throw new Error("<Event>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get place() {
    		throw new Error("<Event>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set place(value) {
    		throw new Error("<Event>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get href() {
    		throw new Error("<Event>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set href(value) {
    		throw new Error("<Event>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get linkName() {
    		throw new Error("<Event>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set linkName(value) {
    		throw new Error("<Event>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Deferred {
        constructor() {
            this.reject = () => { };
            this.resolve = () => { };
            this.promise = new Promise((resolve, reject) => {
                this.resolve = resolve;
                this.reject = reject;
            });
        }
        /**
         * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
         * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
         * and returns a node-style callback which will resolve or reject the Deferred's promise.
         */
        wrapCallback(callback) {
            return (error, value) => {
                if (error) {
                    this.reject(error);
                }
                else {
                    this.resolve(value);
                }
                if (typeof callback === 'function') {
                    // Attaching noop handler just in case developer wasn't expecting
                    // promises
                    this.promise.catch(() => { });
                    // Some of our callbacks don't expect a value and our own tests
                    // assert that the parameter length is 1
                    if (callback.length === 1) {
                        callback(error);
                    }
                    else {
                        callback(error, value);
                    }
                }
            };
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns navigator.userAgent string or '' if it's not defined.
     * @return user agent string
     */
    function getUA() {
        if (typeof navigator !== 'undefined' &&
            typeof navigator['userAgent'] === 'string') {
            return navigator['userAgent'];
        }
        else {
            return '';
        }
    }
    /**
     * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
     *
     * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
     * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
     * wait for a callback.
     */
    function isMobileCordova() {
        return (typeof window !== 'undefined' &&
            // @ts-ignore Setting up an broadly applicable index signature for Window
            // just to deal with this case would probably be a bad idea.
            !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
            /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
    }
    function isBrowserExtension() {
        const runtime = typeof chrome === 'object'
            ? chrome.runtime
            : typeof browser === 'object'
                ? browser.runtime
                : undefined;
        return typeof runtime === 'object' && runtime.id !== undefined;
    }
    /**
     * Detect React Native.
     *
     * @return true if ReactNative environment is detected.
     */
    function isReactNative() {
        return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
    }
    /** Detects Electron apps. */
    function isElectron() {
        return getUA().indexOf('Electron/') >= 0;
    }
    /** Detects Internet Explorer. */
    function isIE() {
        const ua = getUA();
        return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
    }
    /** Detects Universal Windows Platform apps. */
    function isUWP() {
        return getUA().indexOf('MSAppHost/') >= 0;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview Standardized Firebase Error.
     *
     * Usage:
     *
     *   // Typescript string literals for type-safe codes
     *   type Err =
     *     'unknown' |
     *     'object-not-found'
     *     ;
     *
     *   // Closure enum for type-safe error codes
     *   // at-enum {string}
     *   var Err = {
     *     UNKNOWN: 'unknown',
     *     OBJECT_NOT_FOUND: 'object-not-found',
     *   }
     *
     *   let errors: Map<Err, string> = {
     *     'generic-error': "Unknown error",
     *     'file-not-found': "Could not find file: {$file}",
     *   };
     *
     *   // Type-safe function - must pass a valid error code as param.
     *   let error = new ErrorFactory<Err>('service', 'Service', errors);
     *
     *   ...
     *   throw error.create(Err.GENERIC);
     *   ...
     *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});
     *   ...
     *   // Service: Could not file file: foo.txt (service/file-not-found).
     *
     *   catch (e) {
     *     assert(e.message === "Could not find file: foo.txt.");
     *     if (e.code === 'service/file-not-found') {
     *       console.log("Could not read file: " + e['file']);
     *     }
     *   }
     */
    const ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    class FirebaseError extends Error {
        constructor(
        /** The error code for this error. */
        code, message, 
        /** Custom data for this error. */
        customData) {
            super(message);
            this.code = code;
            this.customData = customData;
            /** The custom name for all FirebaseErrors. */
            this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(this, ErrorFactory.prototype.create);
            }
        }
    }
    class ErrorFactory {
        constructor(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        create(code, ...data) {
            const customData = data[0] || {};
            const fullCode = `${this.service}/${code}`;
            const template = this.errors[code];
            const message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;
            const error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        }
    }
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, (_, key) => {
            const value = data[key];
            return value != null ? String(value) : `<${key}?>`;
        });
    }
    const PATTERN = /\{\$([^}]+)}/g;
    /**
     * Deep equal two objects. Support Arrays and Objects.
     */
    function deepEqual(a, b) {
        if (a === b) {
            return true;
        }
        const aKeys = Object.keys(a);
        const bKeys = Object.keys(b);
        for (const k of aKeys) {
            if (!bKeys.includes(k)) {
                return false;
            }
            const aProp = a[k];
            const bProp = b[k];
            if (isObject(aProp) && isObject(bProp)) {
                if (!deepEqual(aProp, bProp)) {
                    return false;
                }
            }
            else if (aProp !== bProp) {
                return false;
            }
        }
        for (const k of bKeys) {
            if (!aKeys.includes(k)) {
                return false;
            }
        }
        return true;
    }
    function isObject(thing) {
        return thing !== null && typeof thing === 'object';
    }

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getModularInstance(service) {
        if (service && service._delegate) {
            return service._delegate;
        }
        else {
            return service;
        }
    }

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    class Component {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        constructor(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
            this.onInstanceCreated = null;
        }
        setInstantiationMode(mode) {
            this.instantiationMode = mode;
            return this;
        }
        setMultipleInstances(multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        }
        setServiceProps(props) {
            this.serviceProps = props;
            return this;
        }
        setInstanceCreatedCallback(callback) {
            this.onInstanceCreated = callback;
            return this;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const DEFAULT_ENTRY_NAME$1 = '[DEFAULT]';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
     * NameServiceMapping[T] is an alias for the type of the instance
     */
    class Provider {
        constructor(name, container) {
            this.name = name;
            this.container = container;
            this.component = null;
            this.instances = new Map();
            this.instancesDeferred = new Map();
            this.instancesOptions = new Map();
            this.onInitCallbacks = new Map();
        }
        /**
         * @param identifier A provider can provide mulitple instances of a service
         * if this.component.multipleInstances is true.
         */
        get(identifier) {
            // if multipleInstances is not supported, use the default name
            const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
            if (!this.instancesDeferred.has(normalizedIdentifier)) {
                const deferred = new Deferred();
                this.instancesDeferred.set(normalizedIdentifier, deferred);
                if (this.isInitialized(normalizedIdentifier) ||
                    this.shouldAutoInitialize()) {
                    // initialize the service if it can be auto-initialized
                    try {
                        const instance = this.getOrInitializeService({
                            instanceIdentifier: normalizedIdentifier
                        });
                        if (instance) {
                            deferred.resolve(instance);
                        }
                    }
                    catch (e) {
                        // when the instance factory throws an exception during get(), it should not cause
                        // a fatal error. We just return the unresolved promise in this case.
                    }
                }
            }
            return this.instancesDeferred.get(normalizedIdentifier).promise;
        }
        getImmediate(options) {
            var _a;
            // if multipleInstances is not supported, use the default name
            const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
            const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;
            if (this.isInitialized(normalizedIdentifier) ||
                this.shouldAutoInitialize()) {
                try {
                    return this.getOrInitializeService({
                        instanceIdentifier: normalizedIdentifier
                    });
                }
                catch (e) {
                    if (optional) {
                        return null;
                    }
                    else {
                        throw e;
                    }
                }
            }
            else {
                // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw
                if (optional) {
                    return null;
                }
                else {
                    throw Error(`Service ${this.name} is not available`);
                }
            }
        }
        getComponent() {
            return this.component;
        }
        setComponent(component) {
            if (component.name !== this.name) {
                throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);
            }
            if (this.component) {
                throw Error(`Component for ${this.name} has already been provided`);
            }
            this.component = component;
            // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)
            if (!this.shouldAutoInitialize()) {
                return;
            }
            // if the service is eager, initialize the default instance
            if (isComponentEager(component)) {
                try {
                    this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME$1 });
                }
                catch (e) {
                    // when the instance factory for an eager Component throws an exception during the eager
                    // initialization, it should not cause a fatal error.
                    // TODO: Investigate if we need to make it configurable, because some component may want to cause
                    // a fatal error in this case?
                }
            }
            // Create service instances for the pending promises and resolve them
            // NOTE: if this.multipleInstances is false, only the default instance will be created
            // and all promises with resolve with it regardless of the identifier.
            for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
                const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                try {
                    // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                    const instance = this.getOrInitializeService({
                        instanceIdentifier: normalizedIdentifier
                    });
                    instanceDeferred.resolve(instance);
                }
                catch (e) {
                    // when the instance factory throws an exception, it should not cause
                    // a fatal error. We just leave the promise unresolved.
                }
            }
        }
        clearInstance(identifier = DEFAULT_ENTRY_NAME$1) {
            this.instancesDeferred.delete(identifier);
            this.instancesOptions.delete(identifier);
            this.instances.delete(identifier);
        }
        // app.delete() will call this method on every provider to delete the services
        // TODO: should we mark the provider as deleted?
        async delete() {
            const services = Array.from(this.instances.values());
            await Promise.all([
                ...services
                    .filter(service => 'INTERNAL' in service) // legacy services
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    .map(service => service.INTERNAL.delete()),
                ...services
                    .filter(service => '_delete' in service) // modularized services
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    .map(service => service._delete())
            ]);
        }
        isComponentSet() {
            return this.component != null;
        }
        isInitialized(identifier = DEFAULT_ENTRY_NAME$1) {
            return this.instances.has(identifier);
        }
        getOptions(identifier = DEFAULT_ENTRY_NAME$1) {
            return this.instancesOptions.get(identifier) || {};
        }
        initialize(opts = {}) {
            const { options = {} } = opts;
            const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
            if (this.isInitialized(normalizedIdentifier)) {
                throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);
            }
            if (!this.isComponentSet()) {
                throw Error(`Component ${this.name} has not been registered yet`);
            }
            const instance = this.getOrInitializeService({
                instanceIdentifier: normalizedIdentifier,
                options
            });
            // resolve any pending promise waiting for the service instance
            for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
                const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                if (normalizedIdentifier === normalizedDeferredIdentifier) {
                    instanceDeferred.resolve(instance);
                }
            }
            return instance;
        }
        /**
         *
         * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
         * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
         *
         * @param identifier An optional instance identifier
         * @returns a function to unregister the callback
         */
        onInit(callback, identifier) {
            var _a;
            const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
            const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();
            existingCallbacks.add(callback);
            this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
            const existingInstance = this.instances.get(normalizedIdentifier);
            if (existingInstance) {
                callback(existingInstance, normalizedIdentifier);
            }
            return () => {
                existingCallbacks.delete(callback);
            };
        }
        /**
         * Invoke onInit callbacks synchronously
         * @param instance the service instance`
         */
        invokeOnInitCallbacks(instance, identifier) {
            const callbacks = this.onInitCallbacks.get(identifier);
            if (!callbacks) {
                return;
            }
            for (const callback of callbacks) {
                try {
                    callback(instance, identifier);
                }
                catch (_a) {
                    // ignore errors in the onInit callback
                }
            }
        }
        getOrInitializeService({ instanceIdentifier, options = {} }) {
            let instance = this.instances.get(instanceIdentifier);
            if (!instance && this.component) {
                instance = this.component.instanceFactory(this.container, {
                    instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
                    options
                });
                this.instances.set(instanceIdentifier, instance);
                this.instancesOptions.set(instanceIdentifier, options);
                /**
                 * Invoke onInit listeners.
                 * Note this.component.onInstanceCreated is different, which is used by the component creator,
                 * while onInit listeners are registered by consumers of the provider.
                 */
                this.invokeOnInitCallbacks(instance, instanceIdentifier);
                /**
                 * Order is important
                 * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
                 * makes `isInitialized()` return true.
                 */
                if (this.component.onInstanceCreated) {
                    try {
                        this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
                    }
                    catch (_a) {
                        // ignore errors in the onInstanceCreatedCallback
                    }
                }
            }
            return instance || null;
        }
        normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME$1) {
            if (this.component) {
                return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME$1;
            }
            else {
                return identifier; // assume multiple instances are supported before the component is provided.
            }
        }
        shouldAutoInitialize() {
            return (!!this.component &&
                this.component.instantiationMode !== "EXPLICIT" /* EXPLICIT */);
        }
    }
    // undefined should be passed to the service factory for the default instance
    function normalizeIdentifierForFactory(identifier) {
        return identifier === DEFAULT_ENTRY_NAME$1 ? undefined : identifier;
    }
    function isComponentEager(component) {
        return component.instantiationMode === "EAGER" /* EAGER */;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
     */
    class ComponentContainer {
        constructor(name) {
            this.name = name;
            this.providers = new Map();
        }
        /**
         *
         * @param component Component being added
         * @param overwrite When a component with the same name has already been registered,
         * if overwrite is true: overwrite the existing component with the new component and create a new
         * provider with the new component. It can be useful in tests where you want to use different mocks
         * for different tests.
         * if overwrite is false: throw an exception
         */
        addComponent(component) {
            const provider = this.getProvider(component.name);
            if (provider.isComponentSet()) {
                throw new Error(`Component ${component.name} has already been registered with ${this.name}`);
            }
            provider.setComponent(component);
        }
        addOrOverwriteComponent(component) {
            const provider = this.getProvider(component.name);
            if (provider.isComponentSet()) {
                // delete the existing provider from the container, so we can register the new component
                this.providers.delete(component.name);
            }
            this.addComponent(component);
        }
        /**
         * getProvider provides a type safe interface where it can only be called with a field name
         * present in NameServiceMapping interface.
         *
         * Firebase SDKs providing services should extend NameServiceMapping interface to register
         * themselves.
         */
        getProvider(name) {
            if (this.providers.has(name)) {
                return this.providers.get(name);
            }
            // create a Provider for a service that hasn't registered with Firebase
            const provider = new Provider(name, this);
            this.providers.set(name, provider);
            return provider;
        }
        getProviders() {
            return Array.from(this.providers.values());
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    const levelStringToEnum = {
        'debug': LogLevel.DEBUG,
        'verbose': LogLevel.VERBOSE,
        'info': LogLevel.INFO,
        'warn': LogLevel.WARN,
        'error': LogLevel.ERROR,
        'silent': LogLevel.SILENT
    };
    /**
     * The default log level
     */
    const defaultLogLevel = LogLevel.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    const ConsoleMethod = {
        [LogLevel.DEBUG]: 'log',
        [LogLevel.VERBOSE]: 'log',
        [LogLevel.INFO]: 'info',
        [LogLevel.WARN]: 'warn',
        [LogLevel.ERROR]: 'error'
    };
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    const defaultLogHandler = (instance, logType, ...args) => {
        if (logType < instance.logLevel) {
            return;
        }
        const now = new Date().toISOString();
        const method = ConsoleMethod[logType];
        if (method) {
            console[method](`[${now}]  ${instance.name}:`, ...args);
        }
        else {
            throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
        }
    };
    class Logger {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        constructor(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
        }
        get logLevel() {
            return this._logLevel;
        }
        set logLevel(val) {
            if (!(val in LogLevel)) {
                throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
            }
            this._logLevel = val;
        }
        // Workaround for setter/getter having to be the same type.
        setLogLevel(val) {
            this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
        }
        get logHandler() {
            return this._logHandler;
        }
        set logHandler(val) {
            if (typeof val !== 'function') {
                throw new TypeError('Value assigned to `logHandler` must be a function');
            }
            this._logHandler = val;
        }
        get userLogHandler() {
            return this._userLogHandler;
        }
        set userLogHandler(val) {
            this._userLogHandler = val;
        }
        /**
         * The functions below are all based on the `console` interface
         */
        debug(...args) {
            this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);
            this._logHandler(this, LogLevel.DEBUG, ...args);
        }
        log(...args) {
            this._userLogHandler &&
                this._userLogHandler(this, LogLevel.VERBOSE, ...args);
            this._logHandler(this, LogLevel.VERBOSE, ...args);
        }
        info(...args) {
            this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);
            this._logHandler(this, LogLevel.INFO, ...args);
        }
        warn(...args) {
            this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);
            this._logHandler(this, LogLevel.WARN, ...args);
        }
        error(...args) {
            this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);
            this._logHandler(this, LogLevel.ERROR, ...args);
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class PlatformLoggerServiceImpl {
        constructor(container) {
            this.container = container;
        }
        // In initial implementation, this will be called by installations on
        // auth token refresh, and installations will send this string.
        getPlatformInfoString() {
            const providers = this.container.getProviders();
            // Loop through providers and get library/version pairs from any that are
            // version components.
            return providers
                .map(provider => {
                if (isVersionServiceProvider(provider)) {
                    const service = provider.getImmediate();
                    return `${service.library}/${service.version}`;
                }
                else {
                    return null;
                }
            })
                .filter(logString => logString)
                .join(' ');
        }
    }
    /**
     *
     * @param provider check if this provider provides a VersionService
     *
     * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
     * provides VersionService. The provider is not necessarily a 'app-version'
     * provider.
     */
    function isVersionServiceProvider(provider) {
        const component = provider.getComponent();
        return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* VERSION */;
    }

    const name$o = "@firebase/app";
    const version$1 = "0.7.16";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const logger = new Logger('@firebase/app');

    const name$n = "@firebase/app-compat";

    const name$m = "@firebase/analytics-compat";

    const name$l = "@firebase/analytics";

    const name$k = "@firebase/app-check-compat";

    const name$j = "@firebase/app-check";

    const name$i = "@firebase/auth";

    const name$h = "@firebase/auth-compat";

    const name$g = "@firebase/database";

    const name$f = "@firebase/database-compat";

    const name$e = "@firebase/functions";

    const name$d = "@firebase/functions-compat";

    const name$c = "@firebase/installations";

    const name$b = "@firebase/installations-compat";

    const name$a = "@firebase/messaging";

    const name$9 = "@firebase/messaging-compat";

    const name$8 = "@firebase/performance";

    const name$7 = "@firebase/performance-compat";

    const name$6 = "@firebase/remote-config";

    const name$5 = "@firebase/remote-config-compat";

    const name$4 = "@firebase/storage";

    const name$3 = "@firebase/storage-compat";

    const name$2 = "@firebase/firestore";

    const name$1 = "@firebase/firestore-compat";

    const name$p = "firebase";
    const version$2 = "9.6.6";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The default app name
     *
     * @internal
     */
    const DEFAULT_ENTRY_NAME = '[DEFAULT]';
    const PLATFORM_LOG_STRING = {
        [name$o]: 'fire-core',
        [name$n]: 'fire-core-compat',
        [name$l]: 'fire-analytics',
        [name$m]: 'fire-analytics-compat',
        [name$j]: 'fire-app-check',
        [name$k]: 'fire-app-check-compat',
        [name$i]: 'fire-auth',
        [name$h]: 'fire-auth-compat',
        [name$g]: 'fire-rtdb',
        [name$f]: 'fire-rtdb-compat',
        [name$e]: 'fire-fn',
        [name$d]: 'fire-fn-compat',
        [name$c]: 'fire-iid',
        [name$b]: 'fire-iid-compat',
        [name$a]: 'fire-fcm',
        [name$9]: 'fire-fcm-compat',
        [name$8]: 'fire-perf',
        [name$7]: 'fire-perf-compat',
        [name$6]: 'fire-rc',
        [name$5]: 'fire-rc-compat',
        [name$4]: 'fire-gcs',
        [name$3]: 'fire-gcs-compat',
        [name$2]: 'fire-fst',
        [name$1]: 'fire-fst-compat',
        'fire-js': 'fire-js',
        [name$p]: 'fire-js-all'
    };

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @internal
     */
    const _apps = new Map();
    /**
     * Registered components.
     *
     * @internal
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const _components = new Map();
    /**
     * @param component - the component being added to this app's container
     *
     * @internal
     */
    function _addComponent(app, component) {
        try {
            app.container.addComponent(component);
        }
        catch (e) {
            logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);
        }
    }
    /**
     *
     * @param component - the component to register
     * @returns whether or not the component is registered successfully
     *
     * @internal
     */
    function _registerComponent(component) {
        const componentName = component.name;
        if (_components.has(componentName)) {
            logger.debug(`There were multiple attempts to register component ${componentName}.`);
            return false;
        }
        _components.set(componentName, component);
        // add the component to existing app instances
        for (const app of _apps.values()) {
            _addComponent(app, component);
        }
        return true;
    }
    /**
     *
     * @param app - FirebaseApp instance
     * @param name - service name
     *
     * @returns the provider for the service with the matching name
     *
     * @internal
     */
    function _getProvider(app, name) {
        return app.container.getProvider(name);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const ERRORS = {
        ["no-app" /* NO_APP */]: "No Firebase App '{$appName}' has been created - " +
            'call Firebase App.initializeApp()',
        ["bad-app-name" /* BAD_APP_NAME */]: "Illegal App name: '{$appName}",
        ["duplicate-app" /* DUPLICATE_APP */]: "Firebase App named '{$appName}' already exists with different options or config",
        ["app-deleted" /* APP_DELETED */]: "Firebase App named '{$appName}' already deleted",
        ["invalid-app-argument" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +
            'Firebase App instance.',
        ["invalid-log-argument" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.'
    };
    const ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class FirebaseAppImpl {
        constructor(options, config, container) {
            this._isDeleted = false;
            this._options = Object.assign({}, options);
            this._config = Object.assign({}, config);
            this._name = config.name;
            this._automaticDataCollectionEnabled =
                config.automaticDataCollectionEnabled;
            this._container = container;
            this.container.addComponent(new Component('app', () => this, "PUBLIC" /* PUBLIC */));
        }
        get automaticDataCollectionEnabled() {
            this.checkDestroyed();
            return this._automaticDataCollectionEnabled;
        }
        set automaticDataCollectionEnabled(val) {
            this.checkDestroyed();
            this._automaticDataCollectionEnabled = val;
        }
        get name() {
            this.checkDestroyed();
            return this._name;
        }
        get options() {
            this.checkDestroyed();
            return this._options;
        }
        get config() {
            this.checkDestroyed();
            return this._config;
        }
        get container() {
            return this._container;
        }
        get isDeleted() {
            return this._isDeleted;
        }
        set isDeleted(val) {
            this._isDeleted = val;
        }
        /**
         * This function will throw an Error if the App has already been deleted -
         * use before performing API actions on the App.
         */
        checkDestroyed() {
            if (this.isDeleted) {
                throw ERROR_FACTORY.create("app-deleted" /* APP_DELETED */, { appName: this._name });
            }
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The current SDK version.
     *
     * @public
     */
    const SDK_VERSION = version$2;
    function initializeApp(options, rawConfig = {}) {
        if (typeof rawConfig !== 'object') {
            const name = rawConfig;
            rawConfig = { name };
        }
        const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);
        const name = config.name;
        if (typeof name !== 'string' || !name) {
            throw ERROR_FACTORY.create("bad-app-name" /* BAD_APP_NAME */, {
                appName: String(name)
            });
        }
        const existingApp = _apps.get(name);
        if (existingApp) {
            // return the existing app if options and config deep equal the ones in the existing app.
            if (deepEqual(options, existingApp.options) &&
                deepEqual(config, existingApp.config)) {
                return existingApp;
            }
            else {
                throw ERROR_FACTORY.create("duplicate-app" /* DUPLICATE_APP */, { appName: name });
            }
        }
        const container = new ComponentContainer(name);
        for (const component of _components.values()) {
            container.addComponent(component);
        }
        const newApp = new FirebaseAppImpl(options, config, container);
        _apps.set(name, newApp);
        return newApp;
    }
    /**
     * Retrieves a {@link @firebase/app#FirebaseApp} instance.
     *
     * When called with no arguments, the default app is returned. When an app name
     * is provided, the app corresponding to that name is returned.
     *
     * An exception is thrown if the app being retrieved has not yet been
     * initialized.
     *
     * @example
     * ```javascript
     * // Return the default app
     * const app = getApp();
     * ```
     *
     * @example
     * ```javascript
     * // Return a named app
     * const otherApp = getApp("otherApp");
     * ```
     *
     * @param name - Optional name of the app to return. If no name is
     *   provided, the default is `"[DEFAULT]"`.
     *
     * @returns The app corresponding to the provided app name.
     *   If no app name is provided, the default app is returned.
     *
     * @public
     */
    function getApp(name = DEFAULT_ENTRY_NAME) {
        const app = _apps.get(name);
        if (!app) {
            throw ERROR_FACTORY.create("no-app" /* NO_APP */, { appName: name });
        }
        return app;
    }
    /**
     * Registers a library's name and version for platform logging purposes.
     * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)
     * @param version - Current version of that library.
     * @param variant - Bundle variant, e.g., node, rn, etc.
     *
     * @public
     */
    function registerVersion(libraryKeyOrName, version, variant) {
        var _a;
        // TODO: We can use this check to whitelist strings when/if we set up
        // a good whitelist system.
        let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
        if (variant) {
            library += `-${variant}`;
        }
        const libraryMismatch = library.match(/\s|\//);
        const versionMismatch = version.match(/\s|\//);
        if (libraryMismatch || versionMismatch) {
            const warning = [
                `Unable to register library "${library}" with version "${version}":`
            ];
            if (libraryMismatch) {
                warning.push(`library name "${library}" contains illegal characters (whitespace or "/")`);
            }
            if (libraryMismatch && versionMismatch) {
                warning.push('and');
            }
            if (versionMismatch) {
                warning.push(`version name "${version}" contains illegal characters (whitespace or "/")`);
            }
            logger.warn(warning.join(' '));
            return;
        }
        _registerComponent(new Component(`${library}-version`, () => ({ library, version }), "VERSION" /* VERSION */));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerCoreComponents(variant) {
        _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), "PRIVATE" /* PRIVATE */));
        // Register `app` package.
        registerVersion(name$o, version$1, variant);
        // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
        registerVersion(name$o, version$1, 'esm2017');
        // Register platform SDK identifier (no version).
        registerVersion('fire-js', '');
    }

    /**
     * Firebase App
     *
     * @remarks This package coordinates the communication between the different Firebase components
     * @packageDocumentation
     */
    registerCoreComponents('');

    var name = "firebase";
    var version = "9.6.6";

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    registerVersion(name, version, 'app');

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    /*

     Copyright The Closure Library Authors.
     SPDX-License-Identifier: Apache-2.0
    */
    var k$1,goog=goog||{},l=commonjsGlobal||self;function aa(){}function ba$1(a){var b=typeof a;b="object"!=b?b:a?Array.isArray(a)?"array":b:"null";return "array"==b||"object"==b&&"number"==typeof a.length}function p(a){var b=typeof a;return "object"==b&&null!=a||"function"==b}function da(a){return Object.prototype.hasOwnProperty.call(a,ea)&&a[ea]||(a[ea]=++fa)}var ea="closure_uid_"+(1E9*Math.random()>>>0),fa=0;function ha(a,b,c){return a.call.apply(a.bind,arguments)}
    function ia(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var e=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(e,d);return a.apply(b,e)}}return function(){return a.apply(b,arguments)}}function q(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?q=ha:q=ia;return q.apply(null,arguments)}
    function ja(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var d=c.slice();d.push.apply(d,arguments);return a.apply(this,d)}}function t(a,b){function c(){}c.prototype=b.prototype;a.Z=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Vb=function(d,e,f){for(var h=Array(arguments.length-2),n=2;n<arguments.length;n++)h[n-2]=arguments[n];return b.prototype[e].apply(d,h)};}function v(){this.s=this.s;this.o=this.o;}var ka=0,la={};v.prototype.s=!1;v.prototype.na=function(){if(!this.s&&(this.s=!0,this.M(),0!=ka)){var a=da(this);delete la[a];}};v.prototype.M=function(){if(this.o)for(;this.o.length;)this.o.shift()();};const ma$1=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if("string"===typeof a)return "string"!==typeof b||1!=b.length?-1:a.indexOf(b,0);for(let c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return -1},na$1=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c);}:function(a,b,c){const d=a.length,e="string"===typeof a?a.split(""):a;for(let f=0;f<d;f++)f in e&&b.call(c,e[f],f,a);};
    function oa(a){a:{var b=pa$1;const c=a.length,d="string"===typeof a?a.split(""):a;for(let e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1;}return 0>b?null:"string"===typeof a?a.charAt(b):a[b]}function qa$1(a){return Array.prototype.concat.apply([],arguments)}function ra(a){const b=a.length;if(0<b){const c=Array(b);for(let d=0;d<b;d++)c[d]=a[d];return c}return []}function sa$1(a){return /^[\s\xa0]*$/.test(a)}var ta=String.prototype.trim?function(a){return a.trim()}:function(a){return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]};function w(a,b){return -1!=a.indexOf(b)}function ua$1(a,b){return a<b?-1:a>b?1:0}var x$1;a:{var va$1=l.navigator;if(va$1){var wa$1=va$1.userAgent;if(wa$1){x$1=wa$1;break a}}x$1="";}function xa(a,b,c){for(const d in a)b.call(c,a[d],d,a);}function ya$1(a){const b={};for(const c in a)b[c]=a[c];return b}var za="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function Aa$1(a,b){let c,d;for(let e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(let f=0;f<za.length;f++)c=za[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c]);}}function Ca(a){Ca[" "](a);return a}Ca[" "]=aa;function Fa(a){var b=Ga;return Object.prototype.hasOwnProperty.call(b,9)?b[9]:b[9]=a(9)}var Ha=w(x$1,"Opera"),y=w(x$1,"Trident")||w(x$1,"MSIE"),Ia$1=w(x$1,"Edge"),Ja=Ia$1||y,Ka$1=w(x$1,"Gecko")&&!(w(x$1.toLowerCase(),"webkit")&&!w(x$1,"Edge"))&&!(w(x$1,"Trident")||w(x$1,"MSIE"))&&!w(x$1,"Edge"),La$1=w(x$1.toLowerCase(),"webkit")&&!w(x$1,"Edge");function Ma(){var a=l.document;return a?a.documentMode:void 0}var Na$1;
    a:{var Oa$1="",Pa=function(){var a=x$1;if(Ka$1)return /rv:([^\);]+)(\)|;)/.exec(a);if(Ia$1)return /Edge\/([\d\.]+)/.exec(a);if(y)return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(La$1)return /WebKit\/(\S+)/.exec(a);if(Ha)return /(?:Version)[ \/]?(\S+)/.exec(a)}();Pa&&(Oa$1=Pa?Pa[1]:"");if(y){var Qa=Ma();if(null!=Qa&&Qa>parseFloat(Oa$1)){Na$1=String(Qa);break a}}Na$1=Oa$1;}var Ga={};
    function Ra$1(){return Fa(function(){let a=0;const b=ta(String(Na$1)).split("."),c=ta("9").split("."),d=Math.max(b.length,c.length);for(let h=0;0==a&&h<d;h++){var e=b[h]||"",f=c[h]||"";do{e=/(\d*)(\D*)(.*)/.exec(e)||["","","",""];f=/(\d*)(\D*)(.*)/.exec(f)||["","","",""];if(0==e[0].length&&0==f[0].length)break;a=ua$1(0==e[1].length?0:parseInt(e[1],10),0==f[1].length?0:parseInt(f[1],10))||ua$1(0==e[2].length,0==f[2].length)||ua$1(e[2],f[2]);e=e[3];f=f[3];}while(0==a)}return 0<=a})}var Sa$1;
    if(l.document&&y){var Ta$1=Ma();Sa$1=Ta$1?Ta$1:parseInt(Na$1,10)||void 0;}else Sa$1=void 0;var Ua$1=Sa$1;var Va$1=function(){if(!l.addEventListener||!Object.defineProperty)return !1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0;}});try{l.addEventListener("test",aa,b),l.removeEventListener("test",aa,b);}catch(c){}return a}();function z$1(a,b){this.type=a;this.g=this.target=b;this.defaultPrevented=!1;}z$1.prototype.h=function(){this.defaultPrevented=!0;};function A(a,b){z$1.call(this,a?a.type:"");this.relatedTarget=this.g=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.state=null;this.pointerId=0;this.pointerType="";this.i=null;if(a){var c=this.type=a.type,d=a.changedTouches&&a.changedTouches.length?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.g=b;if(b=a.relatedTarget){if(Ka$1){a:{try{Ca(b.nodeName);var e=!0;break a}catch(f){}e=
    !1;}e||(b=null);}}else "mouseover"==c?b=a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;d?(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0):(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=
    a.shiftKey;this.metaKey=a.metaKey;this.pointerId=a.pointerId||0;this.pointerType="string"===typeof a.pointerType?a.pointerType:Wa[a.pointerType]||"";this.state=a.state;this.i=a;a.defaultPrevented&&A.Z.h.call(this);}}t(A,z$1);var Wa={2:"touch",3:"pen",4:"mouse"};A.prototype.h=function(){A.Z.h.call(this);var a=this.i;a.preventDefault?a.preventDefault():a.returnValue=!1;};var B$1="closure_listenable_"+(1E6*Math.random()|0);var Xa=0;function Ya(a,b,c,d,e){this.listener=a;this.proxy=null;this.src=b;this.type=c;this.capture=!!d;this.ia=e;this.key=++Xa;this.ca=this.fa=!1;}function Za(a){a.ca=!0;a.listener=null;a.proxy=null;a.src=null;a.ia=null;}function $a$1(a){this.src=a;this.g={};this.h=0;}$a$1.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.g[f];a||(a=this.g[f]=[],this.h++);var h=ab(a,b,d,e);-1<h?(b=a[h],c||(b.fa=!1)):(b=new Ya(b,this.src,f,!!d,e),b.fa=c,a.push(b));return b};function bb(a,b){var c=b.type;if(c in a.g){var d=a.g[c],e=ma$1(d,b),f;(f=0<=e)&&Array.prototype.splice.call(d,e,1);f&&(Za(b),0==a.g[c].length&&(delete a.g[c],a.h--));}}
    function ab(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.ca&&f.listener==b&&f.capture==!!c&&f.ia==d)return e}return -1}var cb="closure_lm_"+(1E6*Math.random()|0),db$1={};function fb(a,b,c,d,e){if(d&&d.once)return gb(a,b,c,d,e);if(Array.isArray(b)){for(var f=0;f<b.length;f++)fb(a,b[f],c,d,e);return null}c=hb(c);return a&&a[B$1]?a.N(b,c,p(d)?!!d.capture:!!d,e):ib(a,b,c,!1,d,e)}
    function ib(a,b,c,d,e,f){if(!b)throw Error("Invalid event type");var h=p(e)?!!e.capture:!!e,n=jb(a);n||(a[cb]=n=new $a$1(a));c=n.add(b,c,d,h,f);if(c.proxy)return c;d=kb();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)Va$1||(e=h),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(lb(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");return c}
    function kb(){function a(c){return b.call(a.src,a.listener,c)}var b=mb;return a}function gb(a,b,c,d,e){if(Array.isArray(b)){for(var f=0;f<b.length;f++)gb(a,b[f],c,d,e);return null}c=hb(c);return a&&a[B$1]?a.O(b,c,p(d)?!!d.capture:!!d,e):ib(a,b,c,!0,d,e)}
    function nb(a,b,c,d,e){if(Array.isArray(b))for(var f=0;f<b.length;f++)nb(a,b[f],c,d,e);else (d=p(d)?!!d.capture:!!d,c=hb(c),a&&a[B$1])?(a=a.i,b=String(b).toString(),b in a.g&&(f=a.g[b],c=ab(f,c,d,e),-1<c&&(Za(f[c]),Array.prototype.splice.call(f,c,1),0==f.length&&(delete a.g[b],a.h--)))):a&&(a=jb(a))&&(b=a.g[b.toString()],a=-1,b&&(a=ab(b,c,d,e)),(c=-1<a?b[a]:null)&&ob(c));}
    function ob(a){if("number"!==typeof a&&a&&!a.ca){var b=a.src;if(b&&b[B$1])bb(b.i,a);else {var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(lb(c),d):b.addListener&&b.removeListener&&b.removeListener(d);(c=jb(b))?(bb(c,a),0==c.h&&(c.src=null,b[cb]=null)):Za(a);}}}function lb(a){return a in db$1?db$1[a]:db$1[a]="on"+a}function mb(a,b){if(a.ca)a=!0;else {b=new A(b,this);var c=a.listener,d=a.ia||a.src;a.fa&&ob(a);a=c.call(d,b);}return a}
    function jb(a){a=a[cb];return a instanceof $a$1?a:null}var pb="__closure_events_fn_"+(1E9*Math.random()>>>0);function hb(a){if("function"===typeof a)return a;a[pb]||(a[pb]=function(b){return a.handleEvent(b)});return a[pb]}function C$1(){v.call(this);this.i=new $a$1(this);this.P=this;this.I=null;}t(C$1,v);C$1.prototype[B$1]=!0;C$1.prototype.removeEventListener=function(a,b,c,d){nb(this,a,b,c,d);};
    function D$1(a,b){var c,d=a.I;if(d)for(c=[];d;d=d.I)c.push(d);a=a.P;d=b.type||b;if("string"===typeof b)b=new z$1(b,a);else if(b instanceof z$1)b.target=b.target||a;else {var e=b;b=new z$1(d,a);Aa$1(b,e);}e=!0;if(c)for(var f=c.length-1;0<=f;f--){var h=b.g=c[f];e=qb(h,d,!0,b)&&e;}h=b.g=a;e=qb(h,d,!0,b)&&e;e=qb(h,d,!1,b)&&e;if(c)for(f=0;f<c.length;f++)h=b.g=c[f],e=qb(h,d,!1,b)&&e;}
    C$1.prototype.M=function(){C$1.Z.M.call(this);if(this.i){var a=this.i,c;for(c in a.g){for(var d=a.g[c],e=0;e<d.length;e++)Za(d[e]);delete a.g[c];a.h--;}}this.I=null;};C$1.prototype.N=function(a,b,c,d){return this.i.add(String(a),b,!1,c,d)};C$1.prototype.O=function(a,b,c,d){return this.i.add(String(a),b,!0,c,d)};
    function qb(a,b,c,d){b=a.i.g[String(b)];if(!b)return !0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var h=b[f];if(h&&!h.ca&&h.capture==c){var n=h.listener,u=h.ia||h.src;h.fa&&bb(a.i,h);e=!1!==n.call(u,d)&&e;}}return e&&!d.defaultPrevented}var rb=l.JSON.stringify;function sb(){var a=tb;let b=null;a.g&&(b=a.g,a.g=a.g.next,a.g||(a.h=null),b.next=null);return b}class ub{constructor(){this.h=this.g=null;}add(a,b){const c=vb.get();c.set(a,b);this.h?this.h.next=c:this.g=c;this.h=c;}}var vb=new class{constructor(a,b){this.i=a;this.j=b;this.h=0;this.g=null;}get(){let a;0<this.h?(this.h--,a=this.g,this.g=a.next,a.next=null):a=this.i();return a}}(()=>new wb,a=>a.reset());
    class wb{constructor(){this.next=this.g=this.h=null;}set(a,b){this.h=a;this.g=b;this.next=null;}reset(){this.next=this.g=this.h=null;}}function yb(a){l.setTimeout(()=>{throw a;},0);}function zb(a,b){Ab||Bb();Cb||(Ab(),Cb=!0);tb.add(a,b);}var Ab;function Bb(){var a=l.Promise.resolve(void 0);Ab=function(){a.then(Db);};}var Cb=!1,tb=new ub;function Db(){for(var a;a=sb();){try{a.h.call(a.g);}catch(c){yb(c);}var b=vb;b.j(a);100>b.h&&(b.h++,a.next=b.g,b.g=a);}Cb=!1;}function Eb(a,b){C$1.call(this);this.h=a||1;this.g=b||l;this.j=q(this.kb,this);this.l=Date.now();}t(Eb,C$1);k$1=Eb.prototype;k$1.da=!1;k$1.S=null;k$1.kb=function(){if(this.da){var a=Date.now()-this.l;0<a&&a<.8*this.h?this.S=this.g.setTimeout(this.j,this.h-a):(this.S&&(this.g.clearTimeout(this.S),this.S=null),D$1(this,"tick"),this.da&&(Fb(this),this.start()));}};k$1.start=function(){this.da=!0;this.S||(this.S=this.g.setTimeout(this.j,this.h),this.l=Date.now());};
    function Fb(a){a.da=!1;a.S&&(a.g.clearTimeout(a.S),a.S=null);}k$1.M=function(){Eb.Z.M.call(this);Fb(this);delete this.g;};function Gb(a,b,c){if("function"===typeof a)c&&(a=q(a,c));else if(a&&"function"==typeof a.handleEvent)a=q(a.handleEvent,a);else throw Error("Invalid listener argument");return 2147483647<Number(b)?-1:l.setTimeout(a,b||0)}function Hb(a){a.g=Gb(()=>{a.g=null;a.i&&(a.i=!1,Hb(a));},a.j);const b=a.h;a.h=null;a.m.apply(null,b);}class Ib extends v{constructor(a,b){super();this.m=a;this.j=b;this.h=null;this.i=!1;this.g=null;}l(a){this.h=arguments;this.g?this.i=!0:Hb(this);}M(){super.M();this.g&&(l.clearTimeout(this.g),this.g=null,this.i=!1,this.h=null);}}function E(a){v.call(this);this.h=a;this.g={};}t(E,v);var Jb=[];function Kb(a,b,c,d){Array.isArray(c)||(c&&(Jb[0]=c.toString()),c=Jb);for(var e=0;e<c.length;e++){var f=fb(b,c[e],d||a.handleEvent,!1,a.h||a);if(!f)break;a.g[f.key]=f;}}function Lb(a){xa(a.g,function(b,c){this.g.hasOwnProperty(c)&&ob(b);},a);a.g={};}E.prototype.M=function(){E.Z.M.call(this);Lb(this);};E.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented");};function Mb(){this.g=!0;}Mb.prototype.Aa=function(){this.g=!1;};function Nb(a,b,c,d,e,f){a.info(function(){if(a.g)if(f){var h="";for(var n=f.split("&"),u=0;u<n.length;u++){var m=n[u].split("=");if(1<m.length){var r=m[0];m=m[1];var G=r.split("_");h=2<=G.length&&"type"==G[1]?h+(r+"="+m+"&"):h+(r+"=redacted&");}}}else h=null;else h=f;return "XMLHTTP REQ ("+d+") [attempt "+e+"]: "+b+"\n"+c+"\n"+h});}
    function Ob(a,b,c,d,e,f,h){a.info(function(){return "XMLHTTP RESP ("+d+") [ attempt "+e+"]: "+b+"\n"+c+"\n"+f+" "+h});}function F$1(a,b,c,d){a.info(function(){return "XMLHTTP TEXT ("+b+"): "+Pb(a,c)+(d?" "+d:"")});}function Qb(a,b){a.info(function(){return "TIMEOUT: "+b});}Mb.prototype.info=function(){};
    function Pb(a,b){if(!a.g)return b;if(!b)return null;try{var c=JSON.parse(b);if(c)for(a=0;a<c.length;a++)if(Array.isArray(c[a])){var d=c[a];if(!(2>d.length)){var e=d[1];if(Array.isArray(e)&&!(1>e.length)){var f=e[0];if("noop"!=f&&"stop"!=f&&"close"!=f)for(var h=1;h<e.length;h++)e[h]="";}}}return rb(c)}catch(n){return b}}var H={},Rb=null;function Sb(){return Rb=Rb||new C$1}H.Ma="serverreachability";function Tb(a){z$1.call(this,H.Ma,a);}t(Tb,z$1);function I(a){const b=Sb();D$1(b,new Tb(b,a));}H.STAT_EVENT="statevent";function Ub(a,b){z$1.call(this,H.STAT_EVENT,a);this.stat=b;}t(Ub,z$1);function J$1(a){const b=Sb();D$1(b,new Ub(b,a));}H.Na="timingevent";function Vb(a,b){z$1.call(this,H.Na,a);this.size=b;}t(Vb,z$1);
    function K$1(a,b){if("function"!==typeof a)throw Error("Fn must not be null and must be a function");return l.setTimeout(function(){a();},b)}var Wb={NO_ERROR:0,lb:1,yb:2,xb:3,sb:4,wb:5,zb:6,Ja:7,TIMEOUT:8,Cb:9};var Xb={qb:"complete",Mb:"success",Ka:"error",Ja:"abort",Eb:"ready",Fb:"readystatechange",TIMEOUT:"timeout",Ab:"incrementaldata",Db:"progress",tb:"downloadprogress",Ub:"uploadprogress"};function Yb(){}Yb.prototype.h=null;function Zb(a){return a.h||(a.h=a.i())}function $b(){}var L$1={OPEN:"a",pb:"b",Ka:"c",Bb:"d"};function ac$1(){z$1.call(this,"d");}t(ac$1,z$1);function bc$1(){z$1.call(this,"c");}t(bc$1,z$1);var cc$1;function dc$1(){}t(dc$1,Yb);dc$1.prototype.g=function(){return new XMLHttpRequest};dc$1.prototype.i=function(){return {}};cc$1=new dc$1;function M$1(a,b,c,d){this.l=a;this.j=b;this.m=c;this.X=d||1;this.V=new E(this);this.P=ec$1;a=Ja?125:void 0;this.W=new Eb(a);this.H=null;this.i=!1;this.s=this.A=this.v=this.K=this.F=this.Y=this.B=null;this.D=[];this.g=null;this.C=0;this.o=this.u=null;this.N=-1;this.I=!1;this.O=0;this.L=null;this.aa=this.J=this.$=this.U=!1;this.h=new fc$1;}function fc$1(){this.i=null;this.g="";this.h=!1;}var ec$1=45E3,gc$1={},hc$1={};k$1=M$1.prototype;k$1.setTimeout=function(a){this.P=a;};
    function ic$1(a,b,c){a.K=1;a.v=jc$1(N$1(b));a.s=c;a.U=!0;kc(a,null);}function kc(a,b){a.F=Date.now();lc$1(a);a.A=N$1(a.v);var c=a.A,d=a.X;Array.isArray(d)||(d=[String(d)]);mc(c.h,"t",d);a.C=0;c=a.l.H;a.h=new fc$1;a.g=nc$1(a.l,c?b:null,!a.s);0<a.O&&(a.L=new Ib(q(a.Ia,a,a.g),a.O));Kb(a.V,a.g,"readystatechange",a.gb);b=a.H?ya$1(a.H):{};a.s?(a.u||(a.u="POST"),b["Content-Type"]="application/x-www-form-urlencoded",a.g.ea(a.A,a.u,a.s,b)):(a.u="GET",a.g.ea(a.A,a.u,null,b));I(1);Nb(a.j,a.u,a.A,a.m,a.X,a.s);}
    k$1.gb=function(a){a=a.target;const b=this.L;b&&3==O$1(a)?b.l():this.Ia(a);};
    k$1.Ia=function(a){try{if(a==this.g)a:{const r=O$1(this.g);var b=this.g.Da();const G=this.g.ba();if(!(3>r)&&(3!=r||Ja||this.g&&(this.h.h||this.g.ga()||oc$1(this.g)))){this.I||4!=r||7==b||(8==b||0>=G?I(3):I(2));pc$1(this);var c=this.g.ba();this.N=c;b:if(qc$1(this)){var d=oc$1(this.g);a="";var e=d.length,f=4==O$1(this.g);if(!this.h.i){if("undefined"===typeof TextDecoder){P(this);rc$1(this);var h="";break b}this.h.i=new l.TextDecoder;}for(b=0;b<e;b++)this.h.h=!0,a+=this.h.i.decode(d[b],{stream:f&&b==e-1});d.splice(0,
    e);this.h.g+=a;this.C=0;h=this.h.g;}else h=this.g.ga();this.i=200==c;Ob(this.j,this.u,this.A,this.m,this.X,r,c);if(this.i){if(this.$&&!this.J){b:{if(this.g){var n,u=this.g;if((n=u.g?u.g.getResponseHeader("X-HTTP-Initial-Response"):null)&&!sa$1(n)){var m=n;break b}}m=null;}if(c=m)F$1(this.j,this.m,c,"Initial handshake response via X-HTTP-Initial-Response"),this.J=!0,sc$1(this,c);else {this.i=!1;this.o=3;J$1(12);P(this);rc$1(this);break a}}this.U?(tc(this,r,h),Ja&&this.i&&3==r&&(Kb(this.V,this.W,"tick",this.fb),
    this.W.start())):(F$1(this.j,this.m,h,null),sc$1(this,h));4==r&&P(this);this.i&&!this.I&&(4==r?uc$1(this.l,this):(this.i=!1,lc$1(this)));}else 400==c&&0<h.indexOf("Unknown SID")?(this.o=3,J$1(12)):(this.o=0,J$1(13)),P(this),rc$1(this);}}}catch(r){}finally{}};function qc$1(a){return a.g?"GET"==a.u&&2!=a.K&&a.l.Ba:!1}
    function tc(a,b,c){let d=!0,e;for(;!a.I&&a.C<c.length;)if(e=vc(a,c),e==hc$1){4==b&&(a.o=4,J$1(14),d=!1);F$1(a.j,a.m,null,"[Incomplete Response]");break}else if(e==gc$1){a.o=4;J$1(15);F$1(a.j,a.m,c,"[Invalid Chunk]");d=!1;break}else F$1(a.j,a.m,e,null),sc$1(a,e);qc$1(a)&&e!=hc$1&&e!=gc$1&&(a.h.g="",a.C=0);4!=b||0!=c.length||a.h.h||(a.o=1,J$1(16),d=!1);a.i=a.i&&d;d?0<c.length&&!a.aa&&(a.aa=!0,b=a.l,b.g==a&&b.$&&!b.L&&(b.h.info("Great, no buffering proxy detected. Bytes received: "+c.length),wc$1(b),b.L=!0,J$1(11))):(F$1(a.j,a.m,
    c,"[Invalid Chunked Response]"),P(a),rc$1(a));}k$1.fb=function(){if(this.g){var a=O$1(this.g),b=this.g.ga();this.C<b.length&&(pc$1(this),tc(this,a,b),this.i&&4!=a&&lc$1(this));}};function vc(a,b){var c=a.C,d=b.indexOf("\n",c);if(-1==d)return hc$1;c=Number(b.substring(c,d));if(isNaN(c))return gc$1;d+=1;if(d+c>b.length)return hc$1;b=b.substr(d,c);a.C=d+c;return b}k$1.cancel=function(){this.I=!0;P(this);};function lc$1(a){a.Y=Date.now()+a.P;xc(a,a.P);}
    function xc(a,b){if(null!=a.B)throw Error("WatchDog timer not null");a.B=K$1(q(a.eb,a),b);}function pc$1(a){a.B&&(l.clearTimeout(a.B),a.B=null);}k$1.eb=function(){this.B=null;const a=Date.now();0<=a-this.Y?(Qb(this.j,this.A),2!=this.K&&(I(3),J$1(17)),P(this),this.o=2,rc$1(this)):xc(this,this.Y-a);};function rc$1(a){0==a.l.G||a.I||uc$1(a.l,a);}function P(a){pc$1(a);var b=a.L;b&&"function"==typeof b.na&&b.na();a.L=null;Fb(a.W);Lb(a.V);a.g&&(b=a.g,a.g=null,b.abort(),b.na());}
    function sc$1(a,b){try{var c=a.l;if(0!=c.G&&(c.g==a||yc$1(c.i,a)))if(c.I=a.N,!a.J&&yc$1(c.i,a)&&3==c.G){try{var d=c.Ca.g.parse(b);}catch(m){d=null;}if(Array.isArray(d)&&3==d.length){var e=d;if(0==e[0])a:{if(!c.u){if(c.g)if(c.g.F+3E3<a.F)zc$1(c),Ac$1(c);else break a;Bc(c);J$1(18);}}else c.ta=e[1],0<c.ta-c.U&&37500>e[2]&&c.N&&0==c.A&&!c.v&&(c.v=K$1(q(c.ab,c),6E3));if(1>=Cc(c.i)&&c.ka){try{c.ka();}catch(m){}c.ka=void 0;}}else Q$1(c,11);}else if((a.J||c.g==a)&&zc$1(c),!sa$1(b))for(e=c.Ca.g.parse(b),b=0;b<e.length;b++){let m=e[b];
    c.U=m[0];m=m[1];if(2==c.G)if("c"==m[0]){c.J=m[1];c.la=m[2];const r=m[3];null!=r&&(c.ma=r,c.h.info("VER="+c.ma));const G=m[4];null!=G&&(c.za=G,c.h.info("SVER="+c.za));const Da=m[5];null!=Da&&"number"===typeof Da&&0<Da&&(d=1.5*Da,c.K=d,c.h.info("backChannelRequestTimeoutMs_="+d));d=c;const ca=a.g;if(ca){const Ea=ca.g?ca.g.getResponseHeader("X-Client-Wire-Protocol"):null;if(Ea){var f=d.i;!f.g&&(w(Ea,"spdy")||w(Ea,"quic")||w(Ea,"h2"))&&(f.j=f.l,f.g=new Set,f.h&&(Dc(f,f.h),f.h=null));}if(d.D){const xb=
    ca.g?ca.g.getResponseHeader("X-HTTP-Session-Id"):null;xb&&(d.sa=xb,R(d.F,d.D,xb));}}c.G=3;c.j&&c.j.xa();c.$&&(c.O=Date.now()-a.F,c.h.info("Handshake RTT: "+c.O+"ms"));d=c;var h=a;d.oa=Ec$1(d,d.H?d.la:null,d.W);if(h.J){Fc(d.i,h);var n=h,u=d.K;u&&n.setTimeout(u);n.B&&(pc$1(n),lc$1(n));d.g=h;}else Gc(d);0<c.l.length&&Hc$1(c);}else "stop"!=m[0]&&"close"!=m[0]||Q$1(c,7);else 3==c.G&&("stop"==m[0]||"close"==m[0]?"stop"==m[0]?Q$1(c,7):Ic$1(c):"noop"!=m[0]&&c.j&&c.j.wa(m),c.A=0);}I(4);}catch(m){}}function Jc$1(a){if(a.R&&"function"==typeof a.R)return a.R();if("string"===typeof a)return a.split("");if(ba$1(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}b=[];c=0;for(d in a)b[c++]=a[d];return b}
    function Kc(a,b){if(a.forEach&&"function"==typeof a.forEach)a.forEach(b,void 0);else if(ba$1(a)||"string"===typeof a)na$1(a,b,void 0);else {if(a.T&&"function"==typeof a.T)var c=a.T();else if(a.R&&"function"==typeof a.R)c=void 0;else if(ba$1(a)||"string"===typeof a){c=[];for(var d=a.length,e=0;e<d;e++)c.push(e);}else for(e in c=[],d=0,a)c[d++]=e;d=Jc$1(a);e=d.length;for(var f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a);}}function S(a,b){this.h={};this.g=[];this.i=0;var c=arguments.length;if(1<c){if(c%2)throw Error("Uneven number of arguments");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1]);}else if(a)if(a instanceof S)for(c=a.T(),d=0;d<c.length;d++)this.set(c[d],a.get(c[d]));else for(d in a)this.set(d,a[d]);}k$1=S.prototype;k$1.R=function(){Lc$1(this);for(var a=[],b=0;b<this.g.length;b++)a.push(this.h[this.g[b]]);return a};k$1.T=function(){Lc$1(this);return this.g.concat()};
    function Lc$1(a){if(a.i!=a.g.length){for(var b=0,c=0;b<a.g.length;){var d=a.g[b];T(a.h,d)&&(a.g[c++]=d);b++;}a.g.length=c;}if(a.i!=a.g.length){var e={};for(c=b=0;b<a.g.length;)d=a.g[b],T(e,d)||(a.g[c++]=d,e[d]=1),b++;a.g.length=c;}}k$1.get=function(a,b){return T(this.h,a)?this.h[a]:b};k$1.set=function(a,b){T(this.h,a)||(this.i++,this.g.push(a));this.h[a]=b;};k$1.forEach=function(a,b){for(var c=this.T(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this);}};
    function T(a,b){return Object.prototype.hasOwnProperty.call(a,b)}var Mc$1=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Nc(a,b){if(a){a=a.split("&");for(var c=0;c<a.length;c++){var d=a[c].indexOf("="),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1);}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\+/g," ")):"");}}}function U$1(a,b){this.i=this.s=this.j="";this.m=null;this.o=this.l="";this.g=!1;if(a instanceof U$1){this.g=void 0!==b?b:a.g;Oc$1(this,a.j);this.s=a.s;Pc$1(this,a.i);Qc(this,a.m);this.l=a.l;b=a.h;var c=new Rc$1;c.i=b.i;b.g&&(c.g=new S(b.g),c.h=b.h);Sc(this,c);this.o=a.o;}else a&&(c=String(a).match(Mc$1))?(this.g=!!b,Oc$1(this,c[1]||"",!0),this.s=Tc$1(c[2]||""),Pc$1(this,c[3]||"",!0),Qc(this,c[4]),this.l=Tc$1(c[5]||"",!0),Sc(this,c[6]||"",!0),this.o=Tc$1(c[7]||"")):(this.g=!!b,this.h=new Rc$1(null,this.g));}
    U$1.prototype.toString=function(){var a=[],b=this.j;b&&a.push(Uc(b,Vc,!0),":");var c=this.i;if(c||"file"==b)a.push("//"),(b=this.s)&&a.push(Uc(b,Vc,!0),"@"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),c=this.m,null!=c&&a.push(":",String(c));if(c=this.l)this.i&&"/"!=c.charAt(0)&&a.push("/"),a.push(Uc(c,"/"==c.charAt(0)?Wc:Xc$1,!0));(c=this.h.toString())&&a.push("?",c);(c=this.o)&&a.push("#",Uc(c,Yc$1));return a.join("")};function N$1(a){return new U$1(a)}
    function Oc$1(a,b,c){a.j=c?Tc$1(b,!0):b;a.j&&(a.j=a.j.replace(/:$/,""));}function Pc$1(a,b,c){a.i=c?Tc$1(b,!0):b;}function Qc(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error("Bad port number "+b);a.m=b;}else a.m=null;}function Sc(a,b,c){b instanceof Rc$1?(a.h=b,Zc(a.h,a.g)):(c||(b=Uc(b,$c)),a.h=new Rc$1(b,a.g));}function R(a,b,c){a.h.set(b,c);}function jc$1(a){R(a,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^Date.now()).toString(36));return a}
    function ad(a){return a instanceof U$1?N$1(a):new U$1(a,void 0)}function bd(a,b,c,d){var e=new U$1(null,void 0);a&&Oc$1(e,a);b&&Pc$1(e,b);c&&Qc(e,c);d&&(e.l=d);return e}function Tc$1(a,b){return a?b?decodeURI(a.replace(/%25/g,"%2525")):decodeURIComponent(a):""}function Uc(a,b,c){return "string"===typeof a?(a=encodeURI(a).replace(b,cd),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),a):null}function cd(a){a=a.charCodeAt(0);return "%"+(a>>4&15).toString(16)+(a&15).toString(16)}
    var Vc=/[#\/\?@]/g,Xc$1=/[#\?:]/g,Wc=/[#\?]/g,$c=/[#\?@]/g,Yc$1=/#/g;function Rc$1(a,b){this.h=this.g=null;this.i=a||null;this.j=!!b;}function V(a){a.g||(a.g=new S,a.h=0,a.i&&Nc(a.i,function(b,c){a.add(decodeURIComponent(b.replace(/\+/g," ")),c);}));}k$1=Rc$1.prototype;k$1.add=function(a,b){V(this);this.i=null;a=W$1(this,a);var c=this.g.get(a);c||this.g.set(a,c=[]);c.push(b);this.h+=1;return this};
    function dd(a,b){V(a);b=W$1(a,b);T(a.g.h,b)&&(a.i=null,a.h-=a.g.get(b).length,a=a.g,T(a.h,b)&&(delete a.h[b],a.i--,a.g.length>2*a.i&&Lc$1(a)));}function ed(a,b){V(a);b=W$1(a,b);return T(a.g.h,b)}k$1.forEach=function(a,b){V(this);this.g.forEach(function(c,d){na$1(c,function(e){a.call(b,e,d,this);},this);},this);};k$1.T=function(){V(this);for(var a=this.g.R(),b=this.g.T(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};
    k$1.R=function(a){V(this);var b=[];if("string"===typeof a)ed(this,a)&&(b=qa$1(b,this.g.get(W$1(this,a))));else {a=this.g.R();for(var c=0;c<a.length;c++)b=qa$1(b,a[c]);}return b};k$1.set=function(a,b){V(this);this.i=null;a=W$1(this,a);ed(this,a)&&(this.h-=this.g.get(a).length);this.g.set(a,[b]);this.h+=1;return this};k$1.get=function(a,b){if(!a)return b;a=this.R(a);return 0<a.length?String(a[0]):b};function mc(a,b,c){dd(a,b);0<c.length&&(a.i=null,a.g.set(W$1(a,b),ra(c)),a.h+=c.length);}
    k$1.toString=function(){if(this.i)return this.i;if(!this.g)return "";for(var a=[],b=this.g.T(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.R(d);for(var f=0;f<d.length;f++){var h=e;""!==d[f]&&(h+="="+encodeURIComponent(String(d[f])));a.push(h);}}return this.i=a.join("&")};function W$1(a,b){b=String(b);a.j&&(b=b.toLowerCase());return b}function Zc(a,b){b&&!a.j&&(V(a),a.i=null,a.g.forEach(function(c,d){var e=d.toLowerCase();d!=e&&(dd(this,d),mc(this,e,c));},a));a.j=b;}var fd=class{constructor(a,b){this.h=a;this.g=b;}};function gd(a){this.l=a||hd;l.PerformanceNavigationTiming?(a=l.performance.getEntriesByType("navigation"),a=0<a.length&&("hq"==a[0].nextHopProtocol||"h2"==a[0].nextHopProtocol)):a=!!(l.g&&l.g.Ea&&l.g.Ea()&&l.g.Ea().Zb);this.j=a?this.l:1;this.g=null;1<this.j&&(this.g=new Set);this.h=null;this.i=[];}var hd=10;function id(a){return a.h?!0:a.g?a.g.size>=a.j:!1}function Cc(a){return a.h?1:a.g?a.g.size:0}function yc$1(a,b){return a.h?a.h==b:a.g?a.g.has(b):!1}function Dc(a,b){a.g?a.g.add(b):a.h=b;}
    function Fc(a,b){a.h&&a.h==b?a.h=null:a.g&&a.g.has(b)&&a.g.delete(b);}gd.prototype.cancel=function(){this.i=jd(this);if(this.h)this.h.cancel(),this.h=null;else if(this.g&&0!==this.g.size){for(const a of this.g.values())a.cancel();this.g.clear();}};function jd(a){if(null!=a.h)return a.i.concat(a.h.D);if(null!=a.g&&0!==a.g.size){let b=a.i;for(const c of a.g.values())b=b.concat(c.D);return b}return ra(a.i)}function kd(){}kd.prototype.stringify=function(a){return l.JSON.stringify(a,void 0)};kd.prototype.parse=function(a){return l.JSON.parse(a,void 0)};function ld(){this.g=new kd;}function md(a,b,c){const d=c||"";try{Kc(a,function(e,f){let h=e;p(e)&&(h=rb(e));b.push(d+f+"="+encodeURIComponent(h));});}catch(e){throw b.push(d+"type="+encodeURIComponent("_badmap")),e;}}function nd(a,b){const c=new Mb;if(l.Image){const d=new Image;d.onload=ja(od,c,d,"TestLoadImage: loaded",!0,b);d.onerror=ja(od,c,d,"TestLoadImage: error",!1,b);d.onabort=ja(od,c,d,"TestLoadImage: abort",!1,b);d.ontimeout=ja(od,c,d,"TestLoadImage: timeout",!1,b);l.setTimeout(function(){if(d.ontimeout)d.ontimeout();},1E4);d.src=a;}else b(!1);}function od(a,b,c,d,e){try{b.onload=null,b.onerror=null,b.onabort=null,b.ontimeout=null,e(d);}catch(f){}}function pd(a){this.l=a.$b||null;this.j=a.ib||!1;}t(pd,Yb);pd.prototype.g=function(){return new qd(this.l,this.j)};pd.prototype.i=function(a){return function(){return a}}({});function qd(a,b){C$1.call(this);this.D=a;this.u=b;this.m=void 0;this.readyState=rd;this.status=0;this.responseType=this.responseText=this.response=this.statusText="";this.onreadystatechange=null;this.v=new Headers;this.h=null;this.C="GET";this.B="";this.g=!1;this.A=this.j=this.l=null;}t(qd,C$1);var rd=0;k$1=qd.prototype;
    k$1.open=function(a,b){if(this.readyState!=rd)throw this.abort(),Error("Error reopening a connection");this.C=a;this.B=b;this.readyState=1;sd(this);};k$1.send=function(a){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.g=!0;const b={headers:this.v,method:this.C,credentials:this.m,cache:void 0};a&&(b.body=a);(this.D||l).fetch(new Request(this.B,b)).then(this.Va.bind(this),this.ha.bind(this));};
    k$1.abort=function(){this.response=this.responseText="";this.v=new Headers;this.status=0;this.j&&this.j.cancel("Request was aborted.");1<=this.readyState&&this.g&&4!=this.readyState&&(this.g=!1,td(this));this.readyState=rd;};
    k$1.Va=function(a){if(this.g&&(this.l=a,this.h||(this.status=this.l.status,this.statusText=this.l.statusText,this.h=a.headers,this.readyState=2,sd(this)),this.g&&(this.readyState=3,sd(this),this.g)))if("arraybuffer"===this.responseType)a.arrayBuffer().then(this.Ta.bind(this),this.ha.bind(this));else if("undefined"!==typeof l.ReadableStream&&"body"in a){this.j=a.body.getReader();if(this.u){if(this.responseType)throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');this.response=
    [];}else this.response=this.responseText="",this.A=new TextDecoder;ud(this);}else a.text().then(this.Ua.bind(this),this.ha.bind(this));};function ud(a){a.j.read().then(a.Sa.bind(a)).catch(a.ha.bind(a));}k$1.Sa=function(a){if(this.g){if(this.u&&a.value)this.response.push(a.value);else if(!this.u){var b=a.value?a.value:new Uint8Array(0);if(b=this.A.decode(b,{stream:!a.done}))this.response=this.responseText+=b;}a.done?td(this):sd(this);3==this.readyState&&ud(this);}};
    k$1.Ua=function(a){this.g&&(this.response=this.responseText=a,td(this));};k$1.Ta=function(a){this.g&&(this.response=a,td(this));};k$1.ha=function(){this.g&&td(this);};function td(a){a.readyState=4;a.l=null;a.j=null;a.A=null;sd(a);}k$1.setRequestHeader=function(a,b){this.v.append(a,b);};k$1.getResponseHeader=function(a){return this.h?this.h.get(a.toLowerCase())||"":""};
    k$1.getAllResponseHeaders=function(){if(!this.h)return "";const a=[],b=this.h.entries();for(var c=b.next();!c.done;)c=c.value,a.push(c[0]+": "+c[1]),c=b.next();return a.join("\r\n")};function sd(a){a.onreadystatechange&&a.onreadystatechange.call(a);}Object.defineProperty(qd.prototype,"withCredentials",{get:function(){return "include"===this.m},set:function(a){this.m=a?"include":"same-origin";}});var vd=l.JSON.parse;function X$1(a){C$1.call(this);this.headers=new S;this.u=a||null;this.h=!1;this.C=this.g=null;this.H="";this.m=0;this.j="";this.l=this.F=this.v=this.D=!1;this.B=0;this.A=null;this.J=wd;this.K=this.L=!1;}t(X$1,C$1);var wd="",xd=/^https?$/i,yd=["POST","PUT"];k$1=X$1.prototype;
    k$1.ea=function(a,b,c,d){if(this.g)throw Error("[goog.net.XhrIo] Object is active with another request="+this.H+"; newUri="+a);b=b?b.toUpperCase():"GET";this.H=a;this.j="";this.m=0;this.D=!1;this.h=!0;this.g=this.u?this.u.g():cc$1.g();this.C=this.u?Zb(this.u):Zb(cc$1);this.g.onreadystatechange=q(this.Fa,this);try{this.F=!0,this.g.open(b,String(a),!0),this.F=!1;}catch(f){zd(this,f);return}a=c||"";const e=new S(this.headers);d&&Kc(d,function(f,h){e.set(h,f);});d=oa(e.T());c=l.FormData&&a instanceof l.FormData;
    !(0<=ma$1(yd,b))||d||c||e.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");e.forEach(function(f,h){this.g.setRequestHeader(h,f);},this);this.J&&(this.g.responseType=this.J);"withCredentials"in this.g&&this.g.withCredentials!==this.L&&(this.g.withCredentials=this.L);try{Ad(this),0<this.B&&((this.K=Bd(this.g))?(this.g.timeout=this.B,this.g.ontimeout=q(this.pa,this)):this.A=Gb(this.pa,this.B,this)),this.v=!0,this.g.send(a),this.v=!1;}catch(f){zd(this,f);}};
    function Bd(a){return y&&Ra$1()&&"number"===typeof a.timeout&&void 0!==a.ontimeout}function pa$1(a){return "content-type"==a.toLowerCase()}k$1.pa=function(){"undefined"!=typeof goog&&this.g&&(this.j="Timed out after "+this.B+"ms, aborting",this.m=8,D$1(this,"timeout"),this.abort(8));};function zd(a,b){a.h=!1;a.g&&(a.l=!0,a.g.abort(),a.l=!1);a.j=b;a.m=5;Cd(a);Dd(a);}function Cd(a){a.D||(a.D=!0,D$1(a,"complete"),D$1(a,"error"));}
    k$1.abort=function(a){this.g&&this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1,this.m=a||7,D$1(this,"complete"),D$1(this,"abort"),Dd(this));};k$1.M=function(){this.g&&(this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1),Dd(this,!0));X$1.Z.M.call(this);};k$1.Fa=function(){this.s||(this.F||this.v||this.l?Ed(this):this.cb());};k$1.cb=function(){Ed(this);};
    function Ed(a){if(a.h&&"undefined"!=typeof goog&&(!a.C[1]||4!=O$1(a)||2!=a.ba()))if(a.v&&4==O$1(a))Gb(a.Fa,0,a);else if(D$1(a,"readystatechange"),4==O$1(a)){a.h=!1;try{const n=a.ba();a:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var b=!0;break a;default:b=!1;}var c;if(!(c=b)){var d;if(d=0===n){var e=String(a.H).match(Mc$1)[1]||null;if(!e&&l.self&&l.self.location){var f=l.self.location.protocol;e=f.substr(0,f.length-1);}d=!xd.test(e?e.toLowerCase():"");}c=d;}if(c)D$1(a,"complete"),D$1(a,
    "success");else {a.m=6;try{var h=2<O$1(a)?a.g.statusText:"";}catch(u){h="";}a.j=h+" ["+a.ba()+"]";Cd(a);}}finally{Dd(a);}}}function Dd(a,b){if(a.g){Ad(a);const c=a.g,d=a.C[0]?aa:null;a.g=null;a.C=null;b||D$1(a,"ready");try{c.onreadystatechange=d;}catch(e){}}}function Ad(a){a.g&&a.K&&(a.g.ontimeout=null);a.A&&(l.clearTimeout(a.A),a.A=null);}function O$1(a){return a.g?a.g.readyState:0}k$1.ba=function(){try{return 2<O$1(this)?this.g.status:-1}catch(a){return -1}};
    k$1.ga=function(){try{return this.g?this.g.responseText:""}catch(a){return ""}};k$1.Qa=function(a){if(this.g){var b=this.g.responseText;a&&0==b.indexOf(a)&&(b=b.substring(a.length));return vd(b)}};function oc$1(a){try{if(!a.g)return null;if("response"in a.g)return a.g.response;switch(a.J){case wd:case "text":return a.g.responseText;case "arraybuffer":if("mozResponseArrayBuffer"in a.g)return a.g.mozResponseArrayBuffer}return null}catch(b){return null}}k$1.Da=function(){return this.m};
    k$1.La=function(){return "string"===typeof this.j?this.j:String(this.j)};function Fd(a){let b="";xa(a,function(c,d){b+=d;b+=":";b+=c;b+="\r\n";});return b}function Gd(a,b,c){a:{for(d in c){var d=!1;break a}d=!0;}d||(c=Fd(c),"string"===typeof a?(null!=c&&encodeURIComponent(String(c))):R(a,b,c));}function Hd(a,b,c){return c&&c.internalChannelParams?c.internalChannelParams[a]||b:b}
    function Id(a){this.za=0;this.l=[];this.h=new Mb;this.la=this.oa=this.F=this.W=this.g=this.sa=this.D=this.aa=this.o=this.P=this.s=null;this.Za=this.V=0;this.Xa=Hd("failFast",!1,a);this.N=this.v=this.u=this.m=this.j=null;this.X=!0;this.I=this.ta=this.U=-1;this.Y=this.A=this.C=0;this.Pa=Hd("baseRetryDelayMs",5E3,a);this.$a=Hd("retryDelaySeedMs",1E4,a);this.Ya=Hd("forwardChannelMaxRetries",2,a);this.ra=Hd("forwardChannelRequestTimeoutMs",2E4,a);this.qa=a&&a.xmlHttpFactory||void 0;this.Ba=a&&a.Yb||!1;
    this.K=void 0;this.H=a&&a.supportsCrossDomainXhr||!1;this.J="";this.i=new gd(a&&a.concurrentRequestLimit);this.Ca=new ld;this.ja=a&&a.fastHandshake||!1;this.Ra=a&&a.Wb||!1;a&&a.Aa&&this.h.Aa();a&&a.forceLongPolling&&(this.X=!1);this.$=!this.ja&&this.X&&a&&a.detectBufferingProxy||!1;this.ka=void 0;this.O=0;this.L=!1;this.B=null;this.Wa=!a||!1!==a.Xb;}k$1=Id.prototype;k$1.ma=8;k$1.G=1;
    function Ic$1(a){Jd(a);if(3==a.G){var b=a.V++,c=N$1(a.F);R(c,"SID",a.J);R(c,"RID",b);R(c,"TYPE","terminate");Kd(a,c);b=new M$1(a,a.h,b,void 0);b.K=2;b.v=jc$1(N$1(c));c=!1;l.navigator&&l.navigator.sendBeacon&&(c=l.navigator.sendBeacon(b.v.toString(),""));!c&&l.Image&&((new Image).src=b.v,c=!0);c||(b.g=nc$1(b.l,null),b.g.ea(b.v));b.F=Date.now();lc$1(b);}Ld(a);}k$1.hb=function(a){try{this.h.info("Origin Trials invoked: "+a);}catch(b){}};function Ac$1(a){a.g&&(wc$1(a),a.g.cancel(),a.g=null);}
    function Jd(a){Ac$1(a);a.u&&(l.clearTimeout(a.u),a.u=null);zc$1(a);a.i.cancel();a.m&&("number"===typeof a.m&&l.clearTimeout(a.m),a.m=null);}function Md(a,b){a.l.push(new fd(a.Za++,b));3==a.G&&Hc$1(a);}function Hc$1(a){id(a.i)||a.m||(a.m=!0,zb(a.Ha,a),a.C=0);}function Nd(a,b){if(Cc(a.i)>=a.i.j-(a.m?1:0))return !1;if(a.m)return a.l=b.D.concat(a.l),!0;if(1==a.G||2==a.G||a.C>=(a.Xa?0:a.Ya))return !1;a.m=K$1(q(a.Ha,a,b),Od(a,a.C));a.C++;return !0}
    k$1.Ha=function(a){if(this.m)if(this.m=null,1==this.G){if(!a){this.V=Math.floor(1E5*Math.random());a=this.V++;const e=new M$1(this,this.h,a,void 0);let f=this.s;this.P&&(f?(f=ya$1(f),Aa$1(f,this.P)):f=this.P);null===this.o&&(e.H=f);if(this.ja)a:{var b=0;for(var c=0;c<this.l.length;c++){b:{var d=this.l[c];if("__data__"in d.g&&(d=d.g.__data__,"string"===typeof d)){d=d.length;break b}d=void 0;}if(void 0===d)break;b+=d;if(4096<b){b=c;break a}if(4096===b||c===this.l.length-1){b=c+1;break a}}b=1E3;}else b=1E3;b=
    Pd(this,e,b);c=N$1(this.F);R(c,"RID",a);R(c,"CVER",22);this.D&&R(c,"X-HTTP-Session-Id",this.D);Kd(this,c);this.o&&f&&Gd(c,this.o,f);Dc(this.i,e);this.Ra&&R(c,"TYPE","init");this.ja?(R(c,"$req",b),R(c,"SID","null"),e.$=!0,ic$1(e,c,null)):ic$1(e,c,b);this.G=2;}}else 3==this.G&&(a?Qd(this,a):0==this.l.length||id(this.i)||Qd(this));};
    function Qd(a,b){var c;b?c=b.m:c=a.V++;const d=N$1(a.F);R(d,"SID",a.J);R(d,"RID",c);R(d,"AID",a.U);Kd(a,d);a.o&&a.s&&Gd(d,a.o,a.s);c=new M$1(a,a.h,c,a.C+1);null===a.o&&(c.H=a.s);b&&(a.l=b.D.concat(a.l));b=Pd(a,c,1E3);c.setTimeout(Math.round(.5*a.ra)+Math.round(.5*a.ra*Math.random()));Dc(a.i,c);ic$1(c,d,b);}function Kd(a,b){a.j&&Kc({},function(c,d){R(b,d,c);});}
    function Pd(a,b,c){c=Math.min(a.l.length,c);var d=a.j?q(a.j.Oa,a.j,a):null;a:{var e=a.l;let f=-1;for(;;){const h=["count="+c];-1==f?0<c?(f=e[0].h,h.push("ofs="+f)):f=0:h.push("ofs="+f);let n=!0;for(let u=0;u<c;u++){let m=e[u].h;const r=e[u].g;m-=f;if(0>m)f=Math.max(0,e[u].h-100),n=!1;else try{md(r,h,"req"+m+"_");}catch(G){d&&d(r);}}if(n){d=h.join("&");break a}}}a=a.l.splice(0,c);b.D=a;return d}function Gc(a){a.g||a.u||(a.Y=1,zb(a.Ga,a),a.A=0);}
    function Bc(a){if(a.g||a.u||3<=a.A)return !1;a.Y++;a.u=K$1(q(a.Ga,a),Od(a,a.A));a.A++;return !0}k$1.Ga=function(){this.u=null;Rd(this);if(this.$&&!(this.L||null==this.g||0>=this.O)){var a=2*this.O;this.h.info("BP detection timer enabled: "+a);this.B=K$1(q(this.bb,this),a);}};k$1.bb=function(){this.B&&(this.B=null,this.h.info("BP detection timeout reached."),this.h.info("Buffering proxy detected and switch to long-polling!"),this.N=!1,this.L=!0,J$1(10),Ac$1(this),Rd(this));};
    function wc$1(a){null!=a.B&&(l.clearTimeout(a.B),a.B=null);}function Rd(a){a.g=new M$1(a,a.h,"rpc",a.Y);null===a.o&&(a.g.H=a.s);a.g.O=0;var b=N$1(a.oa);R(b,"RID","rpc");R(b,"SID",a.J);R(b,"CI",a.N?"0":"1");R(b,"AID",a.U);Kd(a,b);R(b,"TYPE","xmlhttp");a.o&&a.s&&Gd(b,a.o,a.s);a.K&&a.g.setTimeout(a.K);var c=a.g;a=a.la;c.K=1;c.v=jc$1(N$1(b));c.s=null;c.U=!0;kc(c,a);}k$1.ab=function(){null!=this.v&&(this.v=null,Ac$1(this),Bc(this),J$1(19));};function zc$1(a){null!=a.v&&(l.clearTimeout(a.v),a.v=null);}
    function uc$1(a,b){var c=null;if(a.g==b){zc$1(a);wc$1(a);a.g=null;var d=2;}else if(yc$1(a.i,b))c=b.D,Fc(a.i,b),d=1;else return;a.I=b.N;if(0!=a.G)if(b.i)if(1==d){c=b.s?b.s.length:0;b=Date.now()-b.F;var e=a.C;d=Sb();D$1(d,new Vb(d,c,b,e));Hc$1(a);}else Gc(a);else if(e=b.o,3==e||0==e&&0<a.I||!(1==d&&Nd(a,b)||2==d&&Bc(a)))switch(c&&0<c.length&&(b=a.i,b.i=b.i.concat(c)),e){case 1:Q$1(a,5);break;case 4:Q$1(a,10);break;case 3:Q$1(a,6);break;default:Q$1(a,2);}}
    function Od(a,b){let c=a.Pa+Math.floor(Math.random()*a.$a);a.j||(c*=2);return c*b}function Q$1(a,b){a.h.info("Error code "+b);if(2==b){var c=null;a.j&&(c=null);var d=q(a.jb,a);c||(c=new U$1("//www.google.com/images/cleardot.gif"),l.location&&"http"==l.location.protocol||Oc$1(c,"https"),jc$1(c));nd(c.toString(),d);}else J$1(2);a.G=0;a.j&&a.j.va(b);Ld(a);Jd(a);}k$1.jb=function(a){a?(this.h.info("Successfully pinged google.com"),J$1(2)):(this.h.info("Failed to ping google.com"),J$1(1));};
    function Ld(a){a.G=0;a.I=-1;if(a.j){if(0!=jd(a.i).length||0!=a.l.length)a.i.i.length=0,ra(a.l),a.l.length=0;a.j.ua();}}function Ec$1(a,b,c){let d=ad(c);if(""!=d.i)b&&Pc$1(d,b+"."+d.i),Qc(d,d.m);else {const e=l.location;d=bd(e.protocol,b?b+"."+e.hostname:e.hostname,+e.port,c);}a.aa&&xa(a.aa,function(e,f){R(d,f,e);});b=a.D;c=a.sa;b&&c&&R(d,b,c);R(d,"VER",a.ma);Kd(a,d);return d}
    function nc$1(a,b,c){if(b&&!a.H)throw Error("Can't create secondary domain capable XhrIo object.");b=c&&a.Ba&&!a.qa?new X$1(new pd({ib:!0})):new X$1(a.qa);b.L=a.H;return b}function Sd(){}k$1=Sd.prototype;k$1.xa=function(){};k$1.wa=function(){};k$1.va=function(){};k$1.ua=function(){};k$1.Oa=function(){};function Td(){if(y&&!(10<=Number(Ua$1)))throw Error("Environmental error: no available transport.");}Td.prototype.g=function(a,b){return new Y$1(a,b)};
    function Y$1(a,b){C$1.call(this);this.g=new Id(b);this.l=a;this.h=b&&b.messageUrlParams||null;a=b&&b.messageHeaders||null;b&&b.clientProtocolHeaderRequired&&(a?a["X-Client-Protocol"]="webchannel":a={"X-Client-Protocol":"webchannel"});this.g.s=a;a=b&&b.initMessageHeaders||null;b&&b.messageContentType&&(a?a["X-WebChannel-Content-Type"]=b.messageContentType:a={"X-WebChannel-Content-Type":b.messageContentType});b&&b.ya&&(a?a["X-WebChannel-Client-Profile"]=b.ya:a={"X-WebChannel-Client-Profile":b.ya});this.g.P=
    a;(a=b&&b.httpHeadersOverwriteParam)&&!sa$1(a)&&(this.g.o=a);this.A=b&&b.supportsCrossDomainXhr||!1;this.v=b&&b.sendRawJson||!1;(b=b&&b.httpSessionIdParam)&&!sa$1(b)&&(this.g.D=b,a=this.h,null!==a&&b in a&&(a=this.h,b in a&&delete a[b]));this.j=new Z$1(this);}t(Y$1,C$1);Y$1.prototype.m=function(){this.g.j=this.j;this.A&&(this.g.H=!0);var a=this.g,b=this.l,c=this.h||void 0;a.Wa&&(a.h.info("Origin Trials enabled."),zb(q(a.hb,a,b)));J$1(0);a.W=b;a.aa=c||{};a.N=a.X;a.F=Ec$1(a,null,a.W);Hc$1(a);};Y$1.prototype.close=function(){Ic$1(this.g);};
    Y$1.prototype.u=function(a){if("string"===typeof a){var b={};b.__data__=a;Md(this.g,b);}else this.v?(b={},b.__data__=rb(a),Md(this.g,b)):Md(this.g,a);};Y$1.prototype.M=function(){this.g.j=null;delete this.j;Ic$1(this.g);delete this.g;Y$1.Z.M.call(this);};function Ud(a){ac$1.call(this);var b=a.__sm__;if(b){a:{for(const c in b){a=c;break a}a=void 0;}if(this.i=a)a=this.i,b=null!==b&&a in b?b[a]:void 0;this.data=b;}else this.data=a;}t(Ud,ac$1);function Vd(){bc$1.call(this);this.status=1;}t(Vd,bc$1);function Z$1(a){this.g=a;}
    t(Z$1,Sd);Z$1.prototype.xa=function(){D$1(this.g,"a");};Z$1.prototype.wa=function(a){D$1(this.g,new Ud(a));};Z$1.prototype.va=function(a){D$1(this.g,new Vd(a));};Z$1.prototype.ua=function(){D$1(this.g,"b");};/*

     Copyright 2017 Google LLC

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
    */
    Td.prototype.createWebChannel=Td.prototype.g;Y$1.prototype.send=Y$1.prototype.u;Y$1.prototype.open=Y$1.prototype.m;Y$1.prototype.close=Y$1.prototype.close;Wb.NO_ERROR=0;Wb.TIMEOUT=8;Wb.HTTP_ERROR=6;Xb.COMPLETE="complete";$b.EventType=L$1;L$1.OPEN="a";L$1.CLOSE="b";L$1.ERROR="c";L$1.MESSAGE="d";C$1.prototype.listen=C$1.prototype.N;X$1.prototype.listenOnce=X$1.prototype.O;X$1.prototype.getLastError=X$1.prototype.La;X$1.prototype.getLastErrorCode=X$1.prototype.Da;X$1.prototype.getStatus=X$1.prototype.ba;X$1.prototype.getResponseJson=X$1.prototype.Qa;
    X$1.prototype.getResponseText=X$1.prototype.ga;X$1.prototype.send=X$1.prototype.ea;var createWebChannelTransport = function(){return new Td};var getStatEventTarget = function(){return Sb()};var ErrorCode = Wb;var EventType = Xb;var Event$1 = H;var Stat = {rb:0,ub:1,vb:2,Ob:3,Tb:4,Qb:5,Rb:6,Pb:7,Nb:8,Sb:9,PROXY:10,NOPROXY:11,Lb:12,Hb:13,Ib:14,Gb:15,Jb:16,Kb:17,nb:18,mb:19,ob:20};var FetchXmlHttpFactory = pd;var WebChannel = $b;
    var XhrIo = X$1;

    const D = "@firebase/firestore";

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Simple wrapper around a nullable UID. Mostly exists to make code more
     * readable.
     */
    class C {
        constructor(t) {
            this.uid = t;
        }
        isAuthenticated() {
            return null != this.uid;
        }
        /**
         * Returns a key representing this user, suitable for inclusion in a
         * dictionary.
         */    toKey() {
            return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
        }
        isEqual(t) {
            return t.uid === this.uid;
        }
    }

    /** A user with a null UID. */ C.UNAUTHENTICATED = new C(null), 
    // TODO(mikelehen): Look into getting a proper uid-equivalent for
    // non-FirebaseAuth providers.
    C.GOOGLE_CREDENTIALS = new C("google-credentials-uid"), C.FIRST_PARTY = new C("first-party-uid"), 
    C.MOCK_USER = new C("mock-user");

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let N = "9.6.5";

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const k = new Logger("@firebase/firestore");

    // Helper methods are needed because variables can't be exported as read/write
    function x() {
        return k.logLevel;
    }

    function O(t, ...e) {
        if (k.logLevel <= LogLevel.DEBUG) {
            const n = e.map(L);
            k.debug(`Firestore (${N}): ${t}`, ...n);
        }
    }

    function M(t, ...e) {
        if (k.logLevel <= LogLevel.ERROR) {
            const n = e.map(L);
            k.error(`Firestore (${N}): ${t}`, ...n);
        }
    }

    /**
     * @internal
     */ function F(t, ...e) {
        if (k.logLevel <= LogLevel.WARN) {
            const n = e.map(L);
            k.warn(`Firestore (${N}): ${t}`, ...n);
        }
    }

    /**
     * Converts an additional log parameter to a string representation.
     */ function L(t) {
        if ("string" == typeof t) return t;
        try {
            return e = t, JSON.stringify(e);
        } catch (e) {
            // Converting to JSON failed, just log the object directly
            return t;
        }
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /** Formats an object as a JSON string, suitable for logging. */
        var e;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Unconditionally fails, throwing an Error with the given message.
     * Messages are stripped in production builds.
     *
     * Returns `never` and can be used in expressions:
     * @example
     * let futureVar = fail('not implemented yet');
     */ function B(t = "Unexpected state") {
        // Log the failure in addition to throw an exception, just in case the
        // exception is swallowed.
        const e = `FIRESTORE (${N}) INTERNAL ASSERTION FAILED: ` + t;
        // NOTE: We don't use FirestoreError here because these are internal failures
        // that cannot be handled by the user. (Also it would create a circular
        // dependency between the error and assert modules which doesn't work.)
        throw M(e), new Error(e);
    }

    /**
     * Fails if the given assertion condition is false, throwing an Error with the
     * given message if it did.
     *
     * Messages are stripped in production builds.
     */ function U(t, e) {
        t || B();
    }

    /**
     * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
     * instance of `T` before casting.
     */ function K(t, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    e) {
        return t;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const j = {
        // Causes are copied from:
        // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
        /** Not an error; returned on success. */
        OK: "ok",
        /** The operation was cancelled (typically by the caller). */
        CANCELLED: "cancelled",
        /** Unknown error or an error from a different error domain. */
        UNKNOWN: "unknown",
        /**
         * Client specified an invalid argument. Note that this differs from
         * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
         * problematic regardless of the state of the system (e.g., a malformed file
         * name).
         */
        INVALID_ARGUMENT: "invalid-argument",
        /**
         * Deadline expired before operation could complete. For operations that
         * change the state of the system, this error may be returned even if the
         * operation has completed successfully. For example, a successful response
         * from a server could have been delayed long enough for the deadline to
         * expire.
         */
        DEADLINE_EXCEEDED: "deadline-exceeded",
        /** Some requested entity (e.g., file or directory) was not found. */
        NOT_FOUND: "not-found",
        /**
         * Some entity that we attempted to create (e.g., file or directory) already
         * exists.
         */
        ALREADY_EXISTS: "already-exists",
        /**
         * The caller does not have permission to execute the specified operation.
         * PERMISSION_DENIED must not be used for rejections caused by exhausting
         * some resource (use RESOURCE_EXHAUSTED instead for those errors).
         * PERMISSION_DENIED must not be used if the caller can not be identified
         * (use UNAUTHENTICATED instead for those errors).
         */
        PERMISSION_DENIED: "permission-denied",
        /**
         * The request does not have valid authentication credentials for the
         * operation.
         */
        UNAUTHENTICATED: "unauthenticated",
        /**
         * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
         * entire file system is out of space.
         */
        RESOURCE_EXHAUSTED: "resource-exhausted",
        /**
         * Operation was rejected because the system is not in a state required for
         * the operation's execution. For example, directory to be deleted may be
         * non-empty, an rmdir operation is applied to a non-directory, etc.
         *
         * A litmus test that may help a service implementor in deciding
         * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
         *  (a) Use UNAVAILABLE if the client can retry just the failing call.
         *  (b) Use ABORTED if the client should retry at a higher-level
         *      (e.g., restarting a read-modify-write sequence).
         *  (c) Use FAILED_PRECONDITION if the client should not retry until
         *      the system state has been explicitly fixed. E.g., if an "rmdir"
         *      fails because the directory is non-empty, FAILED_PRECONDITION
         *      should be returned since the client should not retry unless
         *      they have first fixed up the directory by deleting files from it.
         *  (d) Use FAILED_PRECONDITION if the client performs conditional
         *      REST Get/Update/Delete on a resource and the resource on the
         *      server does not match the condition. E.g., conflicting
         *      read-modify-write on the same resource.
         */
        FAILED_PRECONDITION: "failed-precondition",
        /**
         * The operation was aborted, typically due to a concurrency issue like
         * sequencer check failures, transaction aborts, etc.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
         * and UNAVAILABLE.
         */
        ABORTED: "aborted",
        /**
         * Operation was attempted past the valid range. E.g., seeking or reading
         * past end of file.
         *
         * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
         * if the system state changes. For example, a 32-bit file system will
         * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
         * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
         * an offset past the current file size.
         *
         * There is a fair bit of overlap between FAILED_PRECONDITION and
         * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
         * when it applies so that callers who are iterating through a space can
         * easily look for an OUT_OF_RANGE error to detect when they are done.
         */
        OUT_OF_RANGE: "out-of-range",
        /** Operation is not implemented or not supported/enabled in this service. */
        UNIMPLEMENTED: "unimplemented",
        /**
         * Internal errors. Means some invariants expected by underlying System has
         * been broken. If you see one of these errors, Something is very broken.
         */
        INTERNAL: "internal",
        /**
         * The service is currently unavailable. This is a most likely a transient
         * condition and may be corrected by retrying with a backoff.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
         * and UNAVAILABLE.
         */
        UNAVAILABLE: "unavailable",
        /** Unrecoverable data loss or corruption. */
        DATA_LOSS: "data-loss"
    };

    /** An error returned by a Firestore operation. */ class Q extends FirebaseError {
        /** @hideconstructor */
        constructor(
        /**
         * The backend error code associated with this error.
         */
        t, 
        /**
         * A custom error description.
         */
        e) {
            super(t, e), this.code = t, this.message = e, 
            // HACK: We write a toString property directly because Error is not a real
            // class and so inheritance does not work correctly. We could alternatively
            // do the same "back-door inheritance" trick that FirebaseError does.
            this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class W {
        constructor() {
            this.promise = new Promise(((t, e) => {
                this.resolve = t, this.reject = e;
            }));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class G {
        constructor(t, e) {
            this.user = e, this.type = "OAuth", this.headers = new Map, this.headers.set("Authorization", `Bearer ${t}`);
        }
    }

    /**
     * A CredentialsProvider that always yields an empty token.
     * @internal
     */ class z {
        getToken() {
            return Promise.resolve(null);
        }
        invalidateToken() {}
        start(t, e) {
            // Fire with initial user.
            t.enqueueRetryable((() => e(C.UNAUTHENTICATED)));
        }
        shutdown() {}
    }

    class J {
        constructor(t) {
            this.t = t, 
            /** Tracks the current User. */
            this.currentUser = C.UNAUTHENTICATED, 
            /**
             * Counter used to detect if the token changed while a getToken request was
             * outstanding.
             */
            this.i = 0, this.forceRefresh = !1, this.auth = null;
        }
        start(t, e) {
            let n = this.i;
            // A change listener that prevents double-firing for the same token change.
                    const s = t => this.i !== n ? (n = this.i, e(t)) : Promise.resolve();
            // A promise that can be waited on to block on the next token change.
            // This promise is re-created after each change.
                    let i = new W;
            this.o = () => {
                this.i++, this.currentUser = this.u(), i.resolve(), i = new W, t.enqueueRetryable((() => s(this.currentUser)));
            };
            const r = () => {
                const e = i;
                t.enqueueRetryable((async () => {
                    await e.promise, await s(this.currentUser);
                }));
            }, o = t => {
                O("FirebaseAuthCredentialsProvider", "Auth detected"), this.auth = t, this.auth.addAuthTokenListener(this.o), 
                r();
            };
            this.t.onInit((t => o(t))), 
            // Our users can initialize Auth right after Firestore, so we give it
            // a chance to register itself with the component framework before we
            // determine whether to start up in unauthenticated mode.
            setTimeout((() => {
                if (!this.auth) {
                    const t = this.t.getImmediate({
                        optional: !0
                    });
                    t ? o(t) : (
                    // If auth is still not available, proceed with `null` user
                    O("FirebaseAuthCredentialsProvider", "Auth not yet detected"), i.resolve(), i = new W);
                }
            }), 0), r();
        }
        getToken() {
            // Take note of the current value of the tokenCounter so that this method
            // can fail (with an ABORTED error) if there is a token change while the
            // request is outstanding.
            const t = this.i, e = this.forceRefresh;
            return this.forceRefresh = !1, this.auth ? this.auth.getToken(e).then((e => 
            // Cancel the request since the token changed while the request was
            // outstanding so the response is potentially for a previous user (which
            // user, we can't be sure).
            this.i !== t ? (O("FirebaseAuthCredentialsProvider", "getToken aborted due to token change."), 
            this.getToken()) : e ? (U("string" == typeof e.accessToken), new G(e.accessToken, this.currentUser)) : null)) : Promise.resolve(null);
        }
        invalidateToken() {
            this.forceRefresh = !0;
        }
        shutdown() {
            this.auth && this.auth.removeAuthTokenListener(this.o);
        }
        // Auth.getUid() can return null even with a user logged in. It is because
        // getUid() is synchronous, but the auth code populating Uid is asynchronous.
        // This method should only be called in the AuthTokenListener callback
        // to guarantee to get the actual user.
        u() {
            const t = this.auth && this.auth.getUid();
            return U(null === t || "string" == typeof t), new C(t);
        }
    }

    /*
     * FirstPartyToken provides a fresh token each time its value
     * is requested, because if the token is too old, requests will be rejected.
     * Technically this may no longer be necessary since the SDK should gracefully
     * recover from unauthenticated errors (see b/33147818 for context), but it's
     * safer to keep the implementation as-is.
     */ class Y {
        constructor(t, e, n) {
            this.type = "FirstParty", this.user = C.FIRST_PARTY, this.headers = new Map, this.headers.set("X-Goog-AuthUser", e);
            const s = t.auth.getAuthHeaderValueForFirstParty([]);
            s && this.headers.set("Authorization", s), n && this.headers.set("X-Goog-Iam-Authorization-Token", n);
        }
    }

    /*
     * Provides user credentials required for the Firestore JavaScript SDK
     * to authenticate the user, using technique that is only available
     * to applications hosted by Google.
     */ class X {
        constructor(t, e, n) {
            this.h = t, this.l = e, this.m = n;
        }
        getToken() {
            return Promise.resolve(new Y(this.h, this.l, this.m));
        }
        start(t, e) {
            // Fire with initial uid.
            t.enqueueRetryable((() => e(C.FIRST_PARTY)));
        }
        shutdown() {}
        invalidateToken() {}
    }

    class Z {
        constructor(t) {
            this.value = t, this.type = "AppCheck", this.headers = new Map, t && t.length > 0 && this.headers.set("x-firebase-appcheck", this.value);
        }
    }

    class tt {
        constructor(t) {
            this.g = t, this.forceRefresh = !1, this.appCheck = null;
        }
        start(t, e) {
            this.o = n => {
                t.enqueueRetryable((() => (t => (null != t.error && O("FirebaseAppCheckTokenProvider", `Error getting App Check token; using placeholder token instead. Error: ${t.error.message}`), 
                e(t.token)))(n)));
            };
            const n = t => {
                O("FirebaseAppCheckTokenProvider", "AppCheck detected"), this.appCheck = t, this.appCheck.addTokenListener(this.o);
            };
            this.g.onInit((t => n(t))), 
            // Our users can initialize AppCheck after Firestore, so we give it
            // a chance to register itself with the component framework.
            setTimeout((() => {
                if (!this.appCheck) {
                    const t = this.g.getImmediate({
                        optional: !0
                    });
                    t ? n(t) : 
                    // If AppCheck is still not available, proceed without it.
                    O("FirebaseAppCheckTokenProvider", "AppCheck not yet detected");
                }
            }), 0);
        }
        getToken() {
            const t = this.forceRefresh;
            return this.forceRefresh = !1, this.appCheck ? this.appCheck.getToken(t).then((t => t ? (U("string" == typeof t.token), 
            new Z(t.token)) : null)) : Promise.resolve(null);
        }
        invalidateToken() {
            this.forceRefresh = !0;
        }
        shutdown() {
            this.appCheck && this.appCheck.removeTokenListener(this.o);
        }
    }

    /**
     * Builds a CredentialsProvider depending on the type of
     * the credentials passed in.
     */
    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to
     * exceed. All subsequent calls to next will return increasing values. If provided with a
     * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as
     * well as write out sequence numbers that it produces via `next()`.
     */
    class nt {
        constructor(t, e) {
            this.previousValue = t, e && (e.sequenceNumberHandler = t => this.p(t), this.T = t => e.writeSequenceNumber(t));
        }
        p(t) {
            return this.previousValue = Math.max(t, this.previousValue), this.previousValue;
        }
        next() {
            const t = ++this.previousValue;
            return this.T && this.T(t), t;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Generates `nBytes` of random bytes.
     *
     * If `nBytes < 0` , an error will be thrown.
     */
    function st(t) {
        // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
        const e = 
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        "undefined" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(t);
        if (e && "function" == typeof e.getRandomValues) e.getRandomValues(n); else 
        // Falls back to Math.random
        for (let e = 0; e < t; e++) n[e] = Math.floor(256 * Math.random());
        return n;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ nt.I = -1;

    class it {
        static A() {
            // Alphanumeric characters
            const t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = Math.floor(256 / t.length) * t.length;
            // The largest byte value that is a multiple of `char.length`.
                    let n = "";
            for (;n.length < 20; ) {
                const s = st(40);
                for (let i = 0; i < s.length; ++i) 
                // Only accept values that are [0, maxMultiple), this ensures they can
                // be evenly mapped to indices of `chars` via a modulo operation.
                n.length < 20 && s[i] < e && (n += t.charAt(s[i] % t.length));
            }
            return n;
        }
    }

    function rt(t, e) {
        return t < e ? -1 : t > e ? 1 : 0;
    }

    /** Helper to compare arrays using isEqual(). */ function ot(t, e, n) {
        return t.length === e.length && t.every(((t, s) => n(t, e[s])));
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).
    /**
     * A `Timestamp` represents a point in time independent of any time zone or
     * calendar, represented as seconds and fractions of seconds at nanosecond
     * resolution in UTC Epoch time.
     *
     * It is encoded using the Proleptic Gregorian Calendar which extends the
     * Gregorian calendar backwards to year one. It is encoded assuming all minutes
     * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
     * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
     * 9999-12-31T23:59:59.999999999Z.
     *
     * For examples and further specifications, refer to the
     * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.
     */
    class at {
        /**
         * Creates a new timestamp.
         *
         * @param seconds - The number of seconds of UTC time since Unix epoch
         *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
         *     9999-12-31T23:59:59Z inclusive.
         * @param nanoseconds - The non-negative fractions of a second at nanosecond
         *     resolution. Negative second values with fractions must still have
         *     non-negative nanoseconds values that count forward in time. Must be
         *     from 0 to 999,999,999 inclusive.
         */
        constructor(
        /**
         * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.
         */
        t, 
        /**
         * The fractions of a second at nanosecond resolution.*
         */
        e) {
            if (this.seconds = t, this.nanoseconds = e, e < 0) throw new Q(j.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
            if (e >= 1e9) throw new Q(j.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
            if (t < -62135596800) throw new Q(j.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
            // This will break in the year 10,000.
                    if (t >= 253402300800) throw new Q(j.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
        }
        /**
         * Creates a new timestamp with the current date, with millisecond precision.
         *
         * @returns a new timestamp representing the current date.
         */    static now() {
            return at.fromMillis(Date.now());
        }
        /**
         * Creates a new timestamp from the given date.
         *
         * @param date - The date to initialize the `Timestamp` from.
         * @returns A new `Timestamp` representing the same point in time as the given
         *     date.
         */    static fromDate(t) {
            return at.fromMillis(t.getTime());
        }
        /**
         * Creates a new timestamp from the given number of milliseconds.
         *
         * @param milliseconds - Number of milliseconds since Unix epoch
         *     1970-01-01T00:00:00Z.
         * @returns A new `Timestamp` representing the same point in time as the given
         *     number of milliseconds.
         */    static fromMillis(t) {
            const e = Math.floor(t / 1e3), n = Math.floor(1e6 * (t - 1e3 * e));
            return new at(e, n);
        }
        /**
         * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
         * causes a loss of precision since `Date` objects only support millisecond
         * precision.
         *
         * @returns JavaScript `Date` object representing the same point in time as
         *     this `Timestamp`, with millisecond precision.
         */    toDate() {
            return new Date(this.toMillis());
        }
        /**
         * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
         * epoch). This operation causes a loss of precision.
         *
         * @returns The point in time corresponding to this timestamp, represented as
         *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
         */    toMillis() {
            return 1e3 * this.seconds + this.nanoseconds / 1e6;
        }
        _compareTo(t) {
            return this.seconds === t.seconds ? rt(this.nanoseconds, t.nanoseconds) : rt(this.seconds, t.seconds);
        }
        /**
         * Returns true if this `Timestamp` is equal to the provided one.
         *
         * @param other - The `Timestamp` to compare against.
         * @returns true if this `Timestamp` is equal to the provided one.
         */    isEqual(t) {
            return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
        }
        /** Returns a textual representation of this `Timestamp`. */    toString() {
            return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
        }
        /** Returns a JSON-serializable representation of this `Timestamp`. */    toJSON() {
            return {
                seconds: this.seconds,
                nanoseconds: this.nanoseconds
            };
        }
        /**
         * Converts this object to a primitive string, which allows `Timestamp` objects
         * to be compared using the `>`, `<=`, `>=` and `>` operators.
         */    valueOf() {
            // This method returns a string of the form <seconds>.<nanoseconds> where
            // <seconds> is translated to have a non-negative value and both <seconds>
            // and <nanoseconds> are left-padded with zeroes to be a consistent length.
            // Strings with this format then have a lexiographical ordering that matches
            // the expected ordering. The <seconds> translation is done to avoid having
            // a leading negative sign (i.e. a leading '-' character) in its string
            // representation, which would affect its lexiographical ordering.
            const t = this.seconds - -62135596800;
            // Note: Up to 12 decimal digits are required to represent all valid
            // 'seconds' values.
                    return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A version of a document in Firestore. This corresponds to the version
     * timestamp, such as update_time or read_time.
     */ class ut {
        constructor(t) {
            this.timestamp = t;
        }
        static fromTimestamp(t) {
            return new ut(t);
        }
        static min() {
            return new ut(new at(0, 0));
        }
        compareTo(t) {
            return this.timestamp._compareTo(t.timestamp);
        }
        isEqual(t) {
            return this.timestamp.isEqual(t.timestamp);
        }
        /** Returns a number representation of the version for use in spec tests. */    toMicroseconds() {
            // Convert to microseconds.
            return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
        }
        toString() {
            return "SnapshotVersion(" + this.timestamp.toString() + ")";
        }
        toTimestamp() {
            return this.timestamp;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function ht(t) {
        let e = 0;
        for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e++;
        return e;
    }

    function lt(t, e) {
        for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
    }

    function ft(t) {
        for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
        return !0;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Path represents an ordered sequence of string segments.
     */
    class dt {
        constructor(t, e, n) {
            void 0 === e ? e = 0 : e > t.length && B(), void 0 === n ? n = t.length - e : n > t.length - e && B(), 
            this.segments = t, this.offset = e, this.len = n;
        }
        get length() {
            return this.len;
        }
        isEqual(t) {
            return 0 === dt.comparator(this, t);
        }
        child(t) {
            const e = this.segments.slice(this.offset, this.limit());
            return t instanceof dt ? t.forEach((t => {
                e.push(t);
            })) : e.push(t), this.construct(e);
        }
        /** The index of one past the last segment of the path. */    limit() {
            return this.offset + this.length;
        }
        popFirst(t) {
            return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);
        }
        popLast() {
            return this.construct(this.segments, this.offset, this.length - 1);
        }
        firstSegment() {
            return this.segments[this.offset];
        }
        lastSegment() {
            return this.get(this.length - 1);
        }
        get(t) {
            return this.segments[this.offset + t];
        }
        isEmpty() {
            return 0 === this.length;
        }
        isPrefixOf(t) {
            if (t.length < this.length) return !1;
            for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
            return !0;
        }
        isImmediateParentOf(t) {
            if (this.length + 1 !== t.length) return !1;
            for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
            return !0;
        }
        forEach(t) {
            for (let e = this.offset, n = this.limit(); e < n; e++) t(this.segments[e]);
        }
        toArray() {
            return this.segments.slice(this.offset, this.limit());
        }
        static comparator(t, e) {
            const n = Math.min(t.length, e.length);
            for (let s = 0; s < n; s++) {
                const n = t.get(s), i = e.get(s);
                if (n < i) return -1;
                if (n > i) return 1;
            }
            return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;
        }
    }

    /**
     * A slash-separated path for navigating resources (documents and collections)
     * within Firestore.
     *
     * @internal
     */ class wt extends dt {
        construct(t, e, n) {
            return new wt(t, e, n);
        }
        canonicalString() {
            // NOTE: The client is ignorant of any path segments containing escape
            // sequences (e.g. __id123__) and just passes them through raw (they exist
            // for legacy reasons and should not be used frequently).
            return this.toArray().join("/");
        }
        toString() {
            return this.canonicalString();
        }
        /**
         * Creates a resource path from the given slash-delimited string. If multiple
         * arguments are provided, all components are combined. Leading and trailing
         * slashes from all components are ignored.
         */    static fromString(...t) {
            // NOTE: The client is ignorant of any path segments containing escape
            // sequences (e.g. __id123__) and just passes them through raw (they exist
            // for legacy reasons and should not be used frequently).
            const e = [];
            for (const n of t) {
                if (n.indexOf("//") >= 0) throw new Q(j.INVALID_ARGUMENT, `Invalid segment (${n}). Paths must not contain // in them.`);
                // Strip leading and traling slashed.
                            e.push(...n.split("/").filter((t => t.length > 0)));
            }
            return new wt(e);
        }
        static emptyPath() {
            return new wt([]);
        }
    }

    const _t = /^[_a-zA-Z][_a-zA-Z0-9]*$/;

    /**
     * A dot-separated path for navigating sub-objects within a document.
     * @internal
     */ class mt extends dt {
        construct(t, e, n) {
            return new mt(t, e, n);
        }
        /**
         * Returns true if the string could be used as a segment in a field path
         * without escaping.
         */    static isValidIdentifier(t) {
            return _t.test(t);
        }
        canonicalString() {
            return this.toArray().map((t => (t = t.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), 
            mt.isValidIdentifier(t) || (t = "`" + t + "`"), t))).join(".");
        }
        toString() {
            return this.canonicalString();
        }
        /**
         * Returns true if this field references the key of a document.
         */    isKeyField() {
            return 1 === this.length && "__name__" === this.get(0);
        }
        /**
         * The field designating the key of a document.
         */    static keyField() {
            return new mt([ "__name__" ]);
        }
        /**
         * Parses a field string from the given server-formatted string.
         *
         * - Splitting the empty string is not allowed (for now at least).
         * - Empty segments within the string (e.g. if there are two consecutive
         *   separators) are not allowed.
         *
         * TODO(b/37244157): we should make this more strict. Right now, it allows
         * non-identifier path components, even if they aren't escaped.
         */    static fromServerFormat(t) {
            const e = [];
            let n = "", s = 0;
            const i = () => {
                if (0 === n.length) throw new Q(j.INVALID_ARGUMENT, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
                e.push(n), n = "";
            };
            let r = !1;
            for (;s < t.length; ) {
                const e = t[s];
                if ("\\" === e) {
                    if (s + 1 === t.length) throw new Q(j.INVALID_ARGUMENT, "Path has trailing escape character: " + t);
                    const e = t[s + 1];
                    if ("\\" !== e && "." !== e && "`" !== e) throw new Q(j.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t);
                    n += e, s += 2;
                } else "`" === e ? (r = !r, s++) : "." !== e || r ? (n += e, s++) : (i(), s++);
            }
            if (i(), r) throw new Q(j.INVALID_ARGUMENT, "Unterminated ` in path: " + t);
            return new mt(e);
        }
        static emptyPath() {
            return new mt([]);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provides a set of fields that can be used to partially patch a document.
     * FieldMask is used in conjunction with ObjectValue.
     * Examples:
     *   foo - Overwrites foo entirely with the provided value. If foo is not
     *         present in the companion ObjectValue, the field is deleted.
     *   foo.bar - Overwrites only the field bar of the object foo.
     *             If foo is not an object, foo is replaced with an object
     *             containing foo
     */ class gt {
        constructor(t) {
            this.fields = t, 
            // TODO(dimond): validation of FieldMask
            // Sort the field mask to support `FieldMask.isEqual()` and assert below.
            t.sort(mt.comparator);
        }
        /**
         * Verifies that `fieldPath` is included by at least one field in this field
         * mask.
         *
         * This is an O(n) operation, where `n` is the size of the field mask.
         */    covers(t) {
            for (const e of this.fields) if (e.isPrefixOf(t)) return !0;
            return !1;
        }
        isEqual(t) {
            return ot(this.fields, t.fields, ((t, e) => t.isEqual(e)));
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Immutable class that represents a "proto" byte string.
     *
     * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
     * sent on the wire. This class abstracts away this differentiation by holding
     * the proto byte string in a common class that must be converted into a string
     * before being sent as a proto.
     * @internal
     */ class pt {
        constructor(t) {
            this.binaryString = t;
        }
        static fromBase64String(t) {
            const e = atob(t);
            return new pt(e);
        }
        static fromUint8Array(t) {
            const e = 
            /**
     * Helper function to convert an Uint8array to a binary string.
     */
            function(t) {
                let e = "";
                for (let n = 0; n < t.length; ++n) e += String.fromCharCode(t[n]);
                return e;
            }
            /**
     * Helper function to convert a binary string to an Uint8Array.
     */ (t);
            return new pt(e);
        }
        [Symbol.iterator]() {
            let t = 0;
            return {
                next: () => t < this.binaryString.length ? {
                    value: this.binaryString.charCodeAt(t++),
                    done: !1
                } : {
                    value: void 0,
                    done: !0
                }
            };
        }
        toBase64() {
            return t = this.binaryString, btoa(t);
            /** Converts a binary string to a Base64 encoded string. */
            var t;
        }
        toUint8Array() {
            return function(t) {
                const e = new Uint8Array(t.length);
                for (let n = 0; n < t.length; n++) e[n] = t.charCodeAt(n);
                return e;
            }
            /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
            // A RegExp matching ISO 8601 UTC timestamps with optional fraction.
            (this.binaryString);
        }
        approximateByteSize() {
            return 2 * this.binaryString.length;
        }
        compareTo(t) {
            return rt(this.binaryString, t.binaryString);
        }
        isEqual(t) {
            return this.binaryString === t.binaryString;
        }
    }

    pt.EMPTY_BYTE_STRING = new pt("");

    const Tt = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);

    /**
     * Converts the possible Proto values for a timestamp value into a "seconds and
     * nanos" representation.
     */ function Et(t) {
        // The json interface (for the browser) will return an iso timestamp string,
        // while the proto js library (for node) will return a
        // google.protobuf.Timestamp instance.
        if (U(!!t), "string" == typeof t) {
            // The date string can have higher precision (nanos) than the Date class
            // (millis), so we do some custom parsing here.
            // Parse the nanos right out of the string.
            let e = 0;
            const n = Tt.exec(t);
            if (U(!!n), n[1]) {
                // Pad the fraction out to 9 digits (nanos).
                let t = n[1];
                t = (t + "000000000").substr(0, 9), e = Number(t);
            }
            // Parse the date to get the seconds.
                    const s = new Date(t);
            return {
                seconds: Math.floor(s.getTime() / 1e3),
                nanos: e
            };
        }
        return {
            seconds: It(t.seconds),
            nanos: It(t.nanos)
        };
    }

    /**
     * Converts the possible Proto types for numbers into a JavaScript number.
     * Returns 0 if the value is not numeric.
     */ function It(t) {
        // TODO(bjornick): Handle int64 greater than 53 bits.
        return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
    }

    /** Converts the possible Proto types for Blobs into a ByteString. */ function At(t) {
        return "string" == typeof t ? pt.fromBase64String(t) : pt.fromUint8Array(t);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents a locally-applied ServerTimestamp.
     *
     * Server Timestamps are backed by MapValues that contain an internal field
     * `__type__` with a value of `server_timestamp`. The previous value and local
     * write time are stored in its `__previous_value__` and `__local_write_time__`
     * fields respectively.
     *
     * Notes:
     * - ServerTimestampValue instances are created as the result of applying a
     *   transform. They can only exist in the local view of a document. Therefore
     *   they do not need to be parsed or serialized.
     * - When evaluated locally (e.g. for snapshot.data()), they by default
     *   evaluate to `null`. This behavior can be configured by passing custom
     *   FieldValueOptions to value().
     * - With respect to other ServerTimestampValues, they sort by their
     *   localWriteTime.
     */ function Rt(t) {
        var e, n;
        return "server_timestamp" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);
    }

    /**
     * Creates a new ServerTimestamp proto value (using the internal format).
     */
    /**
     * Returns the value of the field before this ServerTimestamp was set.
     *
     * Preserving the previous values allows the user to display the last resoled
     * value until the backend responds with the timestamp.
     */
    function bt(t) {
        const e = t.mapValue.fields.__previous_value__;
        return Rt(e) ? bt(e) : e;
    }

    /**
     * Returns the local time at which this timestamp was first set.
     */ function Pt(t) {
        const e = Et(t.mapValue.fields.__local_write_time__.timestampValue);
        return new at(e.seconds, e.nanos);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Sentinel value that sorts before any Mutation Batch ID. */
    /**
     * Returns whether a variable is either undefined or null.
     */
    function vt(t) {
        return null == t;
    }

    /** Returns whether the value represents -0. */ function Vt(t) {
        // Detect if the value is -0.0. Based on polyfill from
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
        return 0 === t && 1 / t == -1 / 0;
    }

    /**
     * Returns whether a value is an integer and in the safe integer range
     * @param value - The value to test for being an integer and in the safe range
     */ function St(t) {
        return "number" == typeof t && Number.isInteger(t) && !Vt(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @internal
     */ class Dt {
        constructor(t) {
            this.path = t;
        }
        static fromPath(t) {
            return new Dt(wt.fromString(t));
        }
        static fromName(t) {
            return new Dt(wt.fromString(t).popFirst(5));
        }
        /** Returns true if the document is in the specified collectionId. */    hasCollectionId(t) {
            return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
        }
        isEqual(t) {
            return null !== t && 0 === wt.comparator(this.path, t.path);
        }
        toString() {
            return this.path.toString();
        }
        static comparator(t, e) {
            return wt.comparator(t.path, e.path);
        }
        static isDocumentKey(t) {
            return t.length % 2 == 0;
        }
        /**
         * Creates and returns a new document key with the given segments.
         *
         * @param segments - The segments of the path to the document
         * @returns A new instance of DocumentKey
         */    static fromSegments(t) {
            return new Dt(new wt(t.slice()));
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Extracts the backend's type order for the provided value. */ function Ct(t) {
        return "nullValue" in t ? 0 /* NullValue */ : "booleanValue" in t ? 1 /* BooleanValue */ : "integerValue" in t || "doubleValue" in t ? 2 /* NumberValue */ : "timestampValue" in t ? 3 /* TimestampValue */ : "stringValue" in t ? 5 /* StringValue */ : "bytesValue" in t ? 6 /* BlobValue */ : "referenceValue" in t ? 7 /* RefValue */ : "geoPointValue" in t ? 8 /* GeoPointValue */ : "arrayValue" in t ? 9 /* ArrayValue */ : "mapValue" in t ? Rt(t) ? 4 /* ServerTimestampValue */ : 10 /* ObjectValue */ : B();
    }

    /** Tests `left` and `right` for equality based on the backend semantics. */ function Nt(t, e) {
        if (t === e) return !0;
        const n = Ct(t);
        if (n !== Ct(e)) return !1;
        switch (n) {
          case 0 /* NullValue */ :
            return !0;

          case 1 /* BooleanValue */ :
            return t.booleanValue === e.booleanValue;

          case 4 /* ServerTimestampValue */ :
            return Pt(t).isEqual(Pt(e));

          case 3 /* TimestampValue */ :
            return function(t, e) {
                if ("string" == typeof t.timestampValue && "string" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) 
                // Use string equality for ISO 8601 timestamps
                return t.timestampValue === e.timestampValue;
                const n = Et(t.timestampValue), s = Et(e.timestampValue);
                return n.seconds === s.seconds && n.nanos === s.nanos;
            }(t, e);

          case 5 /* StringValue */ :
            return t.stringValue === e.stringValue;

          case 6 /* BlobValue */ :
            return function(t, e) {
                return At(t.bytesValue).isEqual(At(e.bytesValue));
            }(t, e);

          case 7 /* RefValue */ :
            return t.referenceValue === e.referenceValue;

          case 8 /* GeoPointValue */ :
            return function(t, e) {
                return It(t.geoPointValue.latitude) === It(e.geoPointValue.latitude) && It(t.geoPointValue.longitude) === It(e.geoPointValue.longitude);
            }(t, e);

          case 2 /* NumberValue */ :
            return function(t, e) {
                if ("integerValue" in t && "integerValue" in e) return It(t.integerValue) === It(e.integerValue);
                if ("doubleValue" in t && "doubleValue" in e) {
                    const n = It(t.doubleValue), s = It(e.doubleValue);
                    return n === s ? Vt(n) === Vt(s) : isNaN(n) && isNaN(s);
                }
                return !1;
            }(t, e);

          case 9 /* ArrayValue */ :
            return ot(t.arrayValue.values || [], e.arrayValue.values || [], Nt);

          case 10 /* ObjectValue */ :
            return function(t, e) {
                const n = t.mapValue.fields || {}, s = e.mapValue.fields || {};
                if (ht(n) !== ht(s)) return !1;
                for (const t in n) if (n.hasOwnProperty(t) && (void 0 === s[t] || !Nt(n[t], s[t]))) return !1;
                return !0;
            }
            /** Returns true if the ArrayValue contains the specified element. */ (t, e);

          default:
            return B();
        }
    }

    function kt(t, e) {
        return void 0 !== (t.values || []).find((t => Nt(t, e)));
    }

    function xt(t, e) {
        if (t === e) return 0;
        const n = Ct(t), s = Ct(e);
        if (n !== s) return rt(n, s);
        switch (n) {
          case 0 /* NullValue */ :
            return 0;

          case 1 /* BooleanValue */ :
            return rt(t.booleanValue, e.booleanValue);

          case 2 /* NumberValue */ :
            return function(t, e) {
                const n = It(t.integerValue || t.doubleValue), s = It(e.integerValue || e.doubleValue);
                return n < s ? -1 : n > s ? 1 : n === s ? 0 : 
                // one or both are NaN.
                isNaN(n) ? isNaN(s) ? 0 : -1 : 1;
            }(t, e);

          case 3 /* TimestampValue */ :
            return $t(t.timestampValue, e.timestampValue);

          case 4 /* ServerTimestampValue */ :
            return $t(Pt(t), Pt(e));

          case 5 /* StringValue */ :
            return rt(t.stringValue, e.stringValue);

          case 6 /* BlobValue */ :
            return function(t, e) {
                const n = At(t), s = At(e);
                return n.compareTo(s);
            }(t.bytesValue, e.bytesValue);

          case 7 /* RefValue */ :
            return function(t, e) {
                const n = t.split("/"), s = e.split("/");
                for (let t = 0; t < n.length && t < s.length; t++) {
                    const e = rt(n[t], s[t]);
                    if (0 !== e) return e;
                }
                return rt(n.length, s.length);
            }(t.referenceValue, e.referenceValue);

          case 8 /* GeoPointValue */ :
            return function(t, e) {
                const n = rt(It(t.latitude), It(e.latitude));
                if (0 !== n) return n;
                return rt(It(t.longitude), It(e.longitude));
            }(t.geoPointValue, e.geoPointValue);

          case 9 /* ArrayValue */ :
            return function(t, e) {
                const n = t.values || [], s = e.values || [];
                for (let t = 0; t < n.length && t < s.length; ++t) {
                    const e = xt(n[t], s[t]);
                    if (e) return e;
                }
                return rt(n.length, s.length);
            }(t.arrayValue, e.arrayValue);

          case 10 /* ObjectValue */ :
            return function(t, e) {
                const n = t.fields || {}, s = Object.keys(n), i = e.fields || {}, r = Object.keys(i);
                // Even though MapValues are likely sorted correctly based on their insertion
                // order (e.g. when received from the backend), local modifications can bring
                // elements out of order. We need to re-sort the elements to ensure that
                // canonical IDs are independent of insertion order.
                s.sort(), r.sort();
                for (let t = 0; t < s.length && t < r.length; ++t) {
                    const e = rt(s[t], r[t]);
                    if (0 !== e) return e;
                    const o = xt(n[s[t]], i[r[t]]);
                    if (0 !== o) return o;
                }
                return rt(s.length, r.length);
            }
            /**
     * Generates the canonical ID for the provided field value (as used in Target
     * serialization).
     */ (t.mapValue, e.mapValue);

          default:
            throw B();
        }
    }

    function $t(t, e) {
        if ("string" == typeof t && "string" == typeof e && t.length === e.length) return rt(t, e);
        const n = Et(t), s = Et(e), i = rt(n.seconds, s.seconds);
        return 0 !== i ? i : rt(n.nanos, s.nanos);
    }

    function Ot(t) {
        return Mt(t);
    }

    function Mt(t) {
        return "nullValue" in t ? "null" : "booleanValue" in t ? "" + t.booleanValue : "integerValue" in t ? "" + t.integerValue : "doubleValue" in t ? "" + t.doubleValue : "timestampValue" in t ? function(t) {
            const e = Et(t);
            return `time(${e.seconds},${e.nanos})`;
        }(t.timestampValue) : "stringValue" in t ? t.stringValue : "bytesValue" in t ? At(t.bytesValue).toBase64() : "referenceValue" in t ? (n = t.referenceValue, 
        Dt.fromName(n).toString()) : "geoPointValue" in t ? `geo(${(e = t.geoPointValue).latitude},${e.longitude})` : "arrayValue" in t ? function(t) {
            let e = "[", n = !0;
            for (const s of t.values || []) n ? n = !1 : e += ",", e += Mt(s);
            return e + "]";
        }
        /** Returns a reference value for the provided database and key. */ (t.arrayValue) : "mapValue" in t ? function(t) {
            // Iteration order in JavaScript is not guaranteed. To ensure that we generate
            // matching canonical IDs for identical maps, we need to sort the keys.
            const e = Object.keys(t.fields || {}).sort();
            let n = "{", s = !0;
            for (const i of e) s ? s = !1 : n += ",", n += `${i}:${Mt(t.fields[i])}`;
            return n + "}";
        }(t.mapValue) : B();
        var e, n;
    }

    /** Returns true if `value` is an IntegerValue . */ function Lt(t) {
        return !!t && "integerValue" in t;
    }

    /** Returns true if `value` is a DoubleValue. */
    /** Returns true if `value` is an ArrayValue. */
    function Bt(t) {
        return !!t && "arrayValue" in t;
    }

    /** Returns true if `value` is a NullValue. */ function Ut(t) {
        return !!t && "nullValue" in t;
    }

    /** Returns true if `value` is NaN. */ function qt(t) {
        return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
    }

    /** Returns true if `value` is a MapValue. */ function Kt(t) {
        return !!t && "mapValue" in t;
    }

    /** Creates a deep copy of `source`. */ function jt(t) {
        if (t.geoPointValue) return {
            geoPointValue: Object.assign({}, t.geoPointValue)
        };
        if (t.timestampValue && "object" == typeof t.timestampValue) return {
            timestampValue: Object.assign({}, t.timestampValue)
        };
        if (t.mapValue) {
            const e = {
                mapValue: {
                    fields: {}
                }
            };
            return lt(t.mapValue.fields, ((t, n) => e.mapValue.fields[t] = jt(n))), e;
        }
        if (t.arrayValue) {
            const e = {
                arrayValue: {
                    values: []
                }
            };
            for (let n = 0; n < (t.arrayValue.values || []).length; ++n) e.arrayValue.values[n] = jt(t.arrayValue.values[n]);
            return e;
        }
        return Object.assign({}, t);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An ObjectValue represents a MapValue in the Firestore Proto and offers the
     * ability to add and remove fields (via the ObjectValueBuilder).
     */ class Qt {
        constructor(t) {
            this.value = t;
        }
        static empty() {
            return new Qt({
                mapValue: {}
            });
        }
        /**
         * Returns the value at the given path or null.
         *
         * @param path - the path to search
         * @returns The value at the path or null if the path is not set.
         */    field(t) {
            if (t.isEmpty()) return this.value;
            {
                let e = this.value;
                for (let n = 0; n < t.length - 1; ++n) if (e = (e.mapValue.fields || {})[t.get(n)], 
                !Kt(e)) return null;
                return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;
            }
        }
        /**
         * Sets the field to the provided value.
         *
         * @param path - The field path to set.
         * @param value - The value to set.
         */    set(t, e) {
            this.getFieldsMap(t.popLast())[t.lastSegment()] = jt(e);
        }
        /**
         * Sets the provided fields to the provided values.
         *
         * @param data - A map of fields to values (or null for deletes).
         */    setAll(t) {
            let e = mt.emptyPath(), n = {}, s = [];
            t.forEach(((t, i) => {
                if (!e.isImmediateParentOf(i)) {
                    // Insert the accumulated changes at this parent location
                    const t = this.getFieldsMap(e);
                    this.applyChanges(t, n, s), n = {}, s = [], e = i.popLast();
                }
                t ? n[i.lastSegment()] = jt(t) : s.push(i.lastSegment());
            }));
            const i = this.getFieldsMap(e);
            this.applyChanges(i, n, s);
        }
        /**
         * Removes the field at the specified path. If there is no field at the
         * specified path, nothing is changed.
         *
         * @param path - The field path to remove.
         */    delete(t) {
            const e = this.field(t.popLast());
            Kt(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];
        }
        isEqual(t) {
            return Nt(this.value, t.value);
        }
        /**
         * Returns the map that contains the leaf element of `path`. If the parent
         * entry does not yet exist, or if it is not a map, a new map will be created.
         */    getFieldsMap(t) {
            let e = this.value;
            e.mapValue.fields || (e.mapValue = {
                fields: {}
            });
            for (let n = 0; n < t.length; ++n) {
                let s = e.mapValue.fields[t.get(n)];
                Kt(s) && s.mapValue.fields || (s = {
                    mapValue: {
                        fields: {}
                    }
                }, e.mapValue.fields[t.get(n)] = s), e = s;
            }
            return e.mapValue.fields;
        }
        /**
         * Modifies `fieldsMap` by adding, replacing or deleting the specified
         * entries.
         */    applyChanges(t, e, n) {
            lt(e, ((e, n) => t[e] = n));
            for (const e of n) delete t[e];
        }
        clone() {
            return new Qt(jt(this.value));
        }
    }

    /**
     * Returns a FieldMask built from all fields in a MapValue.
     */ function Wt(t) {
        const e = [];
        return lt(t.fields, ((t, n) => {
            const s = new mt([ t ]);
            if (Kt(n)) {
                const t = Wt(n.mapValue).fields;
                if (0 === t.length) 
                // Preserve the empty map by adding it to the FieldMask.
                e.push(s); else 
                // For nested and non-empty ObjectValues, add the FieldPath of the
                // leaf nodes.
                for (const n of t) e.push(s.child(n));
            } else 
            // For nested and non-empty ObjectValues, add the FieldPath of the leaf
            // nodes.
            e.push(s);
        })), new gt(e);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents a document in Firestore with a key, version, data and whether it
     * has local mutations applied to it.
     *
     * Documents can transition between states via `convertToFoundDocument()`,
     * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does
     * not transition to one of these states even after all mutations have been
     * applied, `isValidDocument()` returns false and the document should be removed
     * from all views.
     */ class Gt {
        constructor(t, e, n, s, i) {
            this.key = t, this.documentType = e, this.version = n, this.data = s, this.documentState = i;
        }
        /**
         * Creates a document with no known version or data, but which can serve as
         * base document for mutations.
         */    static newInvalidDocument(t) {
            return new Gt(t, 0 /* INVALID */ , ut.min(), Qt.empty(), 0 /* SYNCED */);
        }
        /**
         * Creates a new document that is known to exist with the given data at the
         * given version.
         */    static newFoundDocument(t, e, n) {
            return new Gt(t, 1 /* FOUND_DOCUMENT */ , e, n, 0 /* SYNCED */);
        }
        /** Creates a new document that is known to not exist at the given version. */    static newNoDocument(t, e) {
            return new Gt(t, 2 /* NO_DOCUMENT */ , e, Qt.empty(), 0 /* SYNCED */);
        }
        /**
         * Creates a new document that is known to exist at the given version but
         * whose data is not known (e.g. a document that was updated without a known
         * base document).
         */    static newUnknownDocument(t, e) {
            return new Gt(t, 3 /* UNKNOWN_DOCUMENT */ , e, Qt.empty(), 2 /* HAS_COMMITTED_MUTATIONS */);
        }
        /**
         * Changes the document type to indicate that it exists and that its version
         * and data are known.
         */    convertToFoundDocument(t, e) {
            return this.version = t, this.documentType = 1 /* FOUND_DOCUMENT */ , this.data = e, 
            this.documentState = 0 /* SYNCED */ , this;
        }
        /**
         * Changes the document type to indicate that it doesn't exist at the given
         * version.
         */    convertToNoDocument(t) {
            return this.version = t, this.documentType = 2 /* NO_DOCUMENT */ , this.data = Qt.empty(), 
            this.documentState = 0 /* SYNCED */ , this;
        }
        /**
         * Changes the document type to indicate that it exists at a given version but
         * that its data is not known (e.g. a document that was updated without a known
         * base document).
         */    convertToUnknownDocument(t) {
            return this.version = t, this.documentType = 3 /* UNKNOWN_DOCUMENT */ , this.data = Qt.empty(), 
            this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;
        }
        setHasCommittedMutations() {
            return this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;
        }
        setHasLocalMutations() {
            return this.documentState = 1 /* HAS_LOCAL_MUTATIONS */ , this;
        }
        get hasLocalMutations() {
            return 1 /* HAS_LOCAL_MUTATIONS */ === this.documentState;
        }
        get hasCommittedMutations() {
            return 2 /* HAS_COMMITTED_MUTATIONS */ === this.documentState;
        }
        get hasPendingWrites() {
            return this.hasLocalMutations || this.hasCommittedMutations;
        }
        isValidDocument() {
            return 0 /* INVALID */ !== this.documentType;
        }
        isFoundDocument() {
            return 1 /* FOUND_DOCUMENT */ === this.documentType;
        }
        isNoDocument() {
            return 2 /* NO_DOCUMENT */ === this.documentType;
        }
        isUnknownDocument() {
            return 3 /* UNKNOWN_DOCUMENT */ === this.documentType;
        }
        isEqual(t) {
            return t instanceof Gt && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);
        }
        mutableCopy() {
            return new Gt(this.key, this.documentType, this.version, this.data.clone(), this.documentState);
        }
        toString() {
            return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;
        }
    }

    /**
     * Compares the value for field `field` in the provided documents. Throws if
     * the field does not exist in both documents.
     */
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Visible for testing
    class zt {
        constructor(t, e = null, n = [], s = [], i = null, r = null, o = null) {
            this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = s, this.limit = i, 
            this.startAt = r, this.endAt = o, this.R = null;
        }
    }

    /**
     * Initializes a Target with a path and optional additional query constraints.
     * Path must currently be empty if this is a collection group query.
     *
     * NOTE: you should always construct `Target` from `Query.toTarget` instead of
     * using this factory method, because `Query` provides an implicit `orderBy`
     * property.
     */ function Ht(t, e = null, n = [], s = [], i = null, r = null, o = null) {
        return new zt(t, e, n, s, i, r, o);
    }

    function Jt(t) {
        const e = K(t);
        if (null === e.R) {
            let t = e.path.canonicalString();
            null !== e.collectionGroup && (t += "|cg:" + e.collectionGroup), t += "|f:", t += e.filters.map((t => ee(t))).join(","), 
            t += "|ob:", t += e.orderBy.map((t => function(t) {
                // TODO(b/29183165): Make this collision robust.
                return t.field.canonicalString() + t.dir;
            }(t))).join(","), vt(e.limit) || (t += "|l:", t += e.limit), e.startAt && (t += "|lb:", 
            t += le(e.startAt)), e.endAt && (t += "|ub:", t += le(e.endAt)), e.R = t;
        }
        return e.R;
    }

    function Yt(t) {
        let e = t.path.canonicalString();
        return null !== t.collectionGroup && (e += " collectionGroup=" + t.collectionGroup), 
        t.filters.length > 0 && (e += `, filters: [${t.filters.map((t => {
        return `${(e = t).field.canonicalString()} ${e.op} ${Ot(e.value)}`;
        /** Returns a debug description for `filter`. */
        var e;
        /** Filter that matches on key fields (i.e. '__name__'). */    })).join(", ")}]`), 
        vt(t.limit) || (e += ", limit: " + t.limit), t.orderBy.length > 0 && (e += `, orderBy: [${t.orderBy.map((t => function(t) {
        return `${t.field.canonicalString()} (${t.dir})`;
    }(t))).join(", ")}]`), t.startAt && (e += ", startAt: " + le(t.startAt)), t.endAt && (e += ", endAt: " + le(t.endAt)), 
        `Target(${e})`;
    }

    function Xt(t, e) {
        if (t.limit !== e.limit) return !1;
        if (t.orderBy.length !== e.orderBy.length) return !1;
        for (let n = 0; n < t.orderBy.length; n++) if (!de(t.orderBy[n], e.orderBy[n])) return !1;
        if (t.filters.length !== e.filters.length) return !1;
        for (let i = 0; i < t.filters.length; i++) if (n = t.filters[i], s = e.filters[i], 
        n.op !== s.op || !n.field.isEqual(s.field) || !Nt(n.value, s.value)) return !1;
        var n, s;
        return t.collectionGroup === e.collectionGroup && (!!t.path.isEqual(e.path) && (!!_e(t.startAt, e.startAt) && _e(t.endAt, e.endAt)));
    }

    function Zt(t) {
        return Dt.isDocumentKey(t.path) && null === t.collectionGroup && 0 === t.filters.length;
    }

    class te extends class {} {
        constructor(t, e, n) {
            super(), this.field = t, this.op = e, this.value = n;
        }
        /**
         * Creates a filter based on the provided arguments.
         */    static create(t, e, n) {
            return t.isKeyField() ? "in" /* IN */ === e || "not-in" /* NOT_IN */ === e ? this.P(t, e, n) : new ne(t, e, n) : "array-contains" /* ARRAY_CONTAINS */ === e ? new oe(t, n) : "in" /* IN */ === e ? new ce(t, n) : "not-in" /* NOT_IN */ === e ? new ae(t, n) : "array-contains-any" /* ARRAY_CONTAINS_ANY */ === e ? new ue(t, n) : new te(t, e, n);
        }
        static P(t, e, n) {
            return "in" /* IN */ === e ? new se(t, n) : new ie(t, n);
        }
        matches(t) {
            const e = t.data.field(this.field);
            // Types do not have to match in NOT_EQUAL filters.
                    return "!=" /* NOT_EQUAL */ === this.op ? null !== e && this.v(xt(e, this.value)) : null !== e && Ct(this.value) === Ct(e) && this.v(xt(e, this.value));
            // Only compare types with matching backend order (such as double and int).
            }
        v(t) {
            switch (this.op) {
              case "<" /* LESS_THAN */ :
                return t < 0;

              case "<=" /* LESS_THAN_OR_EQUAL */ :
                return t <= 0;

              case "==" /* EQUAL */ :
                return 0 === t;

              case "!=" /* NOT_EQUAL */ :
                return 0 !== t;

              case ">" /* GREATER_THAN */ :
                return t > 0;

              case ">=" /* GREATER_THAN_OR_EQUAL */ :
                return t >= 0;

              default:
                return B();
            }
        }
        V() {
            return [ "<" /* LESS_THAN */ , "<=" /* LESS_THAN_OR_EQUAL */ , ">" /* GREATER_THAN */ , ">=" /* GREATER_THAN_OR_EQUAL */ , "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ].indexOf(this.op) >= 0;
        }
    }

    function ee(t) {
        // TODO(b/29183165): Technically, this won't be unique if two values have
        // the same description, such as the int 3 and the string "3". So we should
        // add the types in here somehow, too.
        return t.field.canonicalString() + t.op.toString() + Ot(t.value);
    }

    class ne extends te {
        constructor(t, e, n) {
            super(t, e, n), this.key = Dt.fromName(n.referenceValue);
        }
        matches(t) {
            const e = Dt.comparator(t.key, this.key);
            return this.v(e);
        }
    }

    /** Filter that matches on key fields within an array. */ class se extends te {
        constructor(t, e) {
            super(t, "in" /* IN */ , e), this.keys = re("in" /* IN */ , e);
        }
        matches(t) {
            return this.keys.some((e => e.isEqual(t.key)));
        }
    }

    /** Filter that matches on key fields not present within an array. */ class ie extends te {
        constructor(t, e) {
            super(t, "not-in" /* NOT_IN */ , e), this.keys = re("not-in" /* NOT_IN */ , e);
        }
        matches(t) {
            return !this.keys.some((e => e.isEqual(t.key)));
        }
    }

    function re(t, e) {
        var n;
        return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map((t => Dt.fromName(t.referenceValue)));
    }

    /** A Filter that implements the array-contains operator. */ class oe extends te {
        constructor(t, e) {
            super(t, "array-contains" /* ARRAY_CONTAINS */ , e);
        }
        matches(t) {
            const e = t.data.field(this.field);
            return Bt(e) && kt(e.arrayValue, this.value);
        }
    }

    /** A Filter that implements the IN operator. */ class ce extends te {
        constructor(t, e) {
            super(t, "in" /* IN */ , e);
        }
        matches(t) {
            const e = t.data.field(this.field);
            return null !== e && kt(this.value.arrayValue, e);
        }
    }

    /** A Filter that implements the not-in operator. */ class ae extends te {
        constructor(t, e) {
            super(t, "not-in" /* NOT_IN */ , e);
        }
        matches(t) {
            if (kt(this.value.arrayValue, {
                nullValue: "NULL_VALUE"
            })) return !1;
            const e = t.data.field(this.field);
            return null !== e && !kt(this.value.arrayValue, e);
        }
    }

    /** A Filter that implements the array-contains-any operator. */ class ue extends te {
        constructor(t, e) {
            super(t, "array-contains-any" /* ARRAY_CONTAINS_ANY */ , e);
        }
        matches(t) {
            const e = t.data.field(this.field);
            return !(!Bt(e) || !e.arrayValue.values) && e.arrayValue.values.some((t => kt(this.value.arrayValue, t)));
        }
    }

    /**
     * Represents a bound of a query.
     *
     * The bound is specified with the given components representing a position and
     * whether it's just before or just after the position (relative to whatever the
     * query order is).
     *
     * The position represents a logical index position for a query. It's a prefix
     * of values for the (potentially implicit) order by clauses of a query.
     *
     * Bound provides a function to determine whether a document comes before or
     * after a bound. This is influenced by whether the position is just before or
     * just after the provided values.
     */ class he {
        constructor(t, e) {
            this.position = t, this.before = e;
        }
    }

    function le(t) {
        // TODO(b/29183165): Make this collision robust.
        return `${t.before ? "b" : "a"}:${t.position.map((t => Ot(t))).join(",")}`;
    }

    /**
     * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
     */ class fe {
        constructor(t, e = "asc" /* ASCENDING */) {
            this.field = t, this.dir = e;
        }
    }

    function de(t, e) {
        return t.dir === e.dir && t.field.isEqual(e.field);
    }

    /**
     * Returns true if a document sorts before a bound using the provided sort
     * order.
     */ function we(t, e, n) {
        let s = 0;
        for (let i = 0; i < t.position.length; i++) {
            const r = e[i], o = t.position[i];
            if (r.field.isKeyField()) s = Dt.comparator(Dt.fromName(o.referenceValue), n.key); else {
                s = xt(o, n.data.field(r.field));
            }
            if ("desc" /* DESCENDING */ === r.dir && (s *= -1), 0 !== s) break;
        }
        return t.before ? s <= 0 : s < 0;
    }

    function _e(t, e) {
        if (null === t) return null === e;
        if (null === e) return !1;
        if (t.before !== e.before || t.position.length !== e.position.length) return !1;
        for (let n = 0; n < t.position.length; n++) {
            if (!Nt(t.position[n], e.position[n])) return !1;
        }
        return !0;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Query encapsulates all the query attributes we support in the SDK. It can
     * be run against the LocalStore, as well as be converted to a `Target` to
     * query the RemoteStore results.
     *
     * Visible for testing.
     */ class me {
        /**
         * Initializes a Query with a path and optional additional query constraints.
         * Path must currently be empty if this is a collection group query.
         */
        constructor(t, e = null, n = [], s = [], i = null, r = "F" /* First */ , o = null, c = null) {
            this.path = t, this.collectionGroup = e, this.explicitOrderBy = n, this.filters = s, 
            this.limit = i, this.limitType = r, this.startAt = o, this.endAt = c, this.S = null, 
            // The corresponding `Target` of this `Query` instance.
            this.D = null, this.startAt, this.endAt;
        }
    }

    /** Creates a new Query instance with the options provided. */ function ge(t, e, n, s, i, r, o, c) {
        return new me(t, e, n, s, i, r, o, c);
    }

    /** Creates a new Query for a query that matches all documents at `path` */ function ye(t) {
        return new me(t);
    }

    /**
     * Helper to convert a collection group query into a collection query at a
     * specific path. This is used when executing collection group queries, since
     * we have to split the query into a set of collection queries at multiple
     * paths.
     */ function pe(t) {
        return !vt(t.limit) && "F" /* First */ === t.limitType;
    }

    function Te(t) {
        return !vt(t.limit) && "L" /* Last */ === t.limitType;
    }

    function Ee(t) {
        return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;
    }

    function Ie(t) {
        for (const e of t.filters) if (e.V()) return e.field;
        return null;
    }

    /**
     * Checks if any of the provided Operators are included in the query and
     * returns the first one that is, or null if none are.
     */
    /**
     * Returns whether the query matches a collection group rather than a specific
     * collection.
     */
    function Ae(t) {
        return null !== t.collectionGroup;
    }

    /**
     * Returns the implicit order by constraint that is used to execute the Query,
     * which can be different from the order by constraints the user provided (e.g.
     * the SDK and backend always orders by `__name__`).
     */ function Re(t) {
        const e = K(t);
        if (null === e.S) {
            e.S = [];
            const t = Ie(e), n = Ee(e);
            if (null !== t && null === n) 
            // In order to implicitly add key ordering, we must also add the
            // inequality filter field for it to be a valid query.
            // Note that the default inequality field and key ordering is ascending.
            t.isKeyField() || e.S.push(new fe(t)), e.S.push(new fe(mt.keyField(), "asc" /* ASCENDING */)); else {
                let t = !1;
                for (const n of e.explicitOrderBy) e.S.push(n), n.field.isKeyField() && (t = !0);
                if (!t) {
                    // The order of the implicit key ordering always matches the last
                    // explicit order by
                    const t = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : "asc" /* ASCENDING */;
                    e.S.push(new fe(mt.keyField(), t));
                }
            }
        }
        return e.S;
    }

    /**
     * Converts this `Query` instance to it's corresponding `Target` representation.
     */ function be(t) {
        const e = K(t);
        if (!e.D) if ("F" /* First */ === e.limitType) e.D = Ht(e.path, e.collectionGroup, Re(e), e.filters, e.limit, e.startAt, e.endAt); else {
            // Flip the orderBy directions since we want the last results
            const t = [];
            for (const n of Re(e)) {
                const e = "desc" /* DESCENDING */ === n.dir ? "asc" /* ASCENDING */ : "desc" /* DESCENDING */;
                t.push(new fe(n.field, e));
            }
            // We need to swap the cursors to match the now-flipped query ordering.
                    const n = e.endAt ? new he(e.endAt.position, !e.endAt.before) : null, s = e.startAt ? new he(e.startAt.position, !e.startAt.before) : null;
            // Now return as a LimitType.First query.
            e.D = Ht(e.path, e.collectionGroup, t, e.filters, e.limit, n, s);
        }
        return e.D;
    }

    function Pe(t, e, n) {
        return new me(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);
    }

    function ve(t, e) {
        return Xt(be(t), be(e)) && t.limitType === e.limitType;
    }

    // TODO(b/29183165): This is used to get a unique string from a query to, for
    // example, use as a dictionary key, but the implementation is subject to
    // collisions. Make it collision-free.
    function Ve(t) {
        return `${Jt(be(t))}|lt:${t.limitType}`;
    }

    function Se(t) {
        return `Query(target=${Yt(be(t))}; limitType=${t.limitType})`;
    }

    /** Returns whether `doc` matches the constraints of `query`. */ function De(t, e) {
        return e.isFoundDocument() && function(t, e) {
            const n = e.key.path;
            return null !== t.collectionGroup ? e.key.hasCollectionId(t.collectionGroup) && t.path.isPrefixOf(n) : Dt.isDocumentKey(t.path) ? t.path.isEqual(n) : t.path.isImmediateParentOf(n);
        }
        /**
     * A document must have a value for every ordering clause in order to show up
     * in the results.
     */ (t, e) && function(t, e) {
            for (const n of t.explicitOrderBy) 
            // order by key always matches
            if (!n.field.isKeyField() && null === e.data.field(n.field)) return !1;
            return !0;
        }(t, e) && function(t, e) {
            for (const n of t.filters) if (!n.matches(e)) return !1;
            return !0;
        }
        /** Makes sure a document is within the bounds, if provided. */ (t, e) && function(t, e) {
            if (t.startAt && !we(t.startAt, Re(t), e)) return !1;
            if (t.endAt && we(t.endAt, Re(t), e)) return !1;
            return !0;
        }
        /**
     * Returns a new comparator function that can be used to compare two documents
     * based on the Query's ordering constraint.
     */ (t, e);
    }

    function Ce(t) {
        return (e, n) => {
            let s = !1;
            for (const i of Re(t)) {
                const t = Ne(i, e, n);
                if (0 !== t) return t;
                s = s || i.field.isKeyField();
            }
            return 0;
        };
    }

    function Ne(t, e, n) {
        const s = t.field.isKeyField() ? Dt.comparator(e.key, n.key) : function(t, e, n) {
            const s = e.data.field(t), i = n.data.field(t);
            return null !== s && null !== i ? xt(s, i) : B();
        }(t.field, e, n);
        switch (t.dir) {
          case "asc" /* ASCENDING */ :
            return s;

          case "desc" /* DESCENDING */ :
            return -1 * s;

          default:
            return B();
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns an DoubleValue for `value` that is encoded based the serializer's
     * `useProto3Json` setting.
     */ function ke(t, e) {
        if (t.C) {
            if (isNaN(e)) return {
                doubleValue: "NaN"
            };
            if (e === 1 / 0) return {
                doubleValue: "Infinity"
            };
            if (e === -1 / 0) return {
                doubleValue: "-Infinity"
            };
        }
        return {
            doubleValue: Vt(e) ? "-0" : e
        };
    }

    /**
     * Returns an IntegerValue for `value`.
     */ function xe(t) {
        return {
            integerValue: "" + t
        };
    }

    /**
     * Returns a value for a number that's appropriate to put into a proto.
     * The return value is an IntegerValue if it can safely represent the value,
     * otherwise a DoubleValue is returned.
     */ function $e(t, e) {
        return St(e) ? xe(e) : ke(t, e);
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Used to represent a field transform on a mutation. */ class Oe {
        constructor() {
            // Make sure that the structural type of `TransformOperation` is unique.
            // See https://github.com/microsoft/TypeScript/issues/5451
            this._ = void 0;
        }
    }

    /**
     * Computes the local transform result against the provided `previousValue`,
     * optionally using the provided localWriteTime.
     */ function Me(t, e, n) {
        return t instanceof Be ? function(t, e) {
            const n = {
                fields: {
                    __type__: {
                        stringValue: "server_timestamp"
                    },
                    __local_write_time__: {
                        timestampValue: {
                            seconds: t.seconds,
                            nanos: t.nanoseconds
                        }
                    }
                }
            };
            return e && (n.fields.__previous_value__ = e), {
                mapValue: n
            };
        }(n, e) : t instanceof Ue ? qe(t, e) : t instanceof Ke ? je(t, e) : function(t, e) {
            // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
            // precision and resolves overflows by reducing precision, we do not
            // manually cap overflows at 2^63.
            const n = Le(t, e), s = We(n) + We(t.N);
            return Lt(n) && Lt(t.N) ? xe(s) : ke(t.k, s);
        }(t, e);
    }

    /**
     * Computes a final transform result after the transform has been acknowledged
     * by the server, potentially using the server-provided transformResult.
     */ function Fe(t, e, n) {
        // The server just sends null as the transform result for array operations,
        // so we have to calculate a result the same as we do for local
        // applications.
        return t instanceof Ue ? qe(t, e) : t instanceof Ke ? je(t, e) : n;
    }

    /**
     * If this transform operation is not idempotent, returns the base value to
     * persist for this transform. If a base value is returned, the transform
     * operation is always applied to this base value, even if document has
     * already been updated.
     *
     * Base values provide consistent behavior for non-idempotent transforms and
     * allow us to return the same latency-compensated value even if the backend
     * has already applied the transform operation. The base value is null for
     * idempotent transforms, as they can be re-played even if the backend has
     * already applied them.
     *
     * @returns a base value to store along with the mutation, or null for
     * idempotent transforms.
     */ function Le(t, e) {
        return t instanceof Qe ? Lt(n = e) || function(t) {
            return !!t && "doubleValue" in t;
        }
        /** Returns true if `value` is either an IntegerValue or a DoubleValue. */ (n) ? e : {
            integerValue: 0
        } : null;
        var n;
    }

    /** Transforms a value into a server-generated timestamp. */
    class Be extends Oe {}

    /** Transforms an array value via a union operation. */ class Ue extends Oe {
        constructor(t) {
            super(), this.elements = t;
        }
    }

    function qe(t, e) {
        const n = Ge(e);
        for (const e of t.elements) n.some((t => Nt(t, e))) || n.push(e);
        return {
            arrayValue: {
                values: n
            }
        };
    }

    /** Transforms an array value via a remove operation. */ class Ke extends Oe {
        constructor(t) {
            super(), this.elements = t;
        }
    }

    function je(t, e) {
        let n = Ge(e);
        for (const e of t.elements) n = n.filter((t => !Nt(t, e)));
        return {
            arrayValue: {
                values: n
            }
        };
    }

    /**
     * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
     * transforms. Converts all field values to integers or doubles, but unlike the
     * backend does not cap integer values at 2^63. Instead, JavaScript number
     * arithmetic is used and precision loss can occur for values greater than 2^53.
     */ class Qe extends Oe {
        constructor(t, e) {
            super(), this.k = t, this.N = e;
        }
    }

    function We(t) {
        return It(t.integerValue || t.doubleValue);
    }

    function Ge(t) {
        return Bt(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
    }

    function He(t, e) {
        return t.field.isEqual(e.field) && function(t, e) {
            return t instanceof Ue && e instanceof Ue || t instanceof Ke && e instanceof Ke ? ot(t.elements, e.elements, Nt) : t instanceof Qe && e instanceof Qe ? Nt(t.N, e.N) : t instanceof Be && e instanceof Be;
        }(t.transform, e.transform);
    }

    /** The result of successfully applying a mutation to the backend. */
    class Je {
        constructor(
        /**
         * The version at which the mutation was committed:
         *
         * - For most operations, this is the updateTime in the WriteResult.
         * - For deletes, the commitTime of the WriteResponse (because deletes are
         *   not stored and have no updateTime).
         *
         * Note that these versions can be different: No-op writes will not change
         * the updateTime even though the commitTime advances.
         */
        t, 
        /**
         * The resulting fields returned from the backend after a mutation
         * containing field transforms has been committed. Contains one FieldValue
         * for each FieldTransform that was in the mutation.
         *
         * Will be empty if the mutation did not contain any field transforms.
         */
        e) {
            this.version = t, this.transformResults = e;
        }
    }

    /**
     * Encodes a precondition for a mutation. This follows the model that the
     * backend accepts with the special case of an explicit "empty" precondition
     * (meaning no precondition).
     */ class Ye {
        constructor(t, e) {
            this.updateTime = t, this.exists = e;
        }
        /** Creates a new empty Precondition. */    static none() {
            return new Ye;
        }
        /** Creates a new Precondition with an exists flag. */    static exists(t) {
            return new Ye(void 0, t);
        }
        /** Creates a new Precondition based on a version a document exists at. */    static updateTime(t) {
            return new Ye(t);
        }
        /** Returns whether this Precondition is empty. */    get isNone() {
            return void 0 === this.updateTime && void 0 === this.exists;
        }
        isEqual(t) {
            return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
        }
    }

    /** Returns true if the preconditions is valid for the given document. */ function Xe(t, e) {
        return void 0 !== t.updateTime ? e.isFoundDocument() && e.version.isEqual(t.updateTime) : void 0 === t.exists || t.exists === e.isFoundDocument();
    }

    /**
     * A mutation describes a self-contained change to a document. Mutations can
     * create, replace, delete, and update subsets of documents.
     *
     * Mutations not only act on the value of the document but also its version.
     *
     * For local mutations (mutations that haven't been committed yet), we preserve
     * the existing version for Set and Patch mutations. For Delete mutations, we
     * reset the version to 0.
     *
     * Here's the expected transition table.
     *
     * MUTATION           APPLIED TO            RESULTS IN
     *
     * SetMutation        Document(v3)          Document(v3)
     * SetMutation        NoDocument(v3)        Document(v0)
     * SetMutation        InvalidDocument(v0)   Document(v0)
     * PatchMutation      Document(v3)          Document(v3)
     * PatchMutation      NoDocument(v3)        NoDocument(v3)
     * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)
     * DeleteMutation     Document(v3)          NoDocument(v0)
     * DeleteMutation     NoDocument(v3)        NoDocument(v0)
     * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)
     *
     * For acknowledged mutations, we use the updateTime of the WriteResponse as
     * the resulting version for Set and Patch mutations. As deletes have no
     * explicit update time, we use the commitTime of the WriteResponse for
     * Delete mutations.
     *
     * If a mutation is acknowledged by the backend but fails the precondition check
     * locally, we transition to an `UnknownDocument` and rely on Watch to send us
     * the updated version.
     *
     * Field transforms are used only with Patch and Set Mutations. We use the
     * `updateTransforms` message to store transforms, rather than the `transforms`s
     * messages.
     *
     * ## Subclassing Notes
     *
     * Every type of mutation needs to implement its own applyToRemoteDocument() and
     * applyToLocalView() to implement the actual behavior of applying the mutation
     * to some source document (see `setMutationApplyToRemoteDocument()` for an
     * example).
     */ class Ze {}

    /**
     * Applies this mutation to the given document for the purposes of computing a
     * new remote document. If the input document doesn't match the expected state
     * (e.g. it is invalid or outdated), the document type may transition to
     * unknown.
     *
     * @param mutation - The mutation to apply.
     * @param document - The document to mutate. The input document can be an
     *     invalid document if the client has no knowledge of the pre-mutation state
     *     of the document.
     * @param mutationResult - The result of applying the mutation from the backend.
     */ function tn(t, e, n) {
        t instanceof on ? function(t, e, n) {
            // Unlike setMutationApplyToLocalView, if we're applying a mutation to a
            // remote document the server has accepted the mutation so the precondition
            // must have held.
            const s = t.value.clone(), i = un(t.fieldTransforms, e, n.transformResults);
            s.setAll(i), e.convertToFoundDocument(n.version, s).setHasCommittedMutations();
        }(t, e, n) : t instanceof cn ? function(t, e, n) {
            if (!Xe(t.precondition, e)) 
            // Since the mutation was not rejected, we know that the precondition
            // matched on the backend. We therefore must not have the expected version
            // of the document in our cache and convert to an UnknownDocument with a
            // known updateTime.
            return void e.convertToUnknownDocument(n.version);
            const s = un(t.fieldTransforms, e, n.transformResults), i = e.data;
            i.setAll(an(t)), i.setAll(s), e.convertToFoundDocument(n.version, i).setHasCommittedMutations();
        }(t, e, n) : function(t, e, n) {
            // Unlike applyToLocalView, if we're applying a mutation to a remote
            // document the server has accepted the mutation so the precondition must
            // have held.
            e.convertToNoDocument(n.version).setHasCommittedMutations();
        }(0, e, n);
    }

    /**
     * Applies this mutation to the given document for the purposes of computing
     * the new local view of a document. If the input document doesn't match the
     * expected state, the document is not modified.
     *
     * @param mutation - The mutation to apply.
     * @param document - The document to mutate. The input document can be an
     *     invalid document if the client has no knowledge of the pre-mutation state
     *     of the document.
     * @param localWriteTime - A timestamp indicating the local write time of the
     *     batch this mutation is a part of.
     */ function en(t, e, n) {
        t instanceof on ? function(t, e, n) {
            if (!Xe(t.precondition, e)) 
            // The mutation failed to apply (e.g. a document ID created with add()
            // caused a name collision).
            return;
            const s = t.value.clone(), i = hn(t.fieldTransforms, n, e);
            s.setAll(i), e.convertToFoundDocument(rn(e), s).setHasLocalMutations();
        }
        /**
     * A mutation that modifies fields of the document at the given key with the
     * given values. The values are applied through a field mask:
     *
     *  * When a field is in both the mask and the values, the corresponding field
     *    is updated.
     *  * When a field is in neither the mask nor the values, the corresponding
     *    field is unmodified.
     *  * When a field is in the mask but not in the values, the corresponding field
     *    is deleted.
     *  * When a field is not in the mask but is in the values, the values map is
     *    ignored.
     */ (t, e, n) : t instanceof cn ? function(t, e, n) {
            if (!Xe(t.precondition, e)) return;
            const s = hn(t.fieldTransforms, n, e), i = e.data;
            i.setAll(an(t)), i.setAll(s), e.convertToFoundDocument(rn(e), i).setHasLocalMutations();
        }
        /**
     * Returns a FieldPath/Value map with the content of the PatchMutation.
     */ (t, e, n) : function(t, e) {
            Xe(t.precondition, e) && 
            // We don't call `setHasLocalMutations()` since we want to be backwards
            // compatible with the existing SDK behavior.
            e.convertToNoDocument(ut.min());
        }
        /**
     * A mutation that verifies the existence of the document at the given key with
     * the provided precondition.
     *
     * The `verify` operation is only used in Transactions, and this class serves
     * primarily to facilitate serialization into protos.
     */ (t, e);
    }

    /**
     * If this mutation is not idempotent, returns the base value to persist with
     * this mutation. If a base value is returned, the mutation is always applied
     * to this base value, even if document has already been updated.
     *
     * The base value is a sparse object that consists of only the document
     * fields for which this mutation contains a non-idempotent transformation
     * (e.g. a numeric increment). The provided value guarantees consistent
     * behavior for non-idempotent transforms and allow us to return the same
     * latency-compensated value even if the backend has already applied the
     * mutation. The base value is null for idempotent mutations, as they can be
     * re-played even if the backend has already applied them.
     *
     * @returns a base value to store along with the mutation, or null for
     * idempotent mutations.
     */ function nn(t, e) {
        let n = null;
        for (const s of t.fieldTransforms) {
            const t = e.data.field(s.field), i = Le(s.transform, t || null);
            null != i && (null == n && (n = Qt.empty()), n.set(s.field, i));
        }
        return n || null;
    }

    function sn(t, e) {
        return t.type === e.type && (!!t.key.isEqual(e.key) && (!!t.precondition.isEqual(e.precondition) && (!!function(t, e) {
            return void 0 === t && void 0 === e || !(!t || !e) && ot(t, e, ((t, e) => He(t, e)));
        }(t.fieldTransforms, e.fieldTransforms) && (0 /* Set */ === t.type ? t.value.isEqual(e.value) : 1 /* Patch */ !== t.type || t.data.isEqual(e.data) && t.fieldMask.isEqual(e.fieldMask)))));
    }

    /**
     * Returns the version from the given document for use as the result of a
     * mutation. Mutations are defined to return the version of the base document
     * only if it is an existing document. Deleted and unknown documents have a
     * post-mutation version of SnapshotVersion.min().
     */ function rn(t) {
        return t.isFoundDocument() ? t.version : ut.min();
    }

    /**
     * A mutation that creates or replaces the document at the given key with the
     * object value contents.
     */ class on extends Ze {
        constructor(t, e, n, s = []) {
            super(), this.key = t, this.value = e, this.precondition = n, this.fieldTransforms = s, 
            this.type = 0 /* Set */;
        }
    }

    class cn extends Ze {
        constructor(t, e, n, s, i = []) {
            super(), this.key = t, this.data = e, this.fieldMask = n, this.precondition = s, 
            this.fieldTransforms = i, this.type = 1 /* Patch */;
        }
    }

    function an(t) {
        const e = new Map;
        return t.fieldMask.fields.forEach((n => {
            if (!n.isEmpty()) {
                const s = t.data.field(n);
                e.set(n, s);
            }
        })), e;
    }

    /**
     * Creates a list of "transform results" (a transform result is a field value
     * representing the result of applying a transform) for use after a mutation
     * containing transforms has been acknowledged by the server.
     *
     * @param fieldTransforms - The field transforms to apply the result to.
     * @param mutableDocument - The current state of the document after applying all
     * previous mutations.
     * @param serverTransformResults - The transform results received by the server.
     * @returns The transform results list.
     */ function un(t, e, n) {
        const s = new Map;
        U(t.length === n.length);
        for (let i = 0; i < n.length; i++) {
            const r = t[i], o = r.transform, c = e.data.field(r.field);
            s.set(r.field, Fe(o, c, n[i]));
        }
        return s;
    }

    /**
     * Creates a list of "transform results" (a transform result is a field value
     * representing the result of applying a transform) for use when applying a
     * transform locally.
     *
     * @param fieldTransforms - The field transforms to apply the result to.
     * @param localWriteTime - The local time of the mutation (used to
     *     generate ServerTimestampValues).
     * @param mutableDocument - The current state of the document after applying all
     *     previous mutations.
     * @returns The transform results list.
     */ function hn(t, e, n) {
        const s = new Map;
        for (const i of t) {
            const t = i.transform, r = n.data.field(i.field);
            s.set(i.field, Me(t, r, e));
        }
        return s;
    }

    /** A mutation that deletes the document at the given key. */ class ln extends Ze {
        constructor(t, e) {
            super(), this.key = t, this.precondition = e, this.type = 2 /* Delete */ , this.fieldTransforms = [];
        }
    }

    class fn extends Ze {
        constructor(t, e) {
            super(), this.key = t, this.precondition = e, this.type = 3 /* Verify */ , this.fieldTransforms = [];
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class dn {
        // TODO(b/33078163): just use simplest form of existence filter for now
        constructor(t) {
            this.count = t;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Error Codes describing the different ways GRPC can fail. These are copied
     * directly from GRPC's sources here:
     *
     * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
     *
     * Important! The names of these identifiers matter because the string forms
     * are used for reverse lookups from the webchannel stream. Do NOT change the
     * names of these identifiers or change this into a const enum.
     */ var wn, _n;

    /**
     * Determines whether an error code represents a permanent error when received
     * in response to a non-write operation.
     *
     * See isPermanentWriteError for classifying write errors.
     */
    function mn(t) {
        switch (t) {
          default:
            return B();

          case j.CANCELLED:
          case j.UNKNOWN:
          case j.DEADLINE_EXCEEDED:
          case j.RESOURCE_EXHAUSTED:
          case j.INTERNAL:
          case j.UNAVAILABLE:
     // Unauthenticated means something went wrong with our token and we need
            // to retry with new credentials which will happen automatically.
                  case j.UNAUTHENTICATED:
            return !1;

          case j.INVALID_ARGUMENT:
          case j.NOT_FOUND:
          case j.ALREADY_EXISTS:
          case j.PERMISSION_DENIED:
          case j.FAILED_PRECONDITION:
     // Aborted might be retried in some scenarios, but that is dependant on
            // the context and should handled individually by the calling code.
            // See https://cloud.google.com/apis/design/errors.
                  case j.ABORTED:
          case j.OUT_OF_RANGE:
          case j.UNIMPLEMENTED:
          case j.DATA_LOSS:
            return !0;
        }
    }

    /**
     * Determines whether an error code represents a permanent error when received
     * in response to a write operation.
     *
     * Write operations must be handled specially because as of b/119437764, ABORTED
     * errors on the write stream should be retried too (even though ABORTED errors
     * are not generally retryable).
     *
     * Note that during the initial handshake on the write stream an ABORTED error
     * signals that we should discard our stream token (i.e. it is permanent). This
     * means a handshake error should be classified with isPermanentError, above.
     */
    /**
     * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
     * are not the same as HTTP status codes.
     *
     * @returns The Code equivalent to the given GRPC status code. Fails if there
     *     is no match.
     */
    function gn(t) {
        if (void 0 === t) 
        // This shouldn't normally happen, but in certain error cases (like trying
        // to send invalid proto messages) we may get an error with no GRPC code.
        return M("GRPC error has no .code"), j.UNKNOWN;
        switch (t) {
          case wn.OK:
            return j.OK;

          case wn.CANCELLED:
            return j.CANCELLED;

          case wn.UNKNOWN:
            return j.UNKNOWN;

          case wn.DEADLINE_EXCEEDED:
            return j.DEADLINE_EXCEEDED;

          case wn.RESOURCE_EXHAUSTED:
            return j.RESOURCE_EXHAUSTED;

          case wn.INTERNAL:
            return j.INTERNAL;

          case wn.UNAVAILABLE:
            return j.UNAVAILABLE;

          case wn.UNAUTHENTICATED:
            return j.UNAUTHENTICATED;

          case wn.INVALID_ARGUMENT:
            return j.INVALID_ARGUMENT;

          case wn.NOT_FOUND:
            return j.NOT_FOUND;

          case wn.ALREADY_EXISTS:
            return j.ALREADY_EXISTS;

          case wn.PERMISSION_DENIED:
            return j.PERMISSION_DENIED;

          case wn.FAILED_PRECONDITION:
            return j.FAILED_PRECONDITION;

          case wn.ABORTED:
            return j.ABORTED;

          case wn.OUT_OF_RANGE:
            return j.OUT_OF_RANGE;

          case wn.UNIMPLEMENTED:
            return j.UNIMPLEMENTED;

          case wn.DATA_LOSS:
            return j.DATA_LOSS;

          default:
            return B();
        }
    }

    /**
     * Converts an HTTP response's error status to the equivalent error code.
     *
     * @param status - An HTTP error response status ("FAILED_PRECONDITION",
     * "UNKNOWN", etc.)
     * @returns The equivalent Code. Non-matching responses are mapped to
     *     Code.UNKNOWN.
     */ (_n = wn || (wn = {}))[_n.OK = 0] = "OK", _n[_n.CANCELLED = 1] = "CANCELLED", 
    _n[_n.UNKNOWN = 2] = "UNKNOWN", _n[_n.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", 
    _n[_n.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", _n[_n.NOT_FOUND = 5] = "NOT_FOUND", 
    _n[_n.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", _n[_n.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", 
    _n[_n.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", _n[_n.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", 
    _n[_n.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", _n[_n.ABORTED = 10] = "ABORTED", 
    _n[_n.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", _n[_n.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", 
    _n[_n.INTERNAL = 13] = "INTERNAL", _n[_n.UNAVAILABLE = 14] = "UNAVAILABLE", _n[_n.DATA_LOSS = 15] = "DATA_LOSS";

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // An immutable sorted map implementation, based on a Left-leaning Red-Black
    // tree.
    class yn {
        constructor(t, e) {
            this.comparator = t, this.root = e || Tn.EMPTY;
        }
        // Returns a copy of the map, with the specified key/value added or replaced.
        insert(t, e) {
            return new yn(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, Tn.BLACK, null, null));
        }
        // Returns a copy of the map, with the specified key removed.
        remove(t) {
            return new yn(this.comparator, this.root.remove(t, this.comparator).copy(null, null, Tn.BLACK, null, null));
        }
        // Returns the value of the node with the given key, or null.
        get(t) {
            let e = this.root;
            for (;!e.isEmpty(); ) {
                const n = this.comparator(t, e.key);
                if (0 === n) return e.value;
                n < 0 ? e = e.left : n > 0 && (e = e.right);
            }
            return null;
        }
        // Returns the index of the element in this sorted map, or -1 if it doesn't
        // exist.
        indexOf(t) {
            // Number of nodes that were pruned when descending right
            let e = 0, n = this.root;
            for (;!n.isEmpty(); ) {
                const s = this.comparator(t, n.key);
                if (0 === s) return e + n.left.size;
                s < 0 ? n = n.left : (
                // Count all nodes left of the node plus the node itself
                e += n.left.size + 1, n = n.right);
            }
            // Node not found
                    return -1;
        }
        isEmpty() {
            return this.root.isEmpty();
        }
        // Returns the total number of nodes in the map.
        get size() {
            return this.root.size;
        }
        // Returns the minimum key in the map.
        minKey() {
            return this.root.minKey();
        }
        // Returns the maximum key in the map.
        maxKey() {
            return this.root.maxKey();
        }
        // Traverses the map in key order and calls the specified action function
        // for each key/value pair. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        inorderTraversal(t) {
            return this.root.inorderTraversal(t);
        }
        forEach(t) {
            this.inorderTraversal(((e, n) => (t(e, n), !1)));
        }
        toString() {
            const t = [];
            return this.inorderTraversal(((e, n) => (t.push(`${e}:${n}`), !1))), `{${t.join(", ")}}`;
        }
        // Traverses the map in reverse key order and calls the specified action
        // function for each key/value pair. If action returns true, traversal is
        // aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        reverseTraversal(t) {
            return this.root.reverseTraversal(t);
        }
        // Returns an iterator over the SortedMap.
        getIterator() {
            return new pn(this.root, null, this.comparator, !1);
        }
        getIteratorFrom(t) {
            return new pn(this.root, t, this.comparator, !1);
        }
        getReverseIterator() {
            return new pn(this.root, null, this.comparator, !0);
        }
        getReverseIteratorFrom(t) {
            return new pn(this.root, t, this.comparator, !0);
        }
    }

     // end SortedMap
    // An iterator over an LLRBNode.
    class pn {
        constructor(t, e, n, s) {
            this.isReverse = s, this.nodeStack = [];
            let i = 1;
            for (;!t.isEmpty(); ) if (i = e ? n(t.key, e) : 1, 
            // flip the comparison if we're going in reverse
            s && (i *= -1), i < 0) 
            // This node is less than our start key. ignore it
            t = this.isReverse ? t.left : t.right; else {
                if (0 === i) {
                    // This node is exactly equal to our start key. Push it on the stack,
                    // but stop iterating;
                    this.nodeStack.push(t);
                    break;
                }
                // This node is greater than our start key, add it to the stack and move
                // to the next one
                this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;
            }
        }
        getNext() {
            let t = this.nodeStack.pop();
            const e = {
                key: t.key,
                value: t.value
            };
            if (this.isReverse) for (t = t.left; !t.isEmpty(); ) this.nodeStack.push(t), t = t.right; else for (t = t.right; !t.isEmpty(); ) this.nodeStack.push(t), 
            t = t.left;
            return e;
        }
        hasNext() {
            return this.nodeStack.length > 0;
        }
        peek() {
            if (0 === this.nodeStack.length) return null;
            const t = this.nodeStack[this.nodeStack.length - 1];
            return {
                key: t.key,
                value: t.value
            };
        }
    }

     // end SortedMapIterator
    // Represents a node in a Left-leaning Red-Black tree.
    class Tn {
        constructor(t, e, n, s, i) {
            this.key = t, this.value = e, this.color = null != n ? n : Tn.RED, this.left = null != s ? s : Tn.EMPTY, 
            this.right = null != i ? i : Tn.EMPTY, this.size = this.left.size + 1 + this.right.size;
        }
        // Returns a copy of the current node, optionally replacing pieces of it.
        copy(t, e, n, s, i) {
            return new Tn(null != t ? t : this.key, null != e ? e : this.value, null != n ? n : this.color, null != s ? s : this.left, null != i ? i : this.right);
        }
        isEmpty() {
            return !1;
        }
        // Traverses the tree in key order and calls the specified action function
        // for each node. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        inorderTraversal(t) {
            return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);
        }
        // Traverses the tree in reverse key order and calls the specified action
        // function for each node. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        reverseTraversal(t) {
            return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);
        }
        // Returns the minimum node in the tree.
        min() {
            return this.left.isEmpty() ? this : this.left.min();
        }
        // Returns the maximum key in the tree.
        minKey() {
            return this.min().key;
        }
        // Returns the maximum key in the tree.
        maxKey() {
            return this.right.isEmpty() ? this.key : this.right.maxKey();
        }
        // Returns new tree, with the key/value added.
        insert(t, e, n) {
            let s = this;
            const i = n(t, s.key);
            return s = i < 0 ? s.copy(null, null, null, s.left.insert(t, e, n), null) : 0 === i ? s.copy(null, e, null, null, null) : s.copy(null, null, null, null, s.right.insert(t, e, n)), 
            s.fixUp();
        }
        removeMin() {
            if (this.left.isEmpty()) return Tn.EMPTY;
            let t = this;
            return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), 
            t.fixUp();
        }
        // Returns new tree, with the specified item removed.
        remove(t, e) {
            let n, s = this;
            if (e(t, s.key) < 0) s.left.isEmpty() || s.left.isRed() || s.left.left.isRed() || (s = s.moveRedLeft()), 
            s = s.copy(null, null, null, s.left.remove(t, e), null); else {
                if (s.left.isRed() && (s = s.rotateRight()), s.right.isEmpty() || s.right.isRed() || s.right.left.isRed() || (s = s.moveRedRight()), 
                0 === e(t, s.key)) {
                    if (s.right.isEmpty()) return Tn.EMPTY;
                    n = s.right.min(), s = s.copy(n.key, n.value, null, null, s.right.removeMin());
                }
                s = s.copy(null, null, null, null, s.right.remove(t, e));
            }
            return s.fixUp();
        }
        isRed() {
            return this.color;
        }
        // Returns new tree after performing any needed rotations.
        fixUp() {
            let t = this;
            return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), 
            t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;
        }
        moveRedLeft() {
            let t = this.colorFlip();
            return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), 
            t = t.rotateLeft(), t = t.colorFlip()), t;
        }
        moveRedRight() {
            let t = this.colorFlip();
            return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;
        }
        rotateLeft() {
            const t = this.copy(null, null, Tn.RED, null, this.right.left);
            return this.right.copy(null, null, this.color, t, null);
        }
        rotateRight() {
            const t = this.copy(null, null, Tn.RED, this.left.right, null);
            return this.left.copy(null, null, this.color, null, t);
        }
        colorFlip() {
            const t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);
            return this.copy(null, null, !this.color, t, e);
        }
        // For testing.
        checkMaxDepth() {
            const t = this.check();
            return Math.pow(2, t) <= this.size + 1;
        }
        // In a balanced RB tree, the black-depth (number of black nodes) from root to
        // leaves is equal on both sides.  This function verifies that or asserts.
        check() {
            if (this.isRed() && this.left.isRed()) throw B();
            if (this.right.isRed()) throw B();
            const t = this.left.check();
            if (t !== this.right.check()) throw B();
            return t + (this.isRed() ? 0 : 1);
        }
    }

     // end LLRBNode
    // Empty node is shared between all LLRB trees.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Tn.EMPTY = null, Tn.RED = !0, Tn.BLACK = !1;

    // end LLRBEmptyNode
    Tn.EMPTY = new 
    // Represents an empty node (a leaf node in the Red-Black Tree).
    class {
        constructor() {
            this.size = 0;
        }
        get key() {
            throw B();
        }
        get value() {
            throw B();
        }
        get color() {
            throw B();
        }
        get left() {
            throw B();
        }
        get right() {
            throw B();
        }
        // Returns a copy of the current node.
        copy(t, e, n, s, i) {
            return this;
        }
        // Returns a copy of the tree, with the specified key/value added.
        insert(t, e, n) {
            return new Tn(t, e);
        }
        // Returns a copy of the tree, with the specified key removed.
        remove(t, e) {
            return this;
        }
        isEmpty() {
            return !0;
        }
        inorderTraversal(t) {
            return !1;
        }
        reverseTraversal(t) {
            return !1;
        }
        minKey() {
            return null;
        }
        maxKey() {
            return null;
        }
        isRed() {
            return !1;
        }
        // For testing.
        checkMaxDepth() {
            return !0;
        }
        check() {
            return 0;
        }
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * SortedSet is an immutable (copy-on-write) collection that holds elements
     * in order specified by the provided comparator.
     *
     * NOTE: if provided comparator returns 0 for two elements, we consider them to
     * be equal!
     */
    class En {
        constructor(t) {
            this.comparator = t, this.data = new yn(this.comparator);
        }
        has(t) {
            return null !== this.data.get(t);
        }
        first() {
            return this.data.minKey();
        }
        last() {
            return this.data.maxKey();
        }
        get size() {
            return this.data.size;
        }
        indexOf(t) {
            return this.data.indexOf(t);
        }
        /** Iterates elements in order defined by "comparator" */    forEach(t) {
            this.data.inorderTraversal(((e, n) => (t(e), !1)));
        }
        /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */    forEachInRange(t, e) {
            const n = this.data.getIteratorFrom(t[0]);
            for (;n.hasNext(); ) {
                const s = n.getNext();
                if (this.comparator(s.key, t[1]) >= 0) return;
                e(s.key);
            }
        }
        /**
         * Iterates over `elem`s such that: start &lt;= elem until false is returned.
         */    forEachWhile(t, e) {
            let n;
            for (n = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); n.hasNext(); ) {
                if (!t(n.getNext().key)) return;
            }
        }
        /** Finds the least element greater than or equal to `elem`. */    firstAfterOrEqual(t) {
            const e = this.data.getIteratorFrom(t);
            return e.hasNext() ? e.getNext().key : null;
        }
        getIterator() {
            return new In(this.data.getIterator());
        }
        getIteratorFrom(t) {
            return new In(this.data.getIteratorFrom(t));
        }
        /** Inserts or updates an element */    add(t) {
            return this.copy(this.data.remove(t).insert(t, !0));
        }
        /** Deletes an element */    delete(t) {
            return this.has(t) ? this.copy(this.data.remove(t)) : this;
        }
        isEmpty() {
            return this.data.isEmpty();
        }
        unionWith(t) {
            let e = this;
            // Make sure `result` always refers to the larger one of the two sets.
                    return e.size < t.size && (e = t, t = this), t.forEach((t => {
                e = e.add(t);
            })), e;
        }
        isEqual(t) {
            if (!(t instanceof En)) return !1;
            if (this.size !== t.size) return !1;
            const e = this.data.getIterator(), n = t.data.getIterator();
            for (;e.hasNext(); ) {
                const t = e.getNext().key, s = n.getNext().key;
                if (0 !== this.comparator(t, s)) return !1;
            }
            return !0;
        }
        toArray() {
            const t = [];
            return this.forEach((e => {
                t.push(e);
            })), t;
        }
        toString() {
            const t = [];
            return this.forEach((e => t.push(e))), "SortedSet(" + t.toString() + ")";
        }
        copy(t) {
            const e = new En(this.comparator);
            return e.data = t, e;
        }
    }

    class In {
        constructor(t) {
            this.iter = t;
        }
        getNext() {
            return this.iter.getNext().key;
        }
        hasNext() {
            return this.iter.hasNext();
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const An = new yn(Dt.comparator);

    function Rn() {
        return An;
    }

    const bn = new yn(Dt.comparator);

    function Pn() {
        return bn;
    }

    const vn = new yn(Dt.comparator);

    function Vn() {
        return vn;
    }

    const Sn = new En(Dt.comparator);

    function Dn(...t) {
        let e = Sn;
        for (const n of t) e = e.add(n);
        return e;
    }

    const Cn = new En(rt);

    function Nn() {
        return Cn;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An event from the RemoteStore. It is split into targetChanges (changes to the
     * state or the set of documents in our watched targets) and documentUpdates
     * (changes to the actual documents).
     */ class kn {
        constructor(
        /**
         * The snapshot version this event brings us up to, or MIN if not set.
         */
        t, 
        /**
         * A map from target to changes to the target. See TargetChange.
         */
        e, 
        /**
         * A set of targets that is known to be inconsistent. Listens for these
         * targets should be re-established without resume tokens.
         */
        n, 
        /**
         * A set of which documents have changed or been deleted, along with the
         * doc's new values (if not deleted).
         */
        s, 
        /**
         * A set of which document updates are due only to limbo resolution targets.
         */
        i) {
            this.snapshotVersion = t, this.targetChanges = e, this.targetMismatches = n, this.documentUpdates = s, 
            this.resolvedLimboDocuments = i;
        }
        /**
         * HACK: Views require RemoteEvents in order to determine whether the view is
         * CURRENT, but secondary tabs don't receive remote events. So this method is
         * used to create a synthesized RemoteEvent that can be used to apply a
         * CURRENT status change to a View, for queries executed in a different tab.
         */
        // PORTING NOTE: Multi-tab only
        static createSynthesizedRemoteEventForCurrentChange(t, e) {
            const n = new Map;
            return n.set(t, xn.createSynthesizedTargetChangeForCurrentChange(t, e)), new kn(ut.min(), n, Nn(), Rn(), Dn());
        }
    }

    /**
     * A TargetChange specifies the set of changes for a specific target as part of
     * a RemoteEvent. These changes track which documents are added, modified or
     * removed, as well as the target's resume token and whether the target is
     * marked CURRENT.
     * The actual changes *to* documents are not part of the TargetChange since
     * documents may be part of multiple targets.
     */ class xn {
        constructor(
        /**
         * An opaque, server-assigned token that allows watching a query to be resumed
         * after disconnecting without retransmitting all the data that matches the
         * query. The resume token essentially identifies a point in time from which
         * the server should resume sending results.
         */
        t, 
        /**
         * The "current" (synced) status of this target. Note that "current"
         * has special meaning in the RPC protocol that implies that a target is
         * both up-to-date and consistent with the rest of the watch stream.
         */
        e, 
        /**
         * The set of documents that were newly assigned to this target as part of
         * this remote event.
         */
        n, 
        /**
         * The set of documents that were already assigned to this target but received
         * an update during this remote event.
         */
        s, 
        /**
         * The set of documents that were removed from this target as part of this
         * remote event.
         */
        i) {
            this.resumeToken = t, this.current = e, this.addedDocuments = n, this.modifiedDocuments = s, 
            this.removedDocuments = i;
        }
        /**
         * This method is used to create a synthesized TargetChanges that can be used to
         * apply a CURRENT status change to a View (for queries executed in a different
         * tab) or for new queries (to raise snapshots with correct CURRENT status).
         */    static createSynthesizedTargetChangeForCurrentChange(t, e) {
            return new xn(pt.EMPTY_BYTE_STRING, e, Dn(), Dn(), Dn());
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents a changed document and a list of target ids to which this change
     * applies.
     *
     * If document has been deleted NoDocument will be provided.
     */ class $n {
        constructor(
        /** The new document applies to all of these targets. */
        t, 
        /** The new document is removed from all of these targets. */
        e, 
        /** The key of the document for this change. */
        n, 
        /**
         * The new document or NoDocument if it was deleted. Is null if the
         * document went out of view without the server sending a new document.
         */
        s) {
            this.$ = t, this.removedTargetIds = e, this.key = n, this.O = s;
        }
    }

    class On {
        constructor(t, e) {
            this.targetId = t, this.M = e;
        }
    }

    class Mn {
        constructor(
        /** What kind of change occurred to the watch target. */
        t, 
        /** The target IDs that were added/removed/set. */
        e, 
        /**
         * An opaque, server-assigned token that allows watching a target to be
         * resumed after disconnecting without retransmitting all the data that
         * matches the target. The resume token essentially identifies a point in
         * time from which the server should resume sending results.
         */
        n = pt.EMPTY_BYTE_STRING
        /** An RPC error indicating why the watch failed. */ , s = null) {
            this.state = t, this.targetIds = e, this.resumeToken = n, this.cause = s;
        }
    }

    /** Tracks the internal state of a Watch target. */ class Fn {
        constructor() {
            /**
             * The number of pending responses (adds or removes) that we are waiting on.
             * We only consider targets active that have no pending responses.
             */
            this.F = 0, 
            /**
             * Keeps track of the document changes since the last raised snapshot.
             *
             * These changes are continuously updated as we receive document updates and
             * always reflect the current set of changes against the last issued snapshot.
             */
            this.L = Un(), 
            /** See public getters for explanations of these fields. */
            this.B = pt.EMPTY_BYTE_STRING, this.U = !1, 
            /**
             * Whether this target state should be included in the next snapshot. We
             * initialize to true so that newly-added targets are included in the next
             * RemoteEvent.
             */
            this.q = !0;
        }
        /**
         * Whether this target has been marked 'current'.
         *
         * 'Current' has special meaning in the RPC protocol: It implies that the
         * Watch backend has sent us all changes up to the point at which the target
         * was added and that the target is consistent with the rest of the watch
         * stream.
         */    get current() {
            return this.U;
        }
        /** The last resume token sent to us for this target. */    get resumeToken() {
            return this.B;
        }
        /** Whether this target has pending target adds or target removes. */    get K() {
            return 0 !== this.F;
        }
        /** Whether we have modified any state that should trigger a snapshot. */    get j() {
            return this.q;
        }
        /**
         * Applies the resume token to the TargetChange, but only when it has a new
         * value. Empty resumeTokens are discarded.
         */    W(t) {
            t.approximateByteSize() > 0 && (this.q = !0, this.B = t);
        }
        /**
         * Creates a target change from the current set of changes.
         *
         * To reset the document changes after raising this snapshot, call
         * `clearPendingChanges()`.
         */    G() {
            let t = Dn(), e = Dn(), n = Dn();
            return this.L.forEach(((s, i) => {
                switch (i) {
                  case 0 /* Added */ :
                    t = t.add(s);
                    break;

                  case 2 /* Modified */ :
                    e = e.add(s);
                    break;

                  case 1 /* Removed */ :
                    n = n.add(s);
                    break;

                  default:
                    B();
                }
            })), new xn(this.B, this.U, t, e, n);
        }
        /**
         * Resets the document changes and sets `hasPendingChanges` to false.
         */    H() {
            this.q = !1, this.L = Un();
        }
        J(t, e) {
            this.q = !0, this.L = this.L.insert(t, e);
        }
        Y(t) {
            this.q = !0, this.L = this.L.remove(t);
        }
        X() {
            this.F += 1;
        }
        Z() {
            this.F -= 1;
        }
        tt() {
            this.q = !0, this.U = !0;
        }
    }

    /**
     * A helper class to accumulate watch changes into a RemoteEvent.
     */
    class Ln {
        constructor(t) {
            this.et = t, 
            /** The internal state of all tracked targets. */
            this.nt = new Map, 
            /** Keeps track of the documents to update since the last raised snapshot. */
            this.st = Rn(), 
            /** A mapping of document keys to their set of target IDs. */
            this.it = Bn(), 
            /**
             * A list of targets with existence filter mismatches. These targets are
             * known to be inconsistent and their listens needs to be re-established by
             * RemoteStore.
             */
            this.rt = new En(rt);
        }
        /**
         * Processes and adds the DocumentWatchChange to the current set of changes.
         */    ot(t) {
            for (const e of t.$) t.O && t.O.isFoundDocument() ? this.ct(e, t.O) : this.at(e, t.key, t.O);
            for (const e of t.removedTargetIds) this.at(e, t.key, t.O);
        }
        /** Processes and adds the WatchTargetChange to the current set of changes. */    ut(t) {
            this.forEachTarget(t, (e => {
                const n = this.ht(e);
                switch (t.state) {
                  case 0 /* NoChange */ :
                    this.lt(e) && n.W(t.resumeToken);
                    break;

                  case 1 /* Added */ :
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    n.Z(), n.K || 
                    // We have a freshly added target, so we need to reset any state
                    // that we had previously. This can happen e.g. when remove and add
                    // back a target for existence filter mismatches.
                    n.H(), n.W(t.resumeToken);
                    break;

                  case 2 /* Removed */ :
                    // We need to keep track of removed targets to we can post-filter and
                    // remove any target changes.
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    n.Z(), n.K || this.removeTarget(e);
                    break;

                  case 3 /* Current */ :
                    this.lt(e) && (n.tt(), n.W(t.resumeToken));
                    break;

                  case 4 /* Reset */ :
                    this.lt(e) && (
                    // Reset the target and synthesizes removes for all existing
                    // documents. The backend will re-add any documents that still
                    // match the target before it sends the next global snapshot.
                    this.ft(e), n.W(t.resumeToken));
                    break;

                  default:
                    B();
                }
            }));
        }
        /**
         * Iterates over all targetIds that the watch change applies to: either the
         * targetIds explicitly listed in the change or the targetIds of all currently
         * active targets.
         */    forEachTarget(t, e) {
            t.targetIds.length > 0 ? t.targetIds.forEach(e) : this.nt.forEach(((t, n) => {
                this.lt(n) && e(n);
            }));
        }
        /**
         * Handles existence filters and synthesizes deletes for filter mismatches.
         * Targets that are invalidated by filter mismatches are added to
         * `pendingTargetResets`.
         */    dt(t) {
            const e = t.targetId, n = t.M.count, s = this.wt(e);
            if (s) {
                const t = s.target;
                if (Zt(t)) if (0 === n) {
                    // The existence filter told us the document does not exist. We deduce
                    // that this document does not exist and apply a deleted document to
                    // our updates. Without applying this deleted document there might be
                    // another query that will raise this document as part of a snapshot
                    // until it is resolved, essentially exposing inconsistency between
                    // queries.
                    const n = new Dt(t.path);
                    this.at(e, n, Gt.newNoDocument(n, ut.min()));
                } else U(1 === n); else {
                    this._t(e) !== n && (
                    // Existence filter mismatch: We reset the mapping and raise a new
                    // snapshot with `isFromCache:true`.
                    this.ft(e), this.rt = this.rt.add(e));
                }
            }
        }
        /**
         * Converts the currently accumulated state into a remote event at the
         * provided snapshot version. Resets the accumulated changes before returning.
         */    gt(t) {
            const e = new Map;
            this.nt.forEach(((n, s) => {
                const i = this.wt(s);
                if (i) {
                    if (n.current && Zt(i.target)) {
                        // Document queries for document that don't exist can produce an empty
                        // result set. To update our local cache, we synthesize a document
                        // delete if we have not previously received the document. This
                        // resolves the limbo state of the document, removing it from
                        // limboDocumentRefs.
                        // TODO(dimond): Ideally we would have an explicit lookup target
                        // instead resulting in an explicit delete message and we could
                        // remove this special logic.
                        const e = new Dt(i.target.path);
                        null !== this.st.get(e) || this.yt(s, e) || this.at(s, e, Gt.newNoDocument(e, t));
                    }
                    n.j && (e.set(s, n.G()), n.H());
                }
            }));
            let n = Dn();
            // We extract the set of limbo-only document updates as the GC logic
            // special-cases documents that do not appear in the target cache.
            
            // TODO(gsoltis): Expand on this comment once GC is available in the JS
            // client.
                    this.it.forEach(((t, e) => {
                let s = !0;
                e.forEachWhile((t => {
                    const e = this.wt(t);
                    return !e || 2 /* LimboResolution */ === e.purpose || (s = !1, !1);
                })), s && (n = n.add(t));
            }));
            const s = new kn(t, e, this.rt, this.st, n);
            return this.st = Rn(), this.it = Bn(), this.rt = new En(rt), s;
        }
        /**
         * Adds the provided document to the internal list of document updates and
         * its document key to the given target's mapping.
         */
        // Visible for testing.
        ct(t, e) {
            if (!this.lt(t)) return;
            const n = this.yt(t, e.key) ? 2 /* Modified */ : 0 /* Added */;
            this.ht(t).J(e.key, n), this.st = this.st.insert(e.key, e), this.it = this.it.insert(e.key, this.Tt(e.key).add(t));
        }
        /**
         * Removes the provided document from the target mapping. If the
         * document no longer matches the target, but the document's state is still
         * known (e.g. we know that the document was deleted or we received the change
         * that caused the filter mismatch), the new document can be provided
         * to update the remote document cache.
         */
        // Visible for testing.
        at(t, e, n) {
            if (!this.lt(t)) return;
            const s = this.ht(t);
            this.yt(t, e) ? s.J(e, 1 /* Removed */) : 
            // The document may have entered and left the target before we raised a
            // snapshot, so we can just ignore the change.
            s.Y(e), this.it = this.it.insert(e, this.Tt(e).delete(t)), n && (this.st = this.st.insert(e, n));
        }
        removeTarget(t) {
            this.nt.delete(t);
        }
        /**
         * Returns the current count of documents in the target. This includes both
         * the number of documents that the LocalStore considers to be part of the
         * target as well as any accumulated changes.
         */    _t(t) {
            const e = this.ht(t).G();
            return this.et.getRemoteKeysForTarget(t).size + e.addedDocuments.size - e.removedDocuments.size;
        }
        /**
         * Increment the number of acks needed from watch before we can consider the
         * server to be 'in-sync' with the client's active targets.
         */    X(t) {
            this.ht(t).X();
        }
        ht(t) {
            let e = this.nt.get(t);
            return e || (e = new Fn, this.nt.set(t, e)), e;
        }
        Tt(t) {
            let e = this.it.get(t);
            return e || (e = new En(rt), this.it = this.it.insert(t, e)), e;
        }
        /**
         * Verifies that the user is still interested in this target (by calling
         * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
         * from watch.
         */    lt(t) {
            const e = null !== this.wt(t);
            return e || O("WatchChangeAggregator", "Detected inactive target", t), e;
        }
        /**
         * Returns the TargetData for an active target (i.e. a target that the user
         * is still interested in that has no outstanding target change requests).
         */    wt(t) {
            const e = this.nt.get(t);
            return e && e.K ? null : this.et.Et(t);
        }
        /**
         * Resets the state of a Watch target to its initial state (e.g. sets
         * 'current' to false, clears the resume token and removes its target mapping
         * from all documents).
         */    ft(t) {
            this.nt.set(t, new Fn);
            this.et.getRemoteKeysForTarget(t).forEach((e => {
                this.at(t, e, /*updatedDocument=*/ null);
            }));
        }
        /**
         * Returns whether the LocalStore considers the document to be part of the
         * specified target.
         */    yt(t, e) {
            return this.et.getRemoteKeysForTarget(t).has(e);
        }
    }

    function Bn() {
        return new yn(Dt.comparator);
    }

    function Un() {
        return new yn(Dt.comparator);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const qn = (() => {
        const t = {
            asc: "ASCENDING",
            desc: "DESCENDING"
        };
        return t;
    })(), Kn = (() => {
        const t = {
            "<": "LESS_THAN",
            "<=": "LESS_THAN_OR_EQUAL",
            ">": "GREATER_THAN",
            ">=": "GREATER_THAN_OR_EQUAL",
            "==": "EQUAL",
            "!=": "NOT_EQUAL",
            "array-contains": "ARRAY_CONTAINS",
            in: "IN",
            "not-in": "NOT_IN",
            "array-contains-any": "ARRAY_CONTAINS_ANY"
        };
        return t;
    })();

    /**
     * This class generates JsonObject values for the Datastore API suitable for
     * sending to either GRPC stub methods or via the JSON/HTTP REST API.
     *
     * The serializer supports both Protobuf.js and Proto3 JSON formats. By
     * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
     * format.
     *
     * For a description of the Proto3 JSON format check
     * https://developers.google.com/protocol-buffers/docs/proto3#json
     *
     * TODO(klimt): We can remove the databaseId argument if we keep the full
     * resource name in documents.
     */
    class jn {
        constructor(t, e) {
            this.databaseId = t, this.C = e;
        }
    }

    /**
     * Returns a value for a Date that's appropriate to put into a proto.
     */
    function Qn(t, e) {
        if (t.C) {
            return `${new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + e.nanoseconds).slice(-9)}Z`;
        }
        return {
            seconds: "" + e.seconds,
            nanos: e.nanoseconds
        };
    }

    /**
     * Returns a value for bytes that's appropriate to put in a proto.
     *
     * Visible for testing.
     */
    function Wn(t, e) {
        return t.C ? e.toBase64() : e.toUint8Array();
    }

    /**
     * Returns a ByteString based on the proto string value.
     */ function Gn(t, e) {
        return Qn(t, e.toTimestamp());
    }

    function zn(t) {
        return U(!!t), ut.fromTimestamp(function(t) {
            const e = Et(t);
            return new at(e.seconds, e.nanos);
        }(t));
    }

    function Hn(t, e) {
        return function(t) {
            return new wt([ "projects", t.projectId, "databases", t.database ]);
        }(t).child("documents").child(e).canonicalString();
    }

    function Jn(t) {
        const e = wt.fromString(t);
        return U(Rs(e)), e;
    }

    function Yn(t, e) {
        return Hn(t.databaseId, e.path);
    }

    function Xn(t, e) {
        const n = Jn(e);
        if (n.get(1) !== t.databaseId.projectId) throw new Q(j.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n.get(1) + " vs " + t.databaseId.projectId);
        if (n.get(3) !== t.databaseId.database) throw new Q(j.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n.get(3) + " vs " + t.databaseId.database);
        return new Dt(ns(n));
    }

    function Zn(t, e) {
        return Hn(t.databaseId, e);
    }

    function ts(t) {
        const e = Jn(t);
        // In v1beta1 queries for collections at the root did not have a trailing
        // "/documents". In v1 all resource paths contain "/documents". Preserve the
        // ability to read the v1beta1 form for compatibility with queries persisted
        // in the local target cache.
            return 4 === e.length ? wt.emptyPath() : ns(e);
    }

    function es(t) {
        return new wt([ "projects", t.databaseId.projectId, "databases", t.databaseId.database ]).canonicalString();
    }

    function ns(t) {
        return U(t.length > 4 && "documents" === t.get(4)), t.popFirst(5);
    }

    /** Creates a Document proto from key and fields (but no create/update time) */ function ss(t, e, n) {
        return {
            name: Yn(t, e),
            fields: n.value.mapValue.fields
        };
    }

    function os(t, e) {
        let n;
        if ("targetChange" in e) {
            e.targetChange;
            // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
            // if unset
            const s = function(t) {
                return "NO_CHANGE" === t ? 0 /* NoChange */ : "ADD" === t ? 1 /* Added */ : "REMOVE" === t ? 2 /* Removed */ : "CURRENT" === t ? 3 /* Current */ : "RESET" === t ? 4 /* Reset */ : B();
            }(e.targetChange.targetChangeType || "NO_CHANGE"), i = e.targetChange.targetIds || [], r = function(t, e) {
                return t.C ? (U(void 0 === e || "string" == typeof e), pt.fromBase64String(e || "")) : (U(void 0 === e || e instanceof Uint8Array), 
                pt.fromUint8Array(e || new Uint8Array));
            }(t, e.targetChange.resumeToken), o = e.targetChange.cause, c = o && function(t) {
                const e = void 0 === t.code ? j.UNKNOWN : gn(t.code);
                return new Q(e, t.message || "");
            }
            /**
     * Returns a value for a number (or null) that's appropriate to put into
     * a google.protobuf.Int32Value proto.
     * DO NOT USE THIS FOR ANYTHING ELSE.
     * This method cheats. It's typed as returning "number" because that's what
     * our generated proto interfaces say Int32Value must be. But GRPC actually
     * expects a { value: <number> } struct.
     */ (o);
            n = new Mn(s, i, r, c || null);
        } else if ("documentChange" in e) {
            e.documentChange;
            const s = e.documentChange;
            s.document, s.document.name, s.document.updateTime;
            const i = Xn(t, s.document.name), r = zn(s.document.updateTime), o = new Qt({
                mapValue: {
                    fields: s.document.fields
                }
            }), c = Gt.newFoundDocument(i, r, o), a = s.targetIds || [], u = s.removedTargetIds || [];
            n = new $n(a, u, c.key, c);
        } else if ("documentDelete" in e) {
            e.documentDelete;
            const s = e.documentDelete;
            s.document;
            const i = Xn(t, s.document), r = s.readTime ? zn(s.readTime) : ut.min(), o = Gt.newNoDocument(i, r), c = s.removedTargetIds || [];
            n = new $n([], c, o.key, o);
        } else if ("documentRemove" in e) {
            e.documentRemove;
            const s = e.documentRemove;
            s.document;
            const i = Xn(t, s.document), r = s.removedTargetIds || [];
            n = new $n([], r, i, null);
        } else {
            if (!("filter" in e)) return B();
            {
                e.filter;
                const t = e.filter;
                t.targetId;
                const s = t.count || 0, i = new dn(s), r = t.targetId;
                n = new On(r, i);
            }
        }
        return n;
    }

    function cs(t, e) {
        let n;
        if (e instanceof on) n = {
            update: ss(t, e.key, e.value)
        }; else if (e instanceof ln) n = {
            delete: Yn(t, e.key)
        }; else if (e instanceof cn) n = {
            update: ss(t, e.key, e.data),
            updateMask: As(e.fieldMask)
        }; else {
            if (!(e instanceof fn)) return B();
            n = {
                verify: Yn(t, e.key)
            };
        }
        return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map((t => function(t, e) {
            const n = e.transform;
            if (n instanceof Be) return {
                fieldPath: e.field.canonicalString(),
                setToServerValue: "REQUEST_TIME"
            };
            if (n instanceof Ue) return {
                fieldPath: e.field.canonicalString(),
                appendMissingElements: {
                    values: n.elements
                }
            };
            if (n instanceof Ke) return {
                fieldPath: e.field.canonicalString(),
                removeAllFromArray: {
                    values: n.elements
                }
            };
            if (n instanceof Qe) return {
                fieldPath: e.field.canonicalString(),
                increment: n.N
            };
            throw B();
        }(0, t)))), e.precondition.isNone || (n.currentDocument = function(t, e) {
            return void 0 !== e.updateTime ? {
                updateTime: Gn(t, e.updateTime)
            } : void 0 !== e.exists ? {
                exists: e.exists
            } : B();
        }(t, e.precondition)), n;
    }

    function us(t, e) {
        return t && t.length > 0 ? (U(void 0 !== e), t.map((t => function(t, e) {
            // NOTE: Deletes don't have an updateTime.
            let n = t.updateTime ? zn(t.updateTime) : zn(e);
            return n.isEqual(ut.min()) && (
            // The Firestore Emulator currently returns an update time of 0 for
            // deletes of non-existing documents (rather than null). This breaks the
            // test "get deleted doc while offline with source=cache" as NoDocuments
            // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
            // TODO(#2149): Remove this when Emulator is fixed
            n = zn(e)), new Je(n, t.transformResults || []);
        }(t, e)))) : [];
    }

    function hs(t, e) {
        return {
            documents: [ Zn(t, e.path) ]
        };
    }

    function ls(t, e) {
        // Dissect the path into parent, collectionId, and optional key filter.
        const n = {
            structuredQuery: {}
        }, s = e.path;
        null !== e.collectionGroup ? (n.parent = Zn(t, s), n.structuredQuery.from = [ {
            collectionId: e.collectionGroup,
            allDescendants: !0
        } ]) : (n.parent = Zn(t, s.popLast()), n.structuredQuery.from = [ {
            collectionId: s.lastSegment()
        } ]);
        const i = function(t) {
            if (0 === t.length) return;
            const e = t.map((t => 
            // visible for testing
            function(t) {
                if ("==" /* EQUAL */ === t.op) {
                    if (qt(t.value)) return {
                        unaryFilter: {
                            field: ps(t.field),
                            op: "IS_NAN"
                        }
                    };
                    if (Ut(t.value)) return {
                        unaryFilter: {
                            field: ps(t.field),
                            op: "IS_NULL"
                        }
                    };
                } else if ("!=" /* NOT_EQUAL */ === t.op) {
                    if (qt(t.value)) return {
                        unaryFilter: {
                            field: ps(t.field),
                            op: "IS_NOT_NAN"
                        }
                    };
                    if (Ut(t.value)) return {
                        unaryFilter: {
                            field: ps(t.field),
                            op: "IS_NOT_NULL"
                        }
                    };
                }
                return {
                    fieldFilter: {
                        field: ps(t.field),
                        op: ys(t.op),
                        value: t.value
                    }
                };
            }(t)));
            if (1 === e.length) return e[0];
            return {
                compositeFilter: {
                    op: "AND",
                    filters: e
                }
            };
        }(e.filters);
        i && (n.structuredQuery.where = i);
        const r = function(t) {
            if (0 === t.length) return;
            return t.map((t => 
            // visible for testing
            function(t) {
                return {
                    field: ps(t.field),
                    direction: gs(t.dir)
                };
            }(t)));
        }(e.orderBy);
        r && (n.structuredQuery.orderBy = r);
        const o = function(t, e) {
            return t.C || vt(e) ? e : {
                value: e
            };
        }
        /**
     * Returns a number (or null) from a google.protobuf.Int32Value proto.
     */ (t, e.limit);
        return null !== o && (n.structuredQuery.limit = o), e.startAt && (n.structuredQuery.startAt = _s(e.startAt)), 
        e.endAt && (n.structuredQuery.endAt = _s(e.endAt)), n;
    }

    function fs(t) {
        let e = ts(t.parent);
        const n = t.structuredQuery, s = n.from ? n.from.length : 0;
        let i = null;
        if (s > 0) {
            U(1 === s);
            const t = n.from[0];
            t.allDescendants ? i = t.collectionId : e = e.child(t.collectionId);
        }
        let r = [];
        n.where && (r = ws(n.where));
        let o = [];
        n.orderBy && (o = n.orderBy.map((t => function(t) {
            return new fe(Ts(t.field), 
            // visible for testing
            function(t) {
                switch (t) {
                  case "ASCENDING":
                    return "asc" /* ASCENDING */;

                  case "DESCENDING":
                    return "desc" /* DESCENDING */;

                  default:
                    return;
                }
            }
            // visible for testing
            (t.direction));
        }(t))));
        let c = null;
        n.limit && (c = function(t) {
            let e;
            return e = "object" == typeof t ? t.value : t, vt(e) ? null : e;
        }(n.limit));
        let a = null;
        n.startAt && (a = ms(n.startAt));
        let u = null;
        return n.endAt && (u = ms(n.endAt)), ge(e, i, o, r, c, "F" /* First */ , a, u);
    }

    function ds(t, e) {
        const n = function(t, e) {
            switch (e) {
              case 0 /* Listen */ :
                return null;

              case 1 /* ExistenceFilterMismatch */ :
                return "existence-filter-mismatch";

              case 2 /* LimboResolution */ :
                return "limbo-document";

              default:
                return B();
            }
        }(0, e.purpose);
        return null == n ? null : {
            "goog-listen-tags": n
        };
    }

    function ws(t) {
        return t ? void 0 !== t.unaryFilter ? [ Is(t) ] : void 0 !== t.fieldFilter ? [ Es(t) ] : void 0 !== t.compositeFilter ? t.compositeFilter.filters.map((t => ws(t))).reduce(((t, e) => t.concat(e))) : B() : [];
    }

    function _s(t) {
        return {
            before: t.before,
            values: t.position
        };
    }

    function ms(t) {
        const e = !!t.before, n = t.values || [];
        return new he(n, e);
    }

    // visible for testing
    function gs(t) {
        return qn[t];
    }

    function ys(t) {
        return Kn[t];
    }

    function ps(t) {
        return {
            fieldPath: t.canonicalString()
        };
    }

    function Ts(t) {
        return mt.fromServerFormat(t.fieldPath);
    }

    function Es(t) {
        return te.create(Ts(t.fieldFilter.field), function(t) {
            switch (t) {
              case "EQUAL":
                return "==" /* EQUAL */;

              case "NOT_EQUAL":
                return "!=" /* NOT_EQUAL */;

              case "GREATER_THAN":
                return ">" /* GREATER_THAN */;

              case "GREATER_THAN_OR_EQUAL":
                return ">=" /* GREATER_THAN_OR_EQUAL */;

              case "LESS_THAN":
                return "<" /* LESS_THAN */;

              case "LESS_THAN_OR_EQUAL":
                return "<=" /* LESS_THAN_OR_EQUAL */;

              case "ARRAY_CONTAINS":
                return "array-contains" /* ARRAY_CONTAINS */;

              case "IN":
                return "in" /* IN */;

              case "NOT_IN":
                return "not-in" /* NOT_IN */;

              case "ARRAY_CONTAINS_ANY":
                return "array-contains-any" /* ARRAY_CONTAINS_ANY */;

              default:
                return B();
            }
        }(t.fieldFilter.op), t.fieldFilter.value);
    }

    function Is(t) {
        switch (t.unaryFilter.op) {
          case "IS_NAN":
            const e = Ts(t.unaryFilter.field);
            return te.create(e, "==" /* EQUAL */ , {
                doubleValue: NaN
            });

          case "IS_NULL":
            const n = Ts(t.unaryFilter.field);
            return te.create(n, "==" /* EQUAL */ , {
                nullValue: "NULL_VALUE"
            });

          case "IS_NOT_NAN":
            const s = Ts(t.unaryFilter.field);
            return te.create(s, "!=" /* NOT_EQUAL */ , {
                doubleValue: NaN
            });

          case "IS_NOT_NULL":
            const i = Ts(t.unaryFilter.field);
            return te.create(i, "!=" /* NOT_EQUAL */ , {
                nullValue: "NULL_VALUE"
            });

          default:
            return B();
        }
    }

    function As(t) {
        const e = [];
        return t.fields.forEach((t => e.push(t.canonicalString()))), {
            fieldPaths: e
        };
    }

    function Rs(t) {
        // Resource names have at least 4 components (project ID, database ID)
        return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
    }

    // Visible for testing
    const Ws = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";

    // V2 is no longer usable (see comment at top of file)
    // Visible for testing
    /**
     * A base class representing a persistence transaction, encapsulating both the
     * transaction's sequence numbers as well as a list of onCommitted listeners.
     *
     * When you call Persistence.runTransaction(), it will create a transaction and
     * pass it to your callback. You then pass it to any method that operates
     * on persistence.
     */
    class Gs {
        constructor() {
            this.onCommittedListeners = [];
        }
        addOnCommittedListener(t) {
            this.onCommittedListeners.push(t);
        }
        raiseOnCommittedEvent() {
            this.onCommittedListeners.forEach((t => t()));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * PersistencePromise is essentially a re-implementation of Promise except
     * it has a .next() method instead of .then() and .next() and .catch() callbacks
     * are executed synchronously when a PersistencePromise resolves rather than
     * asynchronously (Promise implementations use setImmediate() or similar).
     *
     * This is necessary to interoperate with IndexedDB which will automatically
     * commit transactions if control is returned to the event loop without
     * synchronously initiating another operation on the transaction.
     *
     * NOTE: .then() and .catch() only allow a single consumer, unlike normal
     * Promises.
     */ class zs {
        constructor(t) {
            // NOTE: next/catchCallback will always point to our own wrapper functions,
            // not the user's raw next() or catch() callbacks.
            this.nextCallback = null, this.catchCallback = null, 
            // When the operation resolves, we'll set result or error and mark isDone.
            this.result = void 0, this.error = void 0, this.isDone = !1, 
            // Set to true when .then() or .catch() are called and prevents additional
            // chaining.
            this.callbackAttached = !1, t((t => {
                this.isDone = !0, this.result = t, this.nextCallback && 
                // value should be defined unless T is Void, but we can't express
                // that in the type system.
                this.nextCallback(t);
            }), (t => {
                this.isDone = !0, this.error = t, this.catchCallback && this.catchCallback(t);
            }));
        }
        catch(t) {
            return this.next(void 0, t);
        }
        next(t, e) {
            return this.callbackAttached && B(), this.callbackAttached = !0, this.isDone ? this.error ? this.wrapFailure(e, this.error) : this.wrapSuccess(t, this.result) : new zs(((n, s) => {
                this.nextCallback = e => {
                    this.wrapSuccess(t, e).next(n, s);
                }, this.catchCallback = t => {
                    this.wrapFailure(e, t).next(n, s);
                };
            }));
        }
        toPromise() {
            return new Promise(((t, e) => {
                this.next(t, e);
            }));
        }
        wrapUserFunction(t) {
            try {
                const e = t();
                return e instanceof zs ? e : zs.resolve(e);
            } catch (t) {
                return zs.reject(t);
            }
        }
        wrapSuccess(t, e) {
            return t ? this.wrapUserFunction((() => t(e))) : zs.resolve(e);
        }
        wrapFailure(t, e) {
            return t ? this.wrapUserFunction((() => t(e))) : zs.reject(e);
        }
        static resolve(t) {
            return new zs(((e, n) => {
                e(t);
            }));
        }
        static reject(t) {
            return new zs(((e, n) => {
                n(t);
            }));
        }
        static waitFor(
        // Accept all Promise types in waitFor().
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        t) {
            return new zs(((e, n) => {
                let s = 0, i = 0, r = !1;
                t.forEach((t => {
                    ++s, t.next((() => {
                        ++i, r && i === s && e();
                    }), (t => n(t)));
                })), r = !0, i === s && e();
            }));
        }
        /**
         * Given an array of predicate functions that asynchronously evaluate to a
         * boolean, implements a short-circuiting `or` between the results. Predicates
         * will be evaluated until one of them returns `true`, then stop. The final
         * result will be whether any of them returned `true`.
         */    static or(t) {
            let e = zs.resolve(!1);
            for (const n of t) e = e.next((t => t ? zs.resolve(t) : n()));
            return e;
        }
        static forEach(t, e) {
            const n = [];
            return t.forEach(((t, s) => {
                n.push(e.call(this, t, s));
            })), this.waitFor(n);
        }
    }

    /** Verifies whether `e` is an IndexedDbTransactionError. */ function Zs(t) {
        // Use name equality, as instanceof checks on errors don't work with errors
        // that wrap other errors.
        return "IndexedDbTransactionError" === t.name;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A batch of mutations that will be sent as one unit to the backend.
     */ class oi {
        /**
         * @param batchId - The unique ID of this mutation batch.
         * @param localWriteTime - The original write time of this mutation.
         * @param baseMutations - Mutations that are used to populate the base
         * values when this mutation is applied locally. This can be used to locally
         * overwrite values that are persisted in the remote document cache. Base
         * mutations are never sent to the backend.
         * @param mutations - The user-provided mutations in this mutation batch.
         * User-provided mutations are applied both locally and remotely on the
         * backend.
         */
        constructor(t, e, n, s) {
            this.batchId = t, this.localWriteTime = e, this.baseMutations = n, this.mutations = s;
        }
        /**
         * Applies all the mutations in this MutationBatch to the specified document
         * to compute the state of the remote document
         *
         * @param document - The document to apply mutations to.
         * @param batchResult - The result of applying the MutationBatch to the
         * backend.
         */    applyToRemoteDocument(t, e) {
            const n = e.mutationResults;
            for (let e = 0; e < this.mutations.length; e++) {
                const s = this.mutations[e];
                if (s.key.isEqual(t.key)) {
                    tn(s, t, n[e]);
                }
            }
        }
        /**
         * Computes the local view of a document given all the mutations in this
         * batch.
         *
         * @param document - The document to apply mutations to.
         */    applyToLocalView(t) {
            // First, apply the base state. This allows us to apply non-idempotent
            // transform against a consistent set of values.
            for (const e of this.baseMutations) e.key.isEqual(t.key) && en(e, t, this.localWriteTime);
            // Second, apply all user-provided mutations.
                    for (const e of this.mutations) e.key.isEqual(t.key) && en(e, t, this.localWriteTime);
        }
        /**
         * Computes the local view for all provided documents given the mutations in
         * this batch.
         */    applyToLocalDocumentSet(t) {
            // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
            // directly (as done in `applyToLocalView()`), we can reduce the complexity
            // to O(n).
            this.mutations.forEach((e => {
                const n = t.get(e.key), s = n;
                // TODO(mutabledocuments): This method should take a MutableDocumentMap
                // and we should remove this cast.
                            this.applyToLocalView(s), n.isValidDocument() || s.convertToNoDocument(ut.min());
            }));
        }
        keys() {
            return this.mutations.reduce(((t, e) => t.add(e.key)), Dn());
        }
        isEqual(t) {
            return this.batchId === t.batchId && ot(this.mutations, t.mutations, ((t, e) => sn(t, e))) && ot(this.baseMutations, t.baseMutations, ((t, e) => sn(t, e)));
        }
    }

    /** The result of applying a mutation batch to the backend. */ class ci {
        constructor(t, e, n, 
        /**
         * A pre-computed mapping from each mutated document to the resulting
         * version.
         */
        s) {
            this.batch = t, this.commitVersion = e, this.mutationResults = n, this.docVersions = s;
        }
        /**
         * Creates a new MutationBatchResult for the given batch and results. There
         * must be one result for each mutation in the batch. This static factory
         * caches a document=&gt;version mapping (docVersions).
         */    static from(t, e, n) {
            U(t.mutations.length === n.length);
            let s = Vn();
            const i = t.mutations;
            for (let t = 0; t < i.length; t++) s = s.insert(i[t].key, n[t].version);
            return new ci(t, e, n, s);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An immutable set of metadata that the local store tracks for each target.
     */ class ai {
        constructor(
        /** The target being listened to. */
        t, 
        /**
         * The target ID to which the target corresponds; Assigned by the
         * LocalStore for user listens and by the SyncEngine for limbo watches.
         */
        e, 
        /** The purpose of the target. */
        n, 
        /**
         * The sequence number of the last transaction during which this target data
         * was modified.
         */
        s, 
        /** The latest snapshot version seen for this target. */
        i = ut.min()
        /**
         * The maximum snapshot version at which the associated view
         * contained no limbo documents.
         */ , r = ut.min()
        /**
         * An opaque, server-assigned token that allows watching a target to be
         * resumed after disconnecting without retransmitting all the data that
         * matches the target. The resume token essentially identifies a point in
         * time from which the server should resume sending results.
         */ , o = pt.EMPTY_BYTE_STRING) {
            this.target = t, this.targetId = e, this.purpose = n, this.sequenceNumber = s, this.snapshotVersion = i, 
            this.lastLimboFreeSnapshotVersion = r, this.resumeToken = o;
        }
        /** Creates a new target data instance with an updated sequence number. */    withSequenceNumber(t) {
            return new ai(this.target, this.targetId, this.purpose, t, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken);
        }
        /**
         * Creates a new target data instance with an updated resume token and
         * snapshot version.
         */    withResumeToken(t, e) {
            return new ai(this.target, this.targetId, this.purpose, this.sequenceNumber, e, this.lastLimboFreeSnapshotVersion, t);
        }
        /**
         * Creates a new target data instance with an updated last limbo free
         * snapshot version number.
         */    withLastLimboFreeSnapshotVersion(t) {
            return new ai(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, t, this.resumeToken);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Serializer for values stored in the LocalStore. */ class ui {
        constructor(t) {
            this.Gt = t;
        }
    }

    /**
     * A helper function for figuring out what kind of query has been stored.
     */
    /**
     * Encodes a `BundledQuery` from bundle proto to a Query object.
     *
     * This reconstructs the original query used to build the bundle being loaded,
     * including features exists only in SDKs (for example: limit-to-last).
     */
    function pi(t) {
        const e = fs({
            parent: t.parent,
            structuredQuery: t.structuredQuery
        });
        return "LAST" === t.limitType ? Pe(e, e.limit, "L" /* Last */) : e;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An in-memory implementation of IndexManager.
     */ class Ai {
        constructor() {
            this.zt = new Ri;
        }
        addToCollectionParentIndex(t, e) {
            return this.zt.add(e), zs.resolve();
        }
        getCollectionParents(t, e) {
            return zs.resolve(this.zt.getEntries(e));
        }
    }

    /**
     * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
     * Also used for in-memory caching by IndexedDbIndexManager and initial index population
     * in indexeddb_schema.ts
     */ class Ri {
        constructor() {
            this.index = {};
        }
        // Returns false if the entry already existed.
        add(t) {
            const e = t.lastSegment(), n = t.popLast(), s = this.index[e] || new En(wt.comparator), i = !s.has(n);
            return this.index[e] = s.add(n), i;
        }
        has(t) {
            const e = t.lastSegment(), n = t.popLast(), s = this.index[e];
            return s && s.has(n);
        }
        getEntries(t) {
            return (this.index[t] || new En(wt.comparator)).toArray();
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Offset to ensure non-overlapping target ids. */
    /**
     * Generates monotonically increasing target IDs for sending targets to the
     * watch stream.
     *
     * The client constructs two generators, one for the target cache, and one for
     * for the sync engine (to generate limbo documents targets). These
     * generators produce non-overlapping IDs (by using even and odd IDs
     * respectively).
     *
     * By separating the target ID space, the query cache can generate target IDs
     * that persist across client restarts, while sync engine can independently
     * generate in-memory target IDs that are transient and can be reused after a
     * restart.
     */
    class Oi {
        constructor(t) {
            this.se = t;
        }
        next() {
            return this.se += 2, this.se;
        }
        static ie() {
            // The target cache generator must return '2' in its first call to `next()`
            // as there is no differentiation in the protocol layer between an unset
            // number and the number '0'. If we were to sent a target with target ID
            // '0', the backend would consider it unset and replace it with its own ID.
            return new Oi(0);
        }
        static re() {
            // Sync engine assigns target IDs for limbo document detection.
            return new Oi(-1);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Verifies the error thrown by a LocalStore operation. If a LocalStore
     * operation fails because the primary lease has been taken by another client,
     * we ignore the error (the persistence layer will immediately call
     * `applyPrimaryLease` to propagate the primary state change). All other errors
     * are re-thrown.
     *
     * @param err - An error returned by a LocalStore operation.
     * @returns A Promise that resolves after we recovered, or the original error.
     */ async function Ui(t) {
        if (t.code !== j.FAILED_PRECONDITION || t.message !== Ws) throw t;
        O("LocalStore", "Unexpectedly lost primary lease");
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A map implementation that uses objects as keys. Objects must have an
     * associated equals function and must be immutable. Entries in the map are
     * stored together with the key being produced from the mapKeyFn. This map
     * automatically handles collisions of keys.
     */ class zi {
        constructor(t, e) {
            this.mapKeyFn = t, this.equalsFn = e, 
            /**
             * The inner map for a key/value pair. Due to the possibility of collisions we
             * keep a list of entries that we do a linear search through to find an actual
             * match. Note that collisions should be rare, so we still expect near
             * constant time lookups in practice.
             */
            this.inner = {};
        }
        /** Get a value for this key, or undefined if it does not exist. */    get(t) {
            const e = this.mapKeyFn(t), n = this.inner[e];
            if (void 0 !== n) for (const [e, s] of n) if (this.equalsFn(e, t)) return s;
        }
        has(t) {
            return void 0 !== this.get(t);
        }
        /** Put this key and value in the map. */    set(t, e) {
            const n = this.mapKeyFn(t), s = this.inner[n];
            if (void 0 !== s) {
                for (let n = 0; n < s.length; n++) if (this.equalsFn(s[n][0], t)) return void (s[n] = [ t, e ]);
                s.push([ t, e ]);
            } else this.inner[n] = [ [ t, e ] ];
        }
        /**
         * Remove this key from the map. Returns a boolean if anything was deleted.
         */    delete(t) {
            const e = this.mapKeyFn(t), n = this.inner[e];
            if (void 0 === n) return !1;
            for (let s = 0; s < n.length; s++) if (this.equalsFn(n[s][0], t)) return 1 === n.length ? delete this.inner[e] : n.splice(s, 1), 
            !0;
            return !1;
        }
        forEach(t) {
            lt(this.inner, ((e, n) => {
                for (const [e, s] of n) t(e, s);
            }));
        }
        isEmpty() {
            return ft(this.inner);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An in-memory buffer of entries to be written to a RemoteDocumentCache.
     * It can be used to batch up a set of changes to be written to the cache, but
     * additionally supports reading entries back with the `getEntry()` method,
     * falling back to the underlying RemoteDocumentCache if no entry is
     * buffered.
     *
     * Entries added to the cache *must* be read first. This is to facilitate
     * calculating the size delta of the pending changes.
     *
     * PORTING NOTE: This class was implemented then removed from other platforms.
     * If byte-counting ends up being needed on the other platforms, consider
     * porting this class as part of that implementation work.
     */ class Hi {
        constructor() {
            // A mapping of document key to the new cache entry that should be written (or null if any
            // existing cache entry should be removed).
            this.changes = new zi((t => t.toString()), ((t, e) => t.isEqual(e))), this.changesApplied = !1;
        }
        getReadTime(t) {
            const e = this.changes.get(t);
            return e ? e.readTime : ut.min();
        }
        /**
         * Buffers a `RemoteDocumentCache.addEntry()` call.
         *
         * You can only modify documents that have already been retrieved via
         * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
         */    addEntry(t, e) {
            this.assertNotApplied(), this.changes.set(t.key, {
                document: t,
                readTime: e
            });
        }
        /**
         * Buffers a `RemoteDocumentCache.removeEntry()` call.
         *
         * You can only remove documents that have already been retrieved via
         * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
         */    removeEntry(t, e = null) {
            this.assertNotApplied(), this.changes.set(t, {
                document: Gt.newInvalidDocument(t),
                readTime: e
            });
        }
        /**
         * Looks up an entry in the cache. The buffered changes will first be checked,
         * and if no buffered change applies, this will forward to
         * `RemoteDocumentCache.getEntry()`.
         *
         * @param transaction - The transaction in which to perform any persistence
         *     operations.
         * @param documentKey - The key of the entry to look up.
         * @returns The cached document or an invalid document if we have nothing
         * cached.
         */    getEntry(t, e) {
            this.assertNotApplied();
            const n = this.changes.get(e);
            return void 0 !== n ? zs.resolve(n.document) : this.getFromCache(t, e);
        }
        /**
         * Looks up several entries in the cache, forwarding to
         * `RemoteDocumentCache.getEntry()`.
         *
         * @param transaction - The transaction in which to perform any persistence
         *     operations.
         * @param documentKeys - The keys of the entries to look up.
         * @returns A map of cached documents, indexed by key. If an entry cannot be
         *     found, the corresponding key will be mapped to an invalid document.
         */    getEntries(t, e) {
            return this.getAllFromCache(t, e);
        }
        /**
         * Applies buffered changes to the underlying RemoteDocumentCache, using
         * the provided transaction.
         */    apply(t) {
            return this.assertNotApplied(), this.changesApplied = !0, this.applyChanges(t);
        }
        /** Helper to assert this.changes is not null  */    assertNotApplied() {}
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A readonly view of the local state of all documents we're tracking (i.e. we
     * have a cached version in remoteDocumentCache or local mutations for the
     * document). The view is computed by applying the mutations in the
     * MutationQueue to the RemoteDocumentCache.
     */ class ur {
        constructor(t, e, n) {
            this.Je = t, this.An = e, this.Jt = n;
        }
        /**
         * Get the local view of the document identified by `key`.
         *
         * @returns Local view of the document or null if we don't have any cached
         * state for it.
         */    Rn(t, e) {
            return this.An.getAllMutationBatchesAffectingDocumentKey(t, e).next((n => this.bn(t, e, n)));
        }
        /** Internal version of `getDocument` that allows reusing batches. */    bn(t, e, n) {
            return this.Je.getEntry(t, e).next((t => {
                for (const e of n) e.applyToLocalView(t);
                return t;
            }));
        }
        // Returns the view of the given `docs` as they would appear after applying
        // all mutations in the given `batches`.
        Pn(t, e) {
            t.forEach(((t, n) => {
                for (const t of e) t.applyToLocalView(n);
            }));
        }
        /**
         * Gets the local view of the documents identified by `keys`.
         *
         * If we don't have cached state for a document in `keys`, a NoDocument will
         * be stored for that key in the resulting set.
         */    vn(t, e) {
            return this.Je.getEntries(t, e).next((e => this.Vn(t, e).next((() => e))));
        }
        /**
         * Applies the local view the given `baseDocs` without retrieving documents
         * from the local store.
         */    Vn(t, e) {
            return this.An.getAllMutationBatchesAffectingDocumentKeys(t, e).next((t => this.Pn(e, t)));
        }
        /**
         * Performs a query against the local view of all documents.
         *
         * @param transaction - The persistence transaction.
         * @param query - The query to match documents against.
         * @param sinceReadTime - If not set to SnapshotVersion.min(), return only
         *     documents that have been read since this snapshot version (exclusive).
         */    getDocumentsMatchingQuery(t, e, n) {
            /**
     * Returns whether the query matches a single document by path (rather than a
     * collection).
     */
            return function(t) {
                return Dt.isDocumentKey(t.path) && null === t.collectionGroup && 0 === t.filters.length;
            }(e) ? this.Sn(t, e.path) : Ae(e) ? this.Dn(t, e, n) : this.Cn(t, e, n);
        }
        Sn(t, e) {
            // Just do a simple document lookup.
            return this.Rn(t, new Dt(e)).next((t => {
                let e = Pn();
                return t.isFoundDocument() && (e = e.insert(t.key, t)), e;
            }));
        }
        Dn(t, e, n) {
            const s = e.collectionGroup;
            let i = Pn();
            return this.Jt.getCollectionParents(t, s).next((r => zs.forEach(r, (r => {
                const o = function(t, e) {
                    return new me(e, 
                    /*collectionGroup=*/ null, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
                }
                /**
     * Returns true if this query does not specify any query constraints that
     * could remove results.
     */ (e, r.child(s));
                return this.Cn(t, o, n).next((t => {
                    t.forEach(((t, e) => {
                        i = i.insert(t, e);
                    }));
                }));
            })).next((() => i))));
        }
        Cn(t, e, n) {
            // Query the remote documents and overlay mutations.
            let s, i;
            return this.Je.getDocumentsMatchingQuery(t, e, n).next((n => (s = n, this.An.getAllMutationBatchesAffectingQuery(t, e)))).next((e => (i = e, 
            this.Nn(t, i, s).next((t => {
                s = t;
                for (const t of i) for (const e of t.mutations) {
                    const n = e.key;
                    let i = s.get(n);
                    null == i && (
                    // Create invalid document to apply mutations on top of
                    i = Gt.newInvalidDocument(n), s = s.insert(n, i)), en(e, i, t.localWriteTime), i.isFoundDocument() || (s = s.remove(n));
                }
            }))))).next((() => (
            // Finally, filter out any documents that don't actually match
            // the query.
            s.forEach(((t, n) => {
                De(e, n) || (s = s.remove(t));
            })), s)));
        }
        Nn(t, e, n) {
            let s = Dn();
            for (const t of e) for (const e of t.mutations) e instanceof cn && null === n.get(e.key) && (s = s.add(e.key));
            let i = n;
            return this.Je.getEntries(t, s).next((t => (t.forEach(((t, e) => {
                e.isFoundDocument() && (i = i.insert(t, e));
            })), i)));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A set of changes to what documents are currently in view and out of view for
     * a given query. These changes are sent to the LocalStore by the View (via
     * the SyncEngine) and are used to pin / unpin documents as appropriate.
     */ class hr {
        constructor(t, e, n, s) {
            this.targetId = t, this.fromCache = e, this.kn = n, this.xn = s;
        }
        static $n(t, e) {
            let n = Dn(), s = Dn();
            for (const t of e.docChanges) switch (t.type) {
              case 0 /* Added */ :
                n = n.add(t.doc.key);
                break;

              case 1 /* Removed */ :
                s = s.add(t.doc.key);
     // do nothing
                    }
            return new hr(t, e.fromCache, n, s);
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A query engine that takes advantage of the target document mapping in the
     * QueryCache. Query execution is optimized by only reading the documents that
     * previously matched a query plus any documents that were edited after the
     * query was last listened to.
     *
     * There are some cases when this optimization is not guaranteed to produce
     * the same results as full collection scans. In these cases, query
     * processing falls back to full scans. These cases are:
     *
     * - Limit queries where a document that matched the query previously no longer
     *   matches the query.
     *
     * - Limit queries where a document edit may cause the document to sort below
     *   another document that is in the local cache.
     *
     * - Queries that have never been CURRENT or free of limbo documents.
     */ class lr {
        /** Sets the document view to query against. */
        On(t) {
            this.Mn = t;
        }
        /** Returns all local documents matching the specified query. */    getDocumentsMatchingQuery(t, e, n, s) {
            // Queries that match all documents don't benefit from using
            // key-based lookups. It is more efficient to scan all documents in a
            // collection, rather than to perform individual lookups.
            return function(t) {
                return 0 === t.filters.length && null === t.limit && null == t.startAt && null == t.endAt && (0 === t.explicitOrderBy.length || 1 === t.explicitOrderBy.length && t.explicitOrderBy[0].field.isKeyField());
            }(e) || n.isEqual(ut.min()) ? this.Fn(t, e) : this.Mn.vn(t, s).next((i => {
                const r = this.Ln(e, i);
                return (pe(e) || Te(e)) && this.Bn(e.limitType, r, s, n) ? this.Fn(t, e) : (x() <= LogLevel.DEBUG && O("QueryEngine", "Re-using previous result from %s to execute query: %s", n.toString(), Se(e)), 
                this.Mn.getDocumentsMatchingQuery(t, e, n).next((t => (
                // We merge `previousResults` into `updateResults`, since
                // `updateResults` is already a DocumentMap. If a document is
                // contained in both lists, then its contents are the same.
                r.forEach((e => {
                    t = t.insert(e.key, e);
                })), t))));
            }));
            // Queries that have never seen a snapshot without limbo free documents
            // should also be run as a full collection scan.
            }
        /** Applies the query filter and sorting to the provided documents.  */    Ln(t, e) {
            // Sort the documents and re-apply the query filter since previously
            // matching documents do not necessarily still match the query.
            let n = new En(Ce(t));
            return e.forEach(((e, s) => {
                De(t, s) && (n = n.add(s));
            })), n;
        }
        /**
         * Determines if a limit query needs to be refilled from cache, making it
         * ineligible for index-free execution.
         *
         * @param sortedPreviousResults - The documents that matched the query when it
         * was last synchronized, sorted by the query's comparator.
         * @param remoteKeys - The document keys that matched the query at the last
         * snapshot.
         * @param limboFreeSnapshotVersion - The version of the snapshot when the
         * query was last synchronized.
         */    Bn(t, e, n, s) {
            // The query needs to be refilled if a previously matching document no
            // longer matches.
            if (n.size !== e.size) return !0;
            // Limit queries are not eligible for index-free query execution if there is
            // a potential that an older document from cache now sorts before a document
            // that was previously part of the limit. This, however, can only happen if
            // the document at the edge of the limit goes out of limit.
            // If a document that is not the limit boundary sorts differently,
            // the boundary of the limit itself did not change and documents from cache
            // will continue to be "rejected" by this boundary. Therefore, we can ignore
            // any modifications that don't affect the last document.
                    const i = "F" /* First */ === t ? e.last() : e.first();
            return !!i && (i.hasPendingWrites || i.version.compareTo(s) > 0);
        }
        Fn(t, e) {
            return x() <= LogLevel.DEBUG && O("QueryEngine", "Using full collection scan to execute query:", Se(e)), 
            this.Mn.getDocumentsMatchingQuery(t, e, ut.min());
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Implements `LocalStore` interface.
     *
     * Note: some field defined in this class might have public access level, but
     * the class is not exported so they are only accessible from this module.
     * This is useful to implement optional features (like bundles) in free
     * functions, such that they are tree-shakeable.
     */
    class fr {
        constructor(
        /** Manages our in-memory or durable persistence. */
        t, e, n, s) {
            this.persistence = t, this.Un = e, this.k = s, 
            /**
             * Maps a targetID to data about its target.
             *
             * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
             * of `applyRemoteEvent()` idempotent.
             */
            this.qn = new yn(rt), 
            /** Maps a target to its targetID. */
            // TODO(wuandy): Evaluate if TargetId can be part of Target.
            this.Kn = new zi((t => Jt(t)), Xt), 
            /**
             * The read time of the last entry processed by `getNewDocumentChanges()`.
             *
             * PORTING NOTE: This is only used for multi-tab synchronization.
             */
            this.jn = ut.min(), this.An = t.getMutationQueue(n), this.Qn = t.getRemoteDocumentCache(), 
            this.He = t.getTargetCache(), this.Wn = new ur(this.Qn, this.An, this.persistence.getIndexManager()), 
            this.Ye = t.getBundleCache(), this.Un.On(this.Wn);
        }
        collectGarbage(t) {
            return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (e => t.collect(e, this.qn)));
        }
    }

    function dr(
    /** Manages our in-memory or durable persistence. */
    t, e, n, s) {
        return new fr(t, e, n, s);
    }

    /**
     * Tells the LocalStore that the currently authenticated user has changed.
     *
     * In response the local store switches the mutation queue to the new user and
     * returns any resulting document changes.
     */
    // PORTING NOTE: Android and iOS only return the documents affected by the
    // change.
    async function wr(t, e) {
        const n = K(t);
        let s = n.An, i = n.Wn;
        const r = await n.persistence.runTransaction("Handle user change", "readonly", (t => {
            // Swap out the mutation queue, grabbing the pending mutation batches
            // before and after.
            let r;
            return n.An.getAllMutationBatches(t).next((o => (r = o, s = n.persistence.getMutationQueue(e), 
            // Recreate our LocalDocumentsView using the new
            // MutationQueue.
            i = new ur(n.Qn, s, n.persistence.getIndexManager()), s.getAllMutationBatches(t)))).next((e => {
                const n = [], s = [];
                // Union the old/new changed keys.
                let o = Dn();
                for (const t of r) {
                    n.push(t.batchId);
                    for (const e of t.mutations) o = o.add(e.key);
                }
                for (const t of e) {
                    s.push(t.batchId);
                    for (const e of t.mutations) o = o.add(e.key);
                }
                // Return the set of all (potentially) changed documents and the list
                // of mutation batch IDs that were affected by change.
                            return i.vn(t, o).next((t => ({
                    Gn: t,
                    removedBatchIds: n,
                    addedBatchIds: s
                })));
            }));
        }));
        return n.An = s, n.Wn = i, n.Un.On(n.Wn), r;
    }

    /* Accepts locally generated Mutations and commit them to storage. */
    /**
     * Acknowledges the given batch.
     *
     * On the happy path when a batch is acknowledged, the local store will
     *
     *  + remove the batch from the mutation queue;
     *  + apply the changes to the remote document cache;
     *  + recalculate the latency compensated view implied by those changes (there
     *    may be mutations in the queue that affect the documents but haven't been
     *    acknowledged yet); and
     *  + give the changed documents back the sync engine
     *
     * @returns The resulting (modified) documents.
     */
    function _r(t, e) {
        const n = K(t);
        return n.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (t => {
            const s = e.batch.keys(), i = n.Qn.newChangeBuffer({
                trackRemovals: !0
            });
            return function(t, e, n, s) {
                const i = n.batch, r = i.keys();
                let o = zs.resolve();
                return r.forEach((t => {
                    o = o.next((() => s.getEntry(e, t))).next((e => {
                        const r = n.docVersions.get(t);
                        U(null !== r), e.version.compareTo(r) < 0 && (i.applyToRemoteDocument(e, n), e.isValidDocument() && 
                        // We use the commitVersion as the readTime rather than the
                        // document's updateTime since the updateTime is not advanced
                        // for updates that do not modify the underlying document.
                        s.addEntry(e, n.commitVersion));
                    }));
                })), o.next((() => t.An.removeMutationBatch(e, i)));
            }
            /** Returns the local view of the documents affected by a mutation batch. */
            // PORTING NOTE: Multi-Tab only.
            (n, t, e, i).next((() => i.apply(t))).next((() => n.An.performConsistencyCheck(t))).next((() => n.Wn.vn(t, s)));
        }));
    }

    /**
     * Removes mutations from the MutationQueue for the specified batch;
     * LocalDocuments will be recalculated.
     *
     * @returns The resulting modified documents.
     */
    /**
     * Returns the last consistent snapshot processed (used by the RemoteStore to
     * determine whether to buffer incoming snapshots from the backend).
     */
    function mr(t) {
        const e = K(t);
        return e.persistence.runTransaction("Get last remote snapshot version", "readonly", (t => e.He.getLastRemoteSnapshotVersion(t)));
    }

    /**
     * Updates the "ground-state" (remote) documents. We assume that the remote
     * event reflects any write batches that have been acknowledged or rejected
     * (i.e. we do not re-apply local mutations to updates from this event).
     *
     * LocalDocuments are re-calculated if there are remaining mutations in the
     * queue.
     */ function gr(t, e) {
        const n = K(t), s = e.snapshotVersion;
        let i = n.qn;
        return n.persistence.runTransaction("Apply remote event", "readwrite-primary", (t => {
            const r = n.Qn.newChangeBuffer({
                trackRemovals: !0
            });
            // Reset newTargetDataByTargetMap in case this transaction gets re-run.
                    i = n.qn;
            const o = [];
            e.targetChanges.forEach(((r, c) => {
                const a = i.get(c);
                if (!a) return;
                // Only update the remote keys if the target is still active. This
                // ensures that we can persist the updated target data along with
                // the updated assignment.
                            o.push(n.He.removeMatchingKeys(t, r.removedDocuments, c).next((() => n.He.addMatchingKeys(t, r.addedDocuments, c))));
                let u = a.withSequenceNumber(t.currentSequenceNumber);
                e.targetMismatches.has(c) ? u = u.withResumeToken(pt.EMPTY_BYTE_STRING, ut.min()).withLastLimboFreeSnapshotVersion(ut.min()) : r.resumeToken.approximateByteSize() > 0 && (u = u.withResumeToken(r.resumeToken, s)), 
                i = i.insert(c, u), 
                // Update the target data if there are target changes (or if
                // sufficient time has passed since the last update).
                /**
     * Returns true if the newTargetData should be persisted during an update of
     * an active target. TargetData should always be persisted when a target is
     * being released and should not call this function.
     *
     * While the target is active, TargetData updates can be omitted when nothing
     * about the target has changed except metadata like the resume token or
     * snapshot version. Occasionally it's worth the extra write to prevent these
     * values from getting too stale after a crash, but this doesn't have to be
     * too frequent.
     */
                function(t, e, n) {
                    // Always persist target data if we don't already have a resume token.
                    if (0 === t.resumeToken.approximateByteSize()) return !0;
                    // Don't allow resume token changes to be buffered indefinitely. This
                    // allows us to be reasonably up-to-date after a crash and avoids needing
                    // to loop over all active queries on shutdown. Especially in the browser
                    // we may not get time to do anything interesting while the current tab is
                    // closing.
                                    if (e.snapshotVersion.toMicroseconds() - t.snapshotVersion.toMicroseconds() >= 3e8) return !0;
                    // Otherwise if the only thing that has changed about a target is its resume
                    // token it's not worth persisting. Note that the RemoteStore keeps an
                    // in-memory view of the currently active targets which includes the current
                    // resume token, so stream failure or user changes will still use an
                    // up-to-date resume token regardless of what we do here.
                                    return n.addedDocuments.size + n.modifiedDocuments.size + n.removedDocuments.size > 0;
                }
                /**
     * Notifies local store of the changed views to locally pin documents.
     */ (a, u, r) && o.push(n.He.updateTargetData(t, u));
            }));
            let c = Rn();
            // HACK: The only reason we allow a null snapshot version is so that we
            // can synthesize remote events when we get permission denied errors while
            // trying to resolve the state of a locally cached document that is in
            // limbo.
            if (e.documentUpdates.forEach(((s, i) => {
                e.resolvedLimboDocuments.has(s) && o.push(n.persistence.referenceDelegate.updateLimboDocument(t, s));
            })), 
            // Each loop iteration only affects its "own" doc, so it's safe to get all the remote
            // documents in advance in a single call.
            o.push(yr(t, r, e.documentUpdates, s, void 0).next((t => {
                c = t;
            }))), !s.isEqual(ut.min())) {
                const e = n.He.getLastRemoteSnapshotVersion(t).next((e => n.He.setTargetsMetadata(t, t.currentSequenceNumber, s)));
                o.push(e);
            }
            return zs.waitFor(o).next((() => r.apply(t))).next((() => n.Wn.Vn(t, c))).next((() => c));
        })).then((t => (n.qn = i, t)));
    }

    /**
     * Populates document change buffer with documents from backend or a bundle.
     * Returns the document changes resulting from applying those documents.
     *
     * @param txn - Transaction to use to read existing documents from storage.
     * @param documentBuffer - Document buffer to collect the resulted changes to be
     *        applied to storage.
     * @param documents - Documents to be applied.
     * @param globalVersion - A `SnapshotVersion` representing the read time if all
     *        documents have the same read time.
     * @param documentVersions - A DocumentKey-to-SnapshotVersion map if documents
     *        have their own read time.
     *
     * Note: this function will use `documentVersions` if it is defined;
     * when it is not defined, resorts to `globalVersion`.
     */ function yr(t, e, n, s, 
    // TODO(wuandy): We could add `readTime` to MaybeDocument instead to remove
    // this parameter.
    i) {
        let r = Dn();
        return n.forEach((t => r = r.add(t))), e.getEntries(t, r).next((t => {
            let r = Rn();
            return n.forEach(((n, o) => {
                const c = t.get(n), a = (null == i ? void 0 : i.get(n)) || s;
                // Note: The order of the steps below is important, since we want
                // to ensure that rejected limbo resolutions (which fabricate
                // NoDocuments with SnapshotVersion.min()) never add documents to
                // cache.
                o.isNoDocument() && o.version.isEqual(ut.min()) ? (
                // NoDocuments with SnapshotVersion.min() are used in manufactured
                // events. We remove these documents from cache since we lost
                // access.
                e.removeEntry(n, a), r = r.insert(n, o)) : !c.isValidDocument() || o.version.compareTo(c.version) > 0 || 0 === o.version.compareTo(c.version) && c.hasPendingWrites ? (e.addEntry(o, a), 
                r = r.insert(n, o)) : O("LocalStore", "Ignoring outdated watch update for ", n, ". Current version:", c.version, " Watch version:", o.version);
            })), r;
        }));
    }

    /**
     * Gets the mutation batch after the passed in batchId in the mutation queue
     * or null if empty.
     * @param afterBatchId - If provided, the batch to search after.
     * @returns The next mutation or null if there wasn't one.
     */
    function pr(t, e) {
        const n = K(t);
        return n.persistence.runTransaction("Get next mutation batch", "readonly", (t => (void 0 === e && (e = -1), 
        n.An.getNextMutationBatchAfterBatchId(t, e))));
    }

    /**
     * Reads the current value of a Document with a given key or null if not
     * found - used for testing.
     */
    /**
     * Assigns the given target an internal ID so that its results can be pinned so
     * they don't get GC'd. A target must be allocated in the local store before
     * the store can be used to manage its view.
     *
     * Allocating an already allocated `Target` will return the existing `TargetData`
     * for that `Target`.
     */
    function Tr(t, e) {
        const n = K(t);
        return n.persistence.runTransaction("Allocate target", "readwrite", (t => {
            let s;
            return n.He.getTargetData(t, e).next((i => i ? (
            // This target has been listened to previously, so reuse the
            // previous targetID.
            // TODO(mcg): freshen last accessed date?
            s = i, zs.resolve(s)) : n.He.allocateTargetId(t).next((i => (s = new ai(e, i, 0 /* Listen */ , t.currentSequenceNumber), 
            n.He.addTargetData(t, s).next((() => s)))))));
        })).then((t => {
            // If Multi-Tab is enabled, the existing target data may be newer than
            // the in-memory data
            const s = n.qn.get(t.targetId);
            return (null === s || t.snapshotVersion.compareTo(s.snapshotVersion) > 0) && (n.qn = n.qn.insert(t.targetId, t), 
            n.Kn.set(e, t.targetId)), t;
        }));
    }

    /**
     * Returns the TargetData as seen by the LocalStore, including updates that may
     * have not yet been persisted to the TargetCache.
     */
    // Visible for testing.
    /**
     * Unpins all the documents associated with the given target. If
     * `keepPersistedTargetData` is set to false and Eager GC enabled, the method
     * directly removes the associated target data from the target cache.
     *
     * Releasing a non-existing `Target` is a no-op.
     */
    // PORTING NOTE: `keepPersistedTargetData` is multi-tab only.
    async function Er(t, e, n) {
        const s = K(t), i = s.qn.get(e), r = n ? "readwrite" : "readwrite-primary";
        try {
            n || await s.persistence.runTransaction("Release target", r, (t => s.persistence.referenceDelegate.removeTarget(t, i)));
        } catch (t) {
            if (!Zs(t)) throw t;
            // All `releaseTarget` does is record the final metadata state for the
            // target, but we've been recording this periodically during target
            // activity. If we lose this write this could cause a very slight
            // difference in the order of target deletion during GC, but we
            // don't define exact LRU semantics so this is acceptable.
            O("LocalStore", `Failed to update sequence numbers for target ${e}: ${t}`);
        }
        s.qn = s.qn.remove(e), s.Kn.delete(i.target);
    }

    /**
     * Runs the specified query against the local store and returns the results,
     * potentially taking advantage of query data from previous executions (such
     * as the set of remote keys).
     *
     * @param usePreviousResults - Whether results from previous executions can
     * be used to optimize this query execution.
     */ function Ir(t, e, n) {
        const s = K(t);
        let i = ut.min(), r = Dn();
        return s.persistence.runTransaction("Execute query", "readonly", (t => function(t, e, n) {
            const s = K(t), i = s.Kn.get(n);
            return void 0 !== i ? zs.resolve(s.qn.get(i)) : s.He.getTargetData(e, n);
        }(s, t, be(e)).next((e => {
            if (e) return i = e.lastLimboFreeSnapshotVersion, s.He.getMatchingKeysForTargetId(t, e.targetId).next((t => {
                r = t;
            }));
        })).next((() => s.Un.getDocumentsMatchingQuery(t, e, n ? i : ut.min(), n ? r : Dn()))).next((t => ({
            documents: t,
            zn: r
        })))));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class Vr {
        constructor(t) {
            this.k = t, this.Xn = new Map, this.Zn = new Map;
        }
        getBundleMetadata(t, e) {
            return zs.resolve(this.Xn.get(e));
        }
        saveBundleMetadata(t, e) {
            /** Decodes a BundleMetadata proto into a BundleMetadata object. */
            var n;
            return this.Xn.set(e.id, {
                id: (n = e).id,
                version: n.version,
                createTime: zn(n.createTime)
            }), zs.resolve();
        }
        getNamedQuery(t, e) {
            return zs.resolve(this.Zn.get(e));
        }
        saveNamedQuery(t, e) {
            return this.Zn.set(e.name, function(t) {
                return {
                    name: t.name,
                    query: pi(t.bundledQuery),
                    readTime: zn(t.readTime)
                };
            }(e)), zs.resolve();
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A collection of references to a document from some kind of numbered entity
     * (either a target ID or batch ID). As references are added to or removed from
     * the set corresponding events are emitted to a registered garbage collector.
     *
     * Each reference is represented by a DocumentReference object. Each of them
     * contains enough information to uniquely identify the reference. They are all
     * stored primarily in a set sorted by key. A document is considered garbage if
     * there's no references in that set (this can be efficiently checked thanks to
     * sorting by key).
     *
     * ReferenceSet also keeps a secondary set that contains references sorted by
     * IDs. This one is used to efficiently implement removal of all references by
     * some target ID.
     */ class Sr {
        constructor() {
            // A set of outstanding references to a document sorted by key.
            this.ts = new En(Dr.es), 
            // A set of outstanding references to a document sorted by target id.
            this.ns = new En(Dr.ss);
        }
        /** Returns true if the reference set contains no references. */    isEmpty() {
            return this.ts.isEmpty();
        }
        /** Adds a reference to the given document key for the given ID. */    addReference(t, e) {
            const n = new Dr(t, e);
            this.ts = this.ts.add(n), this.ns = this.ns.add(n);
        }
        /** Add references to the given document keys for the given ID. */    rs(t, e) {
            t.forEach((t => this.addReference(t, e)));
        }
        /**
         * Removes a reference to the given document key for the given
         * ID.
         */    removeReference(t, e) {
            this.os(new Dr(t, e));
        }
        cs(t, e) {
            t.forEach((t => this.removeReference(t, e)));
        }
        /**
         * Clears all references with a given ID. Calls removeRef() for each key
         * removed.
         */    us(t) {
            const e = new Dt(new wt([])), n = new Dr(e, t), s = new Dr(e, t + 1), i = [];
            return this.ns.forEachInRange([ n, s ], (t => {
                this.os(t), i.push(t.key);
            })), i;
        }
        hs() {
            this.ts.forEach((t => this.os(t)));
        }
        os(t) {
            this.ts = this.ts.delete(t), this.ns = this.ns.delete(t);
        }
        ls(t) {
            const e = new Dt(new wt([])), n = new Dr(e, t), s = new Dr(e, t + 1);
            let i = Dn();
            return this.ns.forEachInRange([ n, s ], (t => {
                i = i.add(t.key);
            })), i;
        }
        containsKey(t) {
            const e = new Dr(t, 0), n = this.ts.firstAfterOrEqual(e);
            return null !== n && t.isEqual(n.key);
        }
    }

    class Dr {
        constructor(t, e) {
            this.key = t, this.fs = e;
        }
        /** Compare by key then by ID */    static es(t, e) {
            return Dt.comparator(t.key, e.key) || rt(t.fs, e.fs);
        }
        /** Compare by ID then by key */    static ss(t, e) {
            return rt(t.fs, e.fs) || Dt.comparator(t.key, e.key);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class Cr {
        constructor(t, e) {
            this.Jt = t, this.referenceDelegate = e, 
            /**
             * The set of all mutations that have been sent but not yet been applied to
             * the backend.
             */
            this.An = [], 
            /** Next value to use when assigning sequential IDs to each mutation batch. */
            this.ds = 1, 
            /** An ordered mapping between documents and the mutations batch IDs. */
            this.ws = new En(Dr.es);
        }
        checkEmpty(t) {
            return zs.resolve(0 === this.An.length);
        }
        addMutationBatch(t, e, n, s) {
            const i = this.ds;
            this.ds++, this.An.length > 0 && this.An[this.An.length - 1];
            const r = new oi(i, e, n, s);
            this.An.push(r);
            // Track references by document key and index collection parents.
            for (const e of s) this.ws = this.ws.add(new Dr(e.key, i)), this.Jt.addToCollectionParentIndex(t, e.key.path.popLast());
            return zs.resolve(r);
        }
        lookupMutationBatch(t, e) {
            return zs.resolve(this._s(e));
        }
        getNextMutationBatchAfterBatchId(t, e) {
            const n = e + 1, s = this.gs(n), i = s < 0 ? 0 : s;
            // The requested batchId may still be out of range so normalize it to the
            // start of the queue.
                    return zs.resolve(this.An.length > i ? this.An[i] : null);
        }
        getHighestUnacknowledgedBatchId() {
            return zs.resolve(0 === this.An.length ? -1 : this.ds - 1);
        }
        getAllMutationBatches(t) {
            return zs.resolve(this.An.slice());
        }
        getAllMutationBatchesAffectingDocumentKey(t, e) {
            const n = new Dr(e, 0), s = new Dr(e, Number.POSITIVE_INFINITY), i = [];
            return this.ws.forEachInRange([ n, s ], (t => {
                const e = this._s(t.fs);
                i.push(e);
            })), zs.resolve(i);
        }
        getAllMutationBatchesAffectingDocumentKeys(t, e) {
            let n = new En(rt);
            return e.forEach((t => {
                const e = new Dr(t, 0), s = new Dr(t, Number.POSITIVE_INFINITY);
                this.ws.forEachInRange([ e, s ], (t => {
                    n = n.add(t.fs);
                }));
            })), zs.resolve(this.ys(n));
        }
        getAllMutationBatchesAffectingQuery(t, e) {
            // Use the query path as a prefix for testing if a document matches the
            // query.
            const n = e.path, s = n.length + 1;
            // Construct a document reference for actually scanning the index. Unlike
            // the prefix the document key in this reference must have an even number of
            // segments. The empty segment can be used a suffix of the query path
            // because it precedes all other segments in an ordered traversal.
            let i = n;
            Dt.isDocumentKey(i) || (i = i.child(""));
            const r = new Dr(new Dt(i), 0);
            // Find unique batchIDs referenced by all documents potentially matching the
            // query.
                    let o = new En(rt);
            return this.ws.forEachWhile((t => {
                const e = t.key.path;
                return !!n.isPrefixOf(e) && (
                // Rows with document keys more than one segment longer than the query
                // path can't be matches. For example, a query on 'rooms' can't match
                // the document /rooms/abc/messages/xyx.
                // TODO(mcg): we'll need a different scanner when we implement
                // ancestor queries.
                e.length === s && (o = o.add(t.fs)), !0);
            }), r), zs.resolve(this.ys(o));
        }
        ys(t) {
            // Construct an array of matching batches, sorted by batchID to ensure that
            // multiple mutations affecting the same document key are applied in order.
            const e = [];
            return t.forEach((t => {
                const n = this._s(t);
                null !== n && e.push(n);
            })), e;
        }
        removeMutationBatch(t, e) {
            U(0 === this.ps(e.batchId, "removed")), this.An.shift();
            let n = this.ws;
            return zs.forEach(e.mutations, (s => {
                const i = new Dr(s.key, e.batchId);
                return n = n.delete(i), this.referenceDelegate.markPotentiallyOrphaned(t, s.key);
            })).next((() => {
                this.ws = n;
            }));
        }
        ee(t) {
            // No-op since the memory mutation queue does not maintain a separate cache.
        }
        containsKey(t, e) {
            const n = new Dr(e, 0), s = this.ws.firstAfterOrEqual(n);
            return zs.resolve(e.isEqual(s && s.key));
        }
        performConsistencyCheck(t) {
            return this.An.length, zs.resolve();
        }
        /**
         * Finds the index of the given batchId in the mutation queue and asserts that
         * the resulting index is within the bounds of the queue.
         *
         * @param batchId - The batchId to search for
         * @param action - A description of what the caller is doing, phrased in passive
         * form (e.g. "acknowledged" in a routine that acknowledges batches).
         */    ps(t, e) {
            return this.gs(t);
        }
        /**
         * Finds the index of the given batchId in the mutation queue. This operation
         * is O(1).
         *
         * @returns The computed index of the batch with the given batchId, based on
         * the state of the queue. Note this index can be negative if the requested
         * batchId has already been remvoed from the queue or past the end of the
         * queue if the batchId is larger than the last added batch.
         */    gs(t) {
            if (0 === this.An.length) 
            // As an index this is past the end of the queue
            return 0;
            // Examine the front of the queue to figure out the difference between the
            // batchId and indexes in the array. Note that since the queue is ordered
            // by batchId, if the first batch has a larger batchId then the requested
            // batchId doesn't exist in the queue.
                    return t - this.An[0].batchId;
        }
        /**
         * A version of lookupMutationBatch that doesn't return a promise, this makes
         * other functions that uses this code easier to read and more efficent.
         */    _s(t) {
            const e = this.gs(t);
            if (e < 0 || e >= this.An.length) return null;
            return this.An[e];
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The memory-only RemoteDocumentCache for IndexedDb. To construct, invoke
     * `newMemoryRemoteDocumentCache()`.
     */
    class Nr {
        /**
         * @param sizer - Used to assess the size of a document. For eager GC, this is
         * expected to just return 0 to avoid unnecessarily doing the work of
         * calculating the size.
         */
        constructor(t, e) {
            this.Jt = t, this.Ts = e, 
            /** Underlying cache of documents and their read times. */
            this.docs = new yn(Dt.comparator), 
            /** Size of all cached documents. */
            this.size = 0;
        }
        /**
         * Adds the supplied entry to the cache and updates the cache size as appropriate.
         *
         * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()`.
         */    addEntry(t, e, n) {
            const s = e.key, i = this.docs.get(s), r = i ? i.size : 0, o = this.Ts(e);
            return this.docs = this.docs.insert(s, {
                document: e.mutableCopy(),
                size: o,
                readTime: n
            }), this.size += o - r, this.Jt.addToCollectionParentIndex(t, s.path.popLast());
        }
        /**
         * Removes the specified entry from the cache and updates the cache size as appropriate.
         *
         * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()`.
         */    removeEntry(t) {
            const e = this.docs.get(t);
            e && (this.docs = this.docs.remove(t), this.size -= e.size);
        }
        getEntry(t, e) {
            const n = this.docs.get(e);
            return zs.resolve(n ? n.document.mutableCopy() : Gt.newInvalidDocument(e));
        }
        getEntries(t, e) {
            let n = Rn();
            return e.forEach((t => {
                const e = this.docs.get(t);
                n = n.insert(t, e ? e.document.mutableCopy() : Gt.newInvalidDocument(t));
            })), zs.resolve(n);
        }
        getDocumentsMatchingQuery(t, e, n) {
            let s = Rn();
            // Documents are ordered by key, so we can use a prefix scan to narrow down
            // the documents we need to match the query against.
                    const i = new Dt(e.path.child("")), r = this.docs.getIteratorFrom(i);
            for (;r.hasNext(); ) {
                const {key: t, value: {document: i, readTime: o}} = r.getNext();
                if (!e.path.isPrefixOf(t.path)) break;
                o.compareTo(n) <= 0 || De(e, i) && (s = s.insert(i.key, i.mutableCopy()));
            }
            return zs.resolve(s);
        }
        Es(t, e) {
            return zs.forEach(this.docs, (t => e(t)));
        }
        newChangeBuffer(t) {
            // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps
            // a separate changelog and does not need special handling for removals.
            return new kr(this);
        }
        getSize(t) {
            return zs.resolve(this.size);
        }
    }

    /**
     * Creates a new memory-only RemoteDocumentCache.
     *
     * @param indexManager - A class that manages collection group indices.
     * @param sizer - Used to assess the size of a document. For eager GC, this is
     * expected to just return 0 to avoid unnecessarily doing the work of
     * calculating the size.
     */
    /**
     * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.
     */
    class kr extends Hi {
        constructor(t) {
            super(), this.De = t;
        }
        applyChanges(t) {
            const e = [];
            return this.changes.forEach(((n, s) => {
                s.document.isValidDocument() ? e.push(this.De.addEntry(t, s.document, this.getReadTime(n))) : this.De.removeEntry(n);
            })), zs.waitFor(e);
        }
        getFromCache(t, e) {
            return this.De.getEntry(t, e);
        }
        getAllFromCache(t, e) {
            return this.De.getEntries(t, e);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class xr {
        constructor(t) {
            this.persistence = t, 
            /**
             * Maps a target to the data about that target
             */
            this.Is = new zi((t => Jt(t)), Xt), 
            /** The last received snapshot version. */
            this.lastRemoteSnapshotVersion = ut.min(), 
            /** The highest numbered target ID encountered. */
            this.highestTargetId = 0, 
            /** The highest sequence number encountered. */
            this.As = 0, 
            /**
             * A ordered bidirectional mapping between documents and the remote target
             * IDs.
             */
            this.Rs = new Sr, this.targetCount = 0, this.bs = Oi.ie();
        }
        forEachTarget(t, e) {
            return this.Is.forEach(((t, n) => e(n))), zs.resolve();
        }
        getLastRemoteSnapshotVersion(t) {
            return zs.resolve(this.lastRemoteSnapshotVersion);
        }
        getHighestSequenceNumber(t) {
            return zs.resolve(this.As);
        }
        allocateTargetId(t) {
            return this.highestTargetId = this.bs.next(), zs.resolve(this.highestTargetId);
        }
        setTargetsMetadata(t, e, n) {
            return n && (this.lastRemoteSnapshotVersion = n), e > this.As && (this.As = e), 
            zs.resolve();
        }
        ae(t) {
            this.Is.set(t.target, t);
            const e = t.targetId;
            e > this.highestTargetId && (this.bs = new Oi(e), this.highestTargetId = e), t.sequenceNumber > this.As && (this.As = t.sequenceNumber);
        }
        addTargetData(t, e) {
            return this.ae(e), this.targetCount += 1, zs.resolve();
        }
        updateTargetData(t, e) {
            return this.ae(e), zs.resolve();
        }
        removeTargetData(t, e) {
            return this.Is.delete(e.target), this.Rs.us(e.targetId), this.targetCount -= 1, 
            zs.resolve();
        }
        removeTargets(t, e, n) {
            let s = 0;
            const i = [];
            return this.Is.forEach(((r, o) => {
                o.sequenceNumber <= e && null === n.get(o.targetId) && (this.Is.delete(r), i.push(this.removeMatchingKeysForTargetId(t, o.targetId)), 
                s++);
            })), zs.waitFor(i).next((() => s));
        }
        getTargetCount(t) {
            return zs.resolve(this.targetCount);
        }
        getTargetData(t, e) {
            const n = this.Is.get(e) || null;
            return zs.resolve(n);
        }
        addMatchingKeys(t, e, n) {
            return this.Rs.rs(e, n), zs.resolve();
        }
        removeMatchingKeys(t, e, n) {
            this.Rs.cs(e, n);
            const s = this.persistence.referenceDelegate, i = [];
            return s && e.forEach((e => {
                i.push(s.markPotentiallyOrphaned(t, e));
            })), zs.waitFor(i);
        }
        removeMatchingKeysForTargetId(t, e) {
            return this.Rs.us(e), zs.resolve();
        }
        getMatchingKeysForTargetId(t, e) {
            const n = this.Rs.ls(e);
            return zs.resolve(n);
        }
        containsKey(t, e) {
            return zs.resolve(this.Rs.containsKey(e));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A memory-backed instance of Persistence. Data is stored only in RAM and
     * not persisted across sessions.
     */
    class $r {
        /**
         * The constructor accepts a factory for creating a reference delegate. This
         * allows both the delegate and this instance to have strong references to
         * each other without having nullable fields that would then need to be
         * checked or asserted on every access.
         */
        constructor(t, e) {
            this.Ps = {}, this.Be = new nt(0), this.Ue = !1, this.Ue = !0, this.referenceDelegate = t(this), 
            this.He = new xr(this);
            this.Jt = new Ai, this.Je = function(t, e) {
                return new Nr(t, e);
            }(this.Jt, (t => this.referenceDelegate.vs(t))), this.k = new ui(e), this.Ye = new Vr(this.k);
        }
        start() {
            return Promise.resolve();
        }
        shutdown() {
            // No durable state to ensure is closed on shutdown.
            return this.Ue = !1, Promise.resolve();
        }
        get started() {
            return this.Ue;
        }
        setDatabaseDeletedListener() {
            // No op.
        }
        setNetworkEnabled() {
            // No op.
        }
        getIndexManager() {
            return this.Jt;
        }
        getMutationQueue(t) {
            let e = this.Ps[t.toKey()];
            return e || (e = new Cr(this.Jt, this.referenceDelegate), this.Ps[t.toKey()] = e), 
            e;
        }
        getTargetCache() {
            return this.He;
        }
        getRemoteDocumentCache() {
            return this.Je;
        }
        getBundleCache() {
            return this.Ye;
        }
        runTransaction(t, e, n) {
            O("MemoryPersistence", "Starting transaction:", t);
            const s = new Or(this.Be.next());
            return this.referenceDelegate.Vs(), n(s).next((t => this.referenceDelegate.Ss(s).next((() => t)))).toPromise().then((t => (s.raiseOnCommittedEvent(), 
            t)));
        }
        Ds(t, e) {
            return zs.or(Object.values(this.Ps).map((n => () => n.containsKey(t, e))));
        }
    }

    /**
     * Memory persistence is not actually transactional, but future implementations
     * may have transaction-scoped state.
     */ class Or extends Gs {
        constructor(t) {
            super(), this.currentSequenceNumber = t;
        }
    }

    class Mr {
        constructor(t) {
            this.persistence = t, 
            /** Tracks all documents that are active in Query views. */
            this.Cs = new Sr, 
            /** The list of documents that are potentially GCed after each transaction. */
            this.Ns = null;
        }
        static ks(t) {
            return new Mr(t);
        }
        get xs() {
            if (this.Ns) return this.Ns;
            throw B();
        }
        addReference(t, e, n) {
            return this.Cs.addReference(n, e), this.xs.delete(n.toString()), zs.resolve();
        }
        removeReference(t, e, n) {
            return this.Cs.removeReference(n, e), this.xs.add(n.toString()), zs.resolve();
        }
        markPotentiallyOrphaned(t, e) {
            return this.xs.add(e.toString()), zs.resolve();
        }
        removeTarget(t, e) {
            this.Cs.us(e.targetId).forEach((t => this.xs.add(t.toString())));
            const n = this.persistence.getTargetCache();
            return n.getMatchingKeysForTargetId(t, e.targetId).next((t => {
                t.forEach((t => this.xs.add(t.toString())));
            })).next((() => n.removeTargetData(t, e)));
        }
        Vs() {
            this.Ns = new Set;
        }
        Ss(t) {
            // Remove newly orphaned documents.
            const e = this.persistence.getRemoteDocumentCache().newChangeBuffer();
            return zs.forEach(this.xs, (n => {
                const s = Dt.fromPath(n);
                return this.$s(t, s).next((t => {
                    t || e.removeEntry(s);
                }));
            })).next((() => (this.Ns = null, e.apply(t))));
        }
        updateLimboDocument(t, e) {
            return this.$s(t, e).next((t => {
                t ? this.xs.delete(e.toString()) : this.xs.add(e.toString());
            }));
        }
        vs(t) {
            // For eager GC, we don't care about the document size, there are no size thresholds.
            return 0;
        }
        $s(t, e) {
            return zs.or([ () => zs.resolve(this.Cs.containsKey(e)), () => this.persistence.getTargetCache().containsKey(t, e), () => this.persistence.Ds(t, e) ]);
        }
    }

    /**
     * Metadata state of the local client. Unlike `RemoteClientState`, this class is
     * mutable and keeps track of all pending mutations, which allows us to
     * update the range of pending mutation batch IDs as new mutations are added or
     * removed.
     *
     * The data in `LocalClientState` is not read from WebStorage and instead
     * updated via its instance methods. The updated state can be serialized via
     * `toWebStorageJSON()`.
     */
    // Visible for testing.
    class Qr {
        constructor() {
            this.activeTargetIds = Nn();
        }
        Fs(t) {
            this.activeTargetIds = this.activeTargetIds.add(t);
        }
        Ls(t) {
            this.activeTargetIds = this.activeTargetIds.delete(t);
        }
        /**
         * Converts this entry into a JSON-encoded format we can use for WebStorage.
         * Does not encode `clientId` as it is part of the key in WebStorage.
         */    Ms() {
            const t = {
                activeTargetIds: this.activeTargetIds.toArray(),
                updateTimeMs: Date.now()
            };
            return JSON.stringify(t);
        }
    }

    class Gr {
        constructor() {
            this.pi = new Qr, this.Ti = {}, this.onlineStateHandler = null, this.sequenceNumberHandler = null;
        }
        addPendingMutation(t) {
            // No op.
        }
        updateMutationState(t, e, n) {
            // No op.
        }
        addLocalQueryTarget(t) {
            return this.pi.Fs(t), this.Ti[t] || "not-current";
        }
        updateQueryState(t, e, n) {
            this.Ti[t] = e;
        }
        removeLocalQueryTarget(t) {
            this.pi.Ls(t);
        }
        isLocalQueryTarget(t) {
            return this.pi.activeTargetIds.has(t);
        }
        clearQueryState(t) {
            delete this.Ti[t];
        }
        getAllActiveQueryTargets() {
            return this.pi.activeTargetIds;
        }
        isActiveQueryTarget(t) {
            return this.pi.activeTargetIds.has(t);
        }
        start() {
            return this.pi = new Qr, Promise.resolve();
        }
        handleUserChange(t, e, n) {
            // No op.
        }
        setOnlineState(t) {
            // No op.
        }
        shutdown() {}
        writeSequenceNumber(t) {}
        notifyBundleLoaded() {
            // No op.
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class zr {
        Ei(t) {
            // No-op.
        }
        shutdown() {
            // No-op.
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // References to `window` are guarded by BrowserConnectivityMonitor.isAvailable()
    /* eslint-disable no-restricted-globals */
    /**
     * Browser implementation of ConnectivityMonitor.
     */
    class Hr {
        constructor() {
            this.Ii = () => this.Ai(), this.Ri = () => this.bi(), this.Pi = [], this.vi();
        }
        Ei(t) {
            this.Pi.push(t);
        }
        shutdown() {
            window.removeEventListener("online", this.Ii), window.removeEventListener("offline", this.Ri);
        }
        vi() {
            window.addEventListener("online", this.Ii), window.addEventListener("offline", this.Ri);
        }
        Ai() {
            O("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
            for (const t of this.Pi) t(0 /* AVAILABLE */);
        }
        bi() {
            O("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
            for (const t of this.Pi) t(1 /* UNAVAILABLE */);
        }
        // TODO(chenbrian): Consider passing in window either into this component or
        // here for testing via FakeWindow.
        /** Checks that all used attributes of window are available. */
        static Pt() {
            return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const Jr = {
        BatchGetDocuments: "batchGet",
        Commit: "commit",
        RunQuery: "runQuery"
    };

    /**
     * Maps RPC names to the corresponding REST endpoint name.
     *
     * We use array notation to avoid mangling.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provides a simple helper class that implements the Stream interface to
     * bridge to other implementations that are streams but do not implement the
     * interface. The stream callbacks are invoked with the callOn... methods.
     */
    class Yr {
        constructor(t) {
            this.Vi = t.Vi, this.Si = t.Si;
        }
        Di(t) {
            this.Ci = t;
        }
        Ni(t) {
            this.ki = t;
        }
        onMessage(t) {
            this.xi = t;
        }
        close() {
            this.Si();
        }
        send(t) {
            this.Vi(t);
        }
        $i() {
            this.Ci();
        }
        Oi(t) {
            this.ki(t);
        }
        Mi(t) {
            this.xi(t);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class Xr extends 
    /**
     * Base class for all Rest-based connections to the backend (WebChannel and
     * HTTP).
     */
    class {
        constructor(t) {
            this.databaseInfo = t, this.databaseId = t.databaseId;
            const e = t.ssl ? "https" : "http";
            this.Fi = e + "://" + t.host, this.Li = "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database + "/documents";
        }
        Bi(t, e, n, s, i) {
            const r = this.Ui(t, e);
            O("RestConnection", "Sending: ", r, n);
            const o = {};
            return this.qi(o, s, i), this.Ki(t, r, o, n).then((t => (O("RestConnection", "Received: ", t), 
            t)), (e => {
                throw F("RestConnection", `${t} failed with error: `, e, "url: ", r, "request:", n), 
                e;
            }));
        }
        ji(t, e, n, s, i) {
            // The REST API automatically aggregates all of the streamed results, so we
            // can just use the normal invoke() method.
            return this.Bi(t, e, n, s, i);
        }
        /**
         * Modifies the headers for a request, adding any authorization token if
         * present and any additional headers for the request.
         */    qi(t, e, n) {
            t["X-Goog-Api-Client"] = "gl-js/ fire/" + N, 
            // Content-Type: text/plain will avoid preflight requests which might
            // mess with CORS and redirects by proxies. If we add custom headers
            // we will need to change this code to potentially use the $httpOverwrite
            // parameter supported by ESF to avoid triggering preflight requests.
            t["Content-Type"] = "text/plain", this.databaseInfo.appId && (t["X-Firebase-GMPID"] = this.databaseInfo.appId), 
            e && e.headers.forEach(((e, n) => t[n] = e)), n && n.headers.forEach(((e, n) => t[n] = e));
        }
        Ui(t, e) {
            const n = Jr[t];
            return `${this.Fi}/v1/${e}:${n}`;
        }
    } {
        constructor(t) {
            super(t), this.forceLongPolling = t.forceLongPolling, this.autoDetectLongPolling = t.autoDetectLongPolling, 
            this.useFetchStreams = t.useFetchStreams;
        }
        Ki(t, e, n, s) {
            return new Promise(((i, r) => {
                const o = new XhrIo;
                o.listenOnce(EventType.COMPLETE, (() => {
                    try {
                        switch (o.getLastErrorCode()) {
                          case ErrorCode.NO_ERROR:
                            const e = o.getResponseJson();
                            O("Connection", "XHR received:", JSON.stringify(e)), i(e);
                            break;

                          case ErrorCode.TIMEOUT:
                            O("Connection", 'RPC "' + t + '" timed out'), r(new Q(j.DEADLINE_EXCEEDED, "Request time out"));
                            break;

                          case ErrorCode.HTTP_ERROR:
                            const n = o.getStatus();
                            if (O("Connection", 'RPC "' + t + '" failed with status:', n, "response text:", o.getResponseText()), 
                            n > 0) {
                                const t = o.getResponseJson().error;
                                if (t && t.status && t.message) {
                                    const e = function(t) {
                                        const e = t.toLowerCase().replace(/_/g, "-");
                                        return Object.values(j).indexOf(e) >= 0 ? e : j.UNKNOWN;
                                    }(t.status);
                                    r(new Q(e, t.message));
                                } else r(new Q(j.UNKNOWN, "Server responded with status " + o.getStatus()));
                            } else 
                            // If we received an HTTP_ERROR but there's no status code,
                            // it's most probably a connection issue
                            r(new Q(j.UNAVAILABLE, "Connection failed."));
                            break;

                          default:
                            B();
                        }
                    } finally {
                        O("Connection", 'RPC "' + t + '" completed.');
                    }
                }));
                const c = JSON.stringify(s);
                o.send(e, "POST", c, n, 15);
            }));
        }
        Qi(t, e, n) {
            const s = [ this.Fi, "/", "google.firestore.v1.Firestore", "/", t, "/channel" ], i = createWebChannelTransport(), r = getStatEventTarget(), o = {
                // Required for backend stickiness, routing behavior is based on this
                // parameter.
                httpSessionIdParam: "gsessionid",
                initMessageHeaders: {},
                messageUrlParams: {
                    // This param is used to improve routing and project isolation by the
                    // backend and must be included in every request.
                    database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`
                },
                sendRawJson: !0,
                supportsCrossDomainXhr: !0,
                internalChannelParams: {
                    // Override the default timeout (randomized between 10-20 seconds) since
                    // a large write batch on a slow internet connection may take a long
                    // time to send to the backend. Rather than have WebChannel impose a
                    // tight timeout which could lead to infinite timeouts and retries, we
                    // set it very large (5-10 minutes) and rely on the browser's builtin
                    // timeouts to kick in if the request isn't working.
                    forwardChannelRequestTimeoutMs: 6e5
                },
                forceLongPolling: this.forceLongPolling,
                detectBufferingProxy: this.autoDetectLongPolling
            };
            this.useFetchStreams && (o.xmlHttpFactory = new FetchXmlHttpFactory({})), this.qi(o.initMessageHeaders, e, n), 
            // Sending the custom headers we just added to request.initMessageHeaders
            // (Authorization, etc.) will trigger the browser to make a CORS preflight
            // request because the XHR will no longer meet the criteria for a "simple"
            // CORS request:
            // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
            // Therefore to avoid the CORS preflight request (an extra network
            // roundtrip), we use the httpHeadersOverwriteParam option to specify that
            // the headers should instead be encoded into a special "$httpHeaders" query
            // parameter, which is recognized by the webchannel backend. This is
            // formally defined here:
            // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
            // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request
            // doesn't have an Origin header. So we have to exclude a few browser environments that are
            // known to (sometimes) not include an Origin. See
            // https://github.com/firebase/firebase-js-sdk/issues/1491.
            isMobileCordova() || isReactNative() || isElectron() || isIE() || isUWP() || isBrowserExtension() || (o.httpHeadersOverwriteParam = "$httpHeaders");
            const c = s.join("");
            O("Connection", "Creating WebChannel: " + c, o);
            const a = i.createWebChannel(c, o);
            // WebChannel supports sending the first message with the handshake - saving
            // a network round trip. However, it will have to call send in the same
            // JS event loop as open. In order to enforce this, we delay actually
            // opening the WebChannel until send is called. Whether we have called
            // open is tracked with this variable.
                    let u = !1, h = !1;
            // A flag to determine whether the stream was closed (by us or through an
            // error/close event) to avoid delivering multiple close events or sending
            // on a closed stream
                    const l = new Yr({
                Vi: t => {
                    h ? O("Connection", "Not sending because WebChannel is closed:", t) : (u || (O("Connection", "Opening WebChannel transport."), 
                    a.open(), u = !0), O("Connection", "WebChannel sending:", t), a.send(t));
                },
                Si: () => a.close()
            }), y = (t, e, n) => {
                // TODO(dimond): closure typing seems broken because WebChannel does
                // not implement goog.events.Listenable
                t.listen(e, (t => {
                    try {
                        n(t);
                    } catch (t) {
                        setTimeout((() => {
                            throw t;
                        }), 0);
                    }
                }));
            };
            // Closure events are guarded and exceptions are swallowed, so catch any
            // exception and rethrow using a setTimeout so they become visible again.
            // Note that eventually this function could go away if we are confident
            // enough the code is exception free.
                    return y(a, WebChannel.EventType.OPEN, (() => {
                h || O("Connection", "WebChannel transport opened.");
            })), y(a, WebChannel.EventType.CLOSE, (() => {
                h || (h = !0, O("Connection", "WebChannel transport closed"), l.Oi());
            })), y(a, WebChannel.EventType.ERROR, (t => {
                h || (h = !0, F("Connection", "WebChannel transport errored:", t), l.Oi(new Q(j.UNAVAILABLE, "The operation could not be completed")));
            })), y(a, WebChannel.EventType.MESSAGE, (t => {
                var e;
                if (!h) {
                    const n = t.data[0];
                    U(!!n);
                    // TODO(b/35143891): There is a bug in One Platform that caused errors
                    // (and only errors) to be wrapped in an extra array. To be forward
                    // compatible with the bug we need to check either condition. The latter
                    // can be removed once the fix has been rolled out.
                    // Use any because msgData.error is not typed.
                    const s = n, i = s.error || (null === (e = s[0]) || void 0 === e ? void 0 : e.error);
                    if (i) {
                        O("Connection", "WebChannel received error:", i);
                        // error.status will be a string like 'OK' or 'NOT_FOUND'.
                        const t = i.status;
                        let e = 
                        /**
     * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
     *
     * @returns The Code equivalent to the given status string or undefined if
     *     there is no match.
     */
                        function(t) {
                            // lookup by string
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            const e = wn[t];
                            if (void 0 !== e) return gn(e);
                        }(t), n = i.message;
                        void 0 === e && (e = j.INTERNAL, n = "Unknown error status: " + t + " with message " + i.message), 
                        // Mark closed so no further events are propagated
                        h = !0, l.Oi(new Q(e, n)), a.close();
                    } else O("Connection", "WebChannel received:", n), l.Mi(n);
                }
            })), y(r, Event$1.STAT_EVENT, (t => {
                t.stat === Stat.PROXY ? O("Connection", "Detected buffering proxy") : t.stat === Stat.NOPROXY && O("Connection", "Detected no buffering proxy");
            })), setTimeout((() => {
                // Technically we could/should wait for the WebChannel opened event,
                // but because we want to send the first message with the WebChannel
                // handshake we pretend the channel opened here (asynchronously), and
                // then delay the actual open until the first message is sent.
                l.$i();
            }), 0), l;
        }
    }

    /** The Platform's 'document' implementation or null if not available. */ function to() {
        // `document` is not always available, e.g. in ReactNative and WebWorkers.
        // eslint-disable-next-line no-restricted-globals
        return "undefined" != typeof document ? document : null;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function eo(t) {
        return new jn(t, /* useProto3Json= */ !0);
    }

    /**
     * An instance of the Platform's 'TextEncoder' implementation.
     */
    /**
     * A helper for running delayed tasks following an exponential backoff curve
     * between attempts.
     *
     * Each delay is made up of a "base" delay which follows the exponential
     * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
     * base delay. This prevents clients from accidentally synchronizing their
     * delays causing spikes of load to the backend.
     */
    class no {
        constructor(
        /**
         * The AsyncQueue to run backoff operations on.
         */
        t, 
        /**
         * The ID to use when scheduling backoff operations on the AsyncQueue.
         */
        e, 
        /**
         * The initial delay (used as the base delay on the first retry attempt).
         * Note that jitter will still be applied, so the actual delay could be as
         * little as 0.5*initialDelayMs.
         */
        n = 1e3
        /**
         * The multiplier to use to determine the extended base delay after each
         * attempt.
         */ , s = 1.5
        /**
         * The maximum base delay after which no further backoff is performed.
         * Note that jitter will still be applied, so the actual delay could be as
         * much as 1.5*maxDelayMs.
         */ , i = 6e4) {
            this.Me = t, this.timerId = e, this.Wi = n, this.Gi = s, this.zi = i, this.Hi = 0, 
            this.Ji = null, 
            /** The last backoff attempt, as epoch milliseconds. */
            this.Yi = Date.now(), this.reset();
        }
        /**
         * Resets the backoff delay.
         *
         * The very next backoffAndWait() will have no delay. If it is called again
         * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
         * subsequent ones will increase according to the backoffFactor.
         */    reset() {
            this.Hi = 0;
        }
        /**
         * Resets the backoff delay to the maximum delay (e.g. for use after a
         * RESOURCE_EXHAUSTED error).
         */    Xi() {
            this.Hi = this.zi;
        }
        /**
         * Returns a promise that resolves after currentDelayMs, and increases the
         * delay for any subsequent attempts. If there was a pending backoff operation
         * already, it will be canceled.
         */    Zi(t) {
            // Cancel any pending backoff operation.
            this.cancel();
            // First schedule using the current base (which may be 0 and should be
            // honored as such).
            const e = Math.floor(this.Hi + this.tr()), n = Math.max(0, Date.now() - this.Yi), s = Math.max(0, e - n);
            // Guard against lastAttemptTime being in the future due to a clock change.
                    s > 0 && O("ExponentialBackoff", `Backing off for ${s} ms (base delay: ${this.Hi} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`), 
            this.Ji = this.Me.enqueueAfterDelay(this.timerId, s, (() => (this.Yi = Date.now(), 
            t()))), 
            // Apply backoff factor to determine next delay and ensure it is within
            // bounds.
            this.Hi *= this.Gi, this.Hi < this.Wi && (this.Hi = this.Wi), this.Hi > this.zi && (this.Hi = this.zi);
        }
        er() {
            null !== this.Ji && (this.Ji.skipDelay(), this.Ji = null);
        }
        cancel() {
            null !== this.Ji && (this.Ji.cancel(), this.Ji = null);
        }
        /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */    tr() {
            return (Math.random() - .5) * this.Hi;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A PersistentStream is an abstract base class that represents a streaming RPC
     * to the Firestore backend. It's built on top of the connections own support
     * for streaming RPCs, and adds several critical features for our clients:
     *
     *   - Exponential backoff on failure
     *   - Authentication via CredentialsProvider
     *   - Dispatching all callbacks into the shared worker queue
     *   - Closing idle streams after 60 seconds of inactivity
     *
     * Subclasses of PersistentStream implement serialization of models to and
     * from the JSON representation of the protocol buffers for a specific
     * streaming RPC.
     *
     * ## Starting and Stopping
     *
     * Streaming RPCs are stateful and need to be start()ed before messages can
     * be sent and received. The PersistentStream will call the onOpen() function
     * of the listener once the stream is ready to accept requests.
     *
     * Should a start() fail, PersistentStream will call the registered onClose()
     * listener with a FirestoreError indicating what went wrong.
     *
     * A PersistentStream can be started and stopped repeatedly.
     *
     * Generic types:
     *  SendType: The type of the outgoing message of the underlying
     *    connection stream
     *  ReceiveType: The type of the incoming message of the underlying
     *    connection stream
     *  ListenerType: The type of the listener that will be used for callbacks
     */
    class so {
        constructor(t, e, n, s, i, r, o, c) {
            this.Me = t, this.nr = n, this.sr = s, this.ir = i, this.authCredentialsProvider = r, 
            this.appCheckCredentialsProvider = o, this.listener = c, this.state = 0 /* Initial */ , 
            /**
             * A close count that's incremented every time the stream is closed; used by
             * getCloseGuardedDispatcher() to invalidate callbacks that happen after
             * close.
             */
            this.rr = 0, this.cr = null, this.ar = null, this.stream = null, this.ur = new no(t, e);
        }
        /**
         * Returns true if start() has been called and no error has occurred. True
         * indicates the stream is open or in the process of opening (which
         * encompasses respecting backoff, getting auth tokens, and starting the
         * actual RPC). Use isOpen() to determine if the stream is open and ready for
         * outbound requests.
         */    hr() {
            return 1 /* Starting */ === this.state || 5 /* Backoff */ === this.state || this.lr();
        }
        /**
         * Returns true if the underlying RPC is open (the onOpen() listener has been
         * called) and the stream is ready for outbound requests.
         */    lr() {
            return 2 /* Open */ === this.state || 3 /* Healthy */ === this.state;
        }
        /**
         * Starts the RPC. Only allowed if isStarted() returns false. The stream is
         * not immediately ready for use: onOpen() will be invoked when the RPC is
         * ready for outbound requests, at which point isOpen() will return true.
         *
         * When start returns, isStarted() will return true.
         */    start() {
            4 /* Error */ !== this.state ? this.auth() : this.dr();
        }
        /**
         * Stops the RPC. This call is idempotent and allowed regardless of the
         * current isStarted() state.
         *
         * When stop returns, isStarted() and isOpen() will both return false.
         */    async stop() {
            this.hr() && await this.close(0 /* Initial */);
        }
        /**
         * After an error the stream will usually back off on the next attempt to
         * start it. If the error warrants an immediate restart of the stream, the
         * sender can use this to indicate that the receiver should not back off.
         *
         * Each error will call the onClose() listener. That function can decide to
         * inhibit backoff if required.
         */    wr() {
            this.state = 0 /* Initial */ , this.ur.reset();
        }
        /**
         * Marks this stream as idle. If no further actions are performed on the
         * stream for one minute, the stream will automatically close itself and
         * notify the stream's onClose() handler with Status.OK. The stream will then
         * be in a !isStarted() state, requiring the caller to start the stream again
         * before further use.
         *
         * Only streams that are in state 'Open' can be marked idle, as all other
         * states imply pending network operations.
         */    _r() {
            // Starts the idle time if we are in state 'Open' and are not yet already
            // running a timer (in which case the previous idle timeout still applies).
            this.lr() && null === this.cr && (this.cr = this.Me.enqueueAfterDelay(this.nr, 6e4, (() => this.mr())));
        }
        /** Sends a message to the underlying stream. */    gr(t) {
            this.yr(), this.stream.send(t);
        }
        /** Called by the idle timer when the stream should close due to inactivity. */    async mr() {
            if (this.lr()) 
            // When timing out an idle stream there's no reason to force the stream into backoff when
            // it restarts so set the stream state to Initial instead of Error.
            return this.close(0 /* Initial */);
        }
        /** Marks the stream as active again. */    yr() {
            this.cr && (this.cr.cancel(), this.cr = null);
        }
        /** Cancels the health check delayed operation. */    pr() {
            this.ar && (this.ar.cancel(), this.ar = null);
        }
        /**
         * Closes the stream and cleans up as necessary:
         *
         * * closes the underlying GRPC stream;
         * * calls the onClose handler with the given 'error';
         * * sets internal stream state to 'finalState';
         * * adjusts the backoff timer based on the error
         *
         * A new stream can be opened by calling start().
         *
         * @param finalState - the intended state of the stream after closing.
         * @param error - the error the connection was closed with.
         */    async close(t, e) {
            // Cancel any outstanding timers (they're guaranteed not to execute).
            this.yr(), this.pr(), this.ur.cancel(), 
            // Invalidates any stream-related callbacks (e.g. from auth or the
            // underlying stream), guaranteeing they won't execute.
            this.rr++, 4 /* Error */ !== t ? 
            // If this is an intentional close ensure we don't delay our next connection attempt.
            this.ur.reset() : e && e.code === j.RESOURCE_EXHAUSTED ? (
            // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
            M(e.toString()), M("Using maximum backoff delay to prevent overloading the backend."), 
            this.ur.Xi()) : e && e.code === j.UNAUTHENTICATED && 3 /* Healthy */ !== this.state && (
            // "unauthenticated" error means the token was rejected. This should rarely
            // happen since both Auth and AppCheck ensure a sufficient TTL when we
            // request a token. If a user manually resets their system clock this can
            // fail, however. In this case, we should get a Code.UNAUTHENTICATED error
            // before we received the first message and we need to invalidate the token
            // to ensure that we fetch a new token.
            this.authCredentialsProvider.invalidateToken(), this.appCheckCredentialsProvider.invalidateToken()), 
            // Clean up the underlying stream because we are no longer interested in events.
            null !== this.stream && (this.Tr(), this.stream.close(), this.stream = null), 
            // This state must be assigned before calling onClose() to allow the callback to
            // inhibit backoff or otherwise manipulate the state in its non-started state.
            this.state = t, 
            // Notify the listener that the stream closed.
            await this.listener.Ni(e);
        }
        /**
         * Can be overridden to perform additional cleanup before the stream is closed.
         * Calling super.tearDown() is not required.
         */    Tr() {}
        auth() {
            this.state = 1 /* Starting */;
            const t = this.Er(this.rr), e = this.rr;
            // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.
                    Promise.all([ this.authCredentialsProvider.getToken(), this.appCheckCredentialsProvider.getToken() ]).then((([t, n]) => {
                // Stream can be stopped while waiting for authentication.
                // TODO(mikelehen): We really should just use dispatchIfNotClosed
                // and let this dispatch onto the queue, but that opened a spec test can
                // of worms that I don't want to deal with in this PR.
                this.rr === e && 
                // Normally we'd have to schedule the callback on the AsyncQueue.
                // However, the following calls are safe to be called outside the
                // AsyncQueue since they don't chain asynchronous calls
                this.Ir(t, n);
            }), (e => {
                t((() => {
                    const t = new Q(j.UNKNOWN, "Fetching auth token failed: " + e.message);
                    return this.Ar(t);
                }));
            }));
        }
        Ir(t, e) {
            const n = this.Er(this.rr);
            this.stream = this.Rr(t, e), this.stream.Di((() => {
                n((() => (this.state = 2 /* Open */ , this.ar = this.Me.enqueueAfterDelay(this.sr, 1e4, (() => (this.lr() && (this.state = 3 /* Healthy */), 
                Promise.resolve()))), this.listener.Di())));
            })), this.stream.Ni((t => {
                n((() => this.Ar(t)));
            })), this.stream.onMessage((t => {
                n((() => this.onMessage(t)));
            }));
        }
        dr() {
            this.state = 5 /* Backoff */ , this.ur.Zi((async () => {
                this.state = 0 /* Initial */ , this.start();
            }));
        }
        // Visible for tests
        Ar(t) {
            // In theory the stream could close cleanly, however, in our current model
            // we never expect this to happen because if we stop a stream ourselves,
            // this callback will never be called. To prevent cases where we retry
            // without a backoff accidentally, we set the stream to error in all cases.
            return O("PersistentStream", `close with error: ${t}`), this.stream = null, this.close(4 /* Error */ , t);
        }
        /**
         * Returns a "dispatcher" function that dispatches operations onto the
         * AsyncQueue but only runs them if closeCount remains unchanged. This allows
         * us to turn auth / stream callbacks into no-ops if the stream is closed /
         * re-opened, etc.
         */    Er(t) {
            return e => {
                this.Me.enqueueAndForget((() => this.rr === t ? e() : (O("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), 
                Promise.resolve())));
            };
        }
    }

    /**
     * A PersistentStream that implements the Listen RPC.
     *
     * Once the Listen stream has called the onOpen() listener, any number of
     * listen() and unlisten() calls can be made to control what changes will be
     * sent from the server for ListenResponses.
     */ class io extends so {
        constructor(t, e, n, s, i, r) {
            super(t, "listen_stream_connection_backoff" /* ListenStreamConnectionBackoff */ , "listen_stream_idle" /* ListenStreamIdle */ , "health_check_timeout" /* HealthCheckTimeout */ , e, n, s, r), 
            this.k = i;
        }
        Rr(t, e) {
            return this.ir.Qi("Listen", t, e);
        }
        onMessage(t) {
            // A successful response means the stream is healthy
            this.ur.reset();
            const e = os(this.k, t), n = function(t) {
                // We have only reached a consistent snapshot for the entire stream if there
                // is a read_time set and it applies to all targets (i.e. the list of
                // targets is empty). The backend is guaranteed to send such responses.
                if (!("targetChange" in t)) return ut.min();
                const e = t.targetChange;
                return e.targetIds && e.targetIds.length ? ut.min() : e.readTime ? zn(e.readTime) : ut.min();
            }(t);
            return this.listener.br(e, n);
        }
        /**
         * Registers interest in the results of the given target. If the target
         * includes a resumeToken it will be included in the request. Results that
         * affect the target will be streamed back as WatchChange messages that
         * reference the targetId.
         */    Pr(t) {
            const e = {};
            e.database = es(this.k), e.addTarget = function(t, e) {
                let n;
                const s = e.target;
                return n = Zt(s) ? {
                    documents: hs(t, s)
                } : {
                    query: ls(t, s)
                }, n.targetId = e.targetId, e.resumeToken.approximateByteSize() > 0 ? n.resumeToken = Wn(t, e.resumeToken) : e.snapshotVersion.compareTo(ut.min()) > 0 && (
                // TODO(wuandy): Consider removing above check because it is most likely true.
                // Right now, many tests depend on this behaviour though (leaving min() out
                // of serialization).
                n.readTime = Qn(t, e.snapshotVersion.toTimestamp())), n;
            }(this.k, t);
            const n = ds(this.k, t);
            n && (e.labels = n), this.gr(e);
        }
        /**
         * Unregisters interest in the results of the target associated with the
         * given targetId.
         */    vr(t) {
            const e = {};
            e.database = es(this.k), e.removeTarget = t, this.gr(e);
        }
    }

    /**
     * A Stream that implements the Write RPC.
     *
     * The Write RPC requires the caller to maintain special streamToken
     * state in between calls, to help the server understand which responses the
     * client has processed by the time the next request is made. Every response
     * will contain a streamToken; this value must be passed to the next
     * request.
     *
     * After calling start() on this stream, the next request must be a handshake,
     * containing whatever streamToken is on hand. Once a response to this
     * request is received, all pending mutations may be submitted. When
     * submitting multiple batches of mutations at the same time, it's
     * okay to use the same streamToken for the calls to writeMutations.
     *
     * TODO(b/33271235): Use proto types
     */ class ro extends so {
        constructor(t, e, n, s, i, r) {
            super(t, "write_stream_connection_backoff" /* WriteStreamConnectionBackoff */ , "write_stream_idle" /* WriteStreamIdle */ , "health_check_timeout" /* HealthCheckTimeout */ , e, n, s, r), 
            this.k = i, this.Vr = !1;
        }
        /**
         * Tracks whether or not a handshake has been successfully exchanged and
         * the stream is ready to accept mutations.
         */    get Sr() {
            return this.Vr;
        }
        // Override of PersistentStream.start
        start() {
            this.Vr = !1, this.lastStreamToken = void 0, super.start();
        }
        Tr() {
            this.Vr && this.Dr([]);
        }
        Rr(t, e) {
            return this.ir.Qi("Write", t, e);
        }
        onMessage(t) {
            if (
            // Always capture the last stream token.
            U(!!t.streamToken), this.lastStreamToken = t.streamToken, this.Vr) {
                // A successful first write response means the stream is healthy,
                // Note, that we could consider a successful handshake healthy, however,
                // the write itself might be causing an error we want to back off from.
                this.ur.reset();
                const e = us(t.writeResults, t.commitTime), n = zn(t.commitTime);
                return this.listener.Cr(n, e);
            }
            // The first response is always the handshake response
            return U(!t.writeResults || 0 === t.writeResults.length), this.Vr = !0, this.listener.Nr();
        }
        /**
         * Sends an initial streamToken to the server, performing the handshake
         * required to make the StreamingWrite RPC work. Subsequent
         * calls should wait until onHandshakeComplete was called.
         */    kr() {
            // TODO(dimond): Support stream resumption. We intentionally do not set the
            // stream token on the handshake, ignoring any stream token we might have.
            const t = {};
            t.database = es(this.k), this.gr(t);
        }
        /** Sends a group of mutations to the Firestore backend to apply. */    Dr(t) {
            const e = {
                streamToken: this.lastStreamToken,
                writes: t.map((t => cs(this.k, t)))
            };
            this.gr(e);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Datastore and its related methods are a wrapper around the external Google
     * Cloud Datastore grpc API, which provides an interface that is more convenient
     * for the rest of the client SDK architecture to consume.
     */
    /**
     * An implementation of Datastore that exposes additional state for internal
     * consumption.
     */
    class oo extends class {} {
        constructor(t, e, n, s) {
            super(), this.authCredentials = t, this.appCheckCredentials = e, this.ir = n, this.k = s, 
            this.$r = !1;
        }
        Or() {
            if (this.$r) throw new Q(j.FAILED_PRECONDITION, "The client has already been terminated.");
        }
        /** Invokes the provided RPC with auth and AppCheck tokens. */    Bi(t, e, n) {
            return this.Or(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([s, i]) => this.ir.Bi(t, e, n, s, i))).catch((t => {
                throw "FirebaseError" === t.name ? (t.code === j.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), 
                this.appCheckCredentials.invalidateToken()), t) : new Q(j.UNKNOWN, t.toString());
            }));
        }
        /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */    ji(t, e, n) {
            return this.Or(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([s, i]) => this.ir.ji(t, e, n, s, i))).catch((t => {
                throw "FirebaseError" === t.name ? (t.code === j.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), 
                this.appCheckCredentials.invalidateToken()), t) : new Q(j.UNKNOWN, t.toString());
            }));
        }
        terminate() {
            this.$r = !0;
        }
    }

    // TODO(firestorexp): Make sure there is only one Datastore instance per
    // firestore-exp client.
    /**
     * A component used by the RemoteStore to track the OnlineState (that is,
     * whether or not the client as a whole should be considered to be online or
     * offline), implementing the appropriate heuristics.
     *
     * In particular, when the client is trying to connect to the backend, we
     * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for
     * a connection to succeed. If we have too many failures or the timeout elapses,
     * then we set the OnlineState to Offline, and the client will behave as if
     * it is offline (get()s will return cached data, etc.).
     */
    class co {
        constructor(t, e) {
            this.asyncQueue = t, this.onlineStateHandler = e, 
            /** The current OnlineState. */
            this.state = "Unknown" /* Unknown */ , 
            /**
             * A count of consecutive failures to open the stream. If it reaches the
             * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
             * Offline.
             */
            this.Mr = 0, 
            /**
             * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
             * transition from OnlineState.Unknown to OnlineState.Offline without waiting
             * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
             */
            this.Fr = null, 
            /**
             * Whether the client should log a warning message if it fails to connect to
             * the backend (initially true, cleared after a successful stream, or if we've
             * logged the message already).
             */
            this.Lr = !0;
        }
        /**
         * Called by RemoteStore when a watch stream is started (including on each
         * backoff attempt).
         *
         * If this is the first attempt, it sets the OnlineState to Unknown and starts
         * the onlineStateTimer.
         */    Br() {
            0 === this.Mr && (this.Ur("Unknown" /* Unknown */), this.Fr = this.asyncQueue.enqueueAfterDelay("online_state_timeout" /* OnlineStateTimeout */ , 1e4, (() => (this.Fr = null, 
            this.qr("Backend didn't respond within 10 seconds."), this.Ur("Offline" /* Offline */), 
            Promise.resolve()))));
        }
        /**
         * Updates our OnlineState as appropriate after the watch stream reports a
         * failure. The first failure moves us to the 'Unknown' state. We then may
         * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
         * actually transition to the 'Offline' state.
         */    Kr(t) {
            "Online" /* Online */ === this.state ? this.Ur("Unknown" /* Unknown */) : (this.Mr++, 
            this.Mr >= 1 && (this.jr(), this.qr(`Connection failed 1 times. Most recent error: ${t.toString()}`), 
            this.Ur("Offline" /* Offline */)));
        }
        /**
         * Explicitly sets the OnlineState to the specified state.
         *
         * Note that this resets our timers / failure counters, etc. used by our
         * Offline heuristics, so must not be used in place of
         * handleWatchStreamStart() and handleWatchStreamFailure().
         */    set(t) {
            this.jr(), this.Mr = 0, "Online" /* Online */ === t && (
            // We've connected to watch at least once. Don't warn the developer
            // about being offline going forward.
            this.Lr = !1), this.Ur(t);
        }
        Ur(t) {
            t !== this.state && (this.state = t, this.onlineStateHandler(t));
        }
        qr(t) {
            const e = `Could not reach Cloud Firestore backend. ${t}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;
            this.Lr ? (M(e), this.Lr = !1) : O("OnlineStateTracker", e);
        }
        jr() {
            null !== this.Fr && (this.Fr.cancel(), this.Fr = null);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class ao {
        constructor(
        /**
         * The local store, used to fill the write pipeline with outbound mutations.
         */
        t, 
        /** The client-side proxy for interacting with the backend. */
        e, n, s, i) {
            this.localStore = t, this.datastore = e, this.asyncQueue = n, this.remoteSyncer = {}, 
            /**
             * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
             * LocalStore via fillWritePipeline() and have or will send to the write
             * stream.
             *
             * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
             * restart the write stream. When the stream is established the writes in the
             * pipeline will be sent in order.
             *
             * Writes remain in writePipeline until they are acknowledged by the backend
             * and thus will automatically be re-sent if the stream is interrupted /
             * restarted before they're acknowledged.
             *
             * Write responses from the backend are linked to their originating request
             * purely based on order, and so we can just shift() writes from the front of
             * the writePipeline as we receive responses.
             */
            this.Qr = [], 
            /**
             * A mapping of watched targets that the client cares about tracking and the
             * user has explicitly called a 'listen' for this target.
             *
             * These targets may or may not have been sent to or acknowledged by the
             * server. On re-establishing the listen stream, these targets should be sent
             * to the server. The targets removed with unlistens are removed eagerly
             * without waiting for confirmation from the listen stream.
             */
            this.Wr = new Map, 
            /**
             * A set of reasons for why the RemoteStore may be offline. If empty, the
             * RemoteStore may start its network connections.
             */
            this.Gr = new Set, 
            /**
             * Event handlers that get called when the network is disabled or enabled.
             *
             * PORTING NOTE: These functions are used on the Web client to create the
             * underlying streams (to support tree-shakeable streams). On Android and iOS,
             * the streams are created during construction of RemoteStore.
             */
            this.zr = [], this.Hr = i, this.Hr.Ei((t => {
                n.enqueueAndForget((async () => {
                    // Porting Note: Unlike iOS, `restartNetwork()` is called even when the
                    // network becomes unreachable as we don't have any other way to tear
                    // down our streams.
                    yo(this) && (O("RemoteStore", "Restarting streams for network reachability change."), 
                    await async function(t) {
                        const e = K(t);
                        e.Gr.add(4 /* ConnectivityChange */), await ho(e), e.Jr.set("Unknown" /* Unknown */), 
                        e.Gr.delete(4 /* ConnectivityChange */), await uo(e);
                    }(this));
                }));
            })), this.Jr = new co(n, s);
        }
    }

    async function uo(t) {
        if (yo(t)) for (const e of t.zr) await e(/* enabled= */ !0);
    }

    /**
     * Temporarily disables the network. The network can be re-enabled using
     * enableNetwork().
     */ async function ho(t) {
        for (const e of t.zr) await e(/* enabled= */ !1);
    }

    /**
     * Starts new listen for the given target. Uses resume token if provided. It
     * is a no-op if the target of given `TargetData` is already being listened to.
     */
    function lo(t, e) {
        const n = K(t);
        n.Wr.has(e.targetId) || (
        // Mark this as something the client is currently listening for.
        n.Wr.set(e.targetId, e), go(n) ? 
        // The listen will be sent in onWatchStreamOpen
        mo(n) : Oo(n).lr() && wo(n, e));
    }

    /**
     * Removes the listen from server. It is a no-op if the given target id is
     * not being listened to.
     */ function fo(t, e) {
        const n = K(t), s = Oo(n);
        n.Wr.delete(e), s.lr() && _o(n, e), 0 === n.Wr.size && (s.lr() ? s._r() : yo(n) && 
        // Revert to OnlineState.Unknown if the watch stream is not open and we
        // have no listeners, since without any listens to send we cannot
        // confirm if the stream is healthy and upgrade to OnlineState.Online.
        n.Jr.set("Unknown" /* Unknown */));
    }

    /**
     * We need to increment the the expected number of pending responses we're due
     * from watch so we wait for the ack to process any messages from this target.
     */ function wo(t, e) {
        t.Yr.X(e.targetId), Oo(t).Pr(e);
    }

    /**
     * We need to increment the expected number of pending responses we're due
     * from watch so we wait for the removal on the server before we process any
     * messages from this target.
     */ function _o(t, e) {
        t.Yr.X(e), Oo(t).vr(e);
    }

    function mo(t) {
        t.Yr = new Ln({
            getRemoteKeysForTarget: e => t.remoteSyncer.getRemoteKeysForTarget(e),
            Et: e => t.Wr.get(e) || null
        }), Oo(t).start(), t.Jr.Br();
    }

    /**
     * Returns whether the watch stream should be started because it's necessary
     * and has not yet been started.
     */ function go(t) {
        return yo(t) && !Oo(t).hr() && t.Wr.size > 0;
    }

    function yo(t) {
        return 0 === K(t).Gr.size;
    }

    function po(t) {
        t.Yr = void 0;
    }

    async function To(t) {
        t.Wr.forEach(((e, n) => {
            wo(t, e);
        }));
    }

    async function Eo(t, e) {
        po(t), 
        // If we still need the watch stream, retry the connection.
        go(t) ? (t.Jr.Kr(e), mo(t)) : 
        // No need to restart watch stream because there are no active targets.
        // The online state is set to unknown because there is no active attempt
        // at establishing a connection
        t.Jr.set("Unknown" /* Unknown */);
    }

    async function Io(t, e, n) {
        if (
        // Mark the client as online since we got a message from the server
        t.Jr.set("Online" /* Online */), e instanceof Mn && 2 /* Removed */ === e.state && e.cause) 
        // There was an error on a target, don't wait for a consistent snapshot
        // to raise events
        try {
            await 
            /** Handles an error on a target */
            async function(t, e) {
                const n = e.cause;
                for (const s of e.targetIds) 
                // A watched target might have been removed already.
                t.Wr.has(s) && (await t.remoteSyncer.rejectListen(s, n), t.Wr.delete(s), t.Yr.removeTarget(s));
            }
            /**
     * Attempts to fill our write pipeline with writes from the LocalStore.
     *
     * Called internally to bootstrap or refill the write pipeline and by
     * SyncEngine whenever there are new mutations to process.
     *
     * Starts the write stream if necessary.
     */ (t, e);
        } catch (n) {
            O("RemoteStore", "Failed to remove targets %s: %s ", e.targetIds.join(","), n), 
            await Ao(t, n);
        } else if (e instanceof $n ? t.Yr.ot(e) : e instanceof On ? t.Yr.dt(e) : t.Yr.ut(e), 
        !n.isEqual(ut.min())) try {
            const e = await mr(t.localStore);
            n.compareTo(e) >= 0 && 
            // We have received a target change with a global snapshot if the snapshot
            // version is not equal to SnapshotVersion.min().
            await 
            /**
     * Takes a batch of changes from the Datastore, repackages them as a
     * RemoteEvent, and passes that on to the listener, which is typically the
     * SyncEngine.
     */
            function(t, e) {
                const n = t.Yr.gt(e);
                // Update in-memory resume tokens. LocalStore will update the
                // persistent view of these when applying the completed RemoteEvent.
                            return n.targetChanges.forEach(((n, s) => {
                    if (n.resumeToken.approximateByteSize() > 0) {
                        const i = t.Wr.get(s);
                        // A watched target might have been removed already.
                                            i && t.Wr.set(s, i.withResumeToken(n.resumeToken, e));
                    }
                })), 
                // Re-establish listens for the targets that have been invalidated by
                // existence filter mismatches.
                n.targetMismatches.forEach((e => {
                    const n = t.Wr.get(e);
                    if (!n) 
                    // A watched target might have been removed already.
                    return;
                    // Clear the resume token for the target, since we're in a known mismatch
                    // state.
                                    t.Wr.set(e, n.withResumeToken(pt.EMPTY_BYTE_STRING, n.snapshotVersion)), 
                    // Cause a hard reset by unwatching and rewatching immediately, but
                    // deliberately don't send a resume token so that we get a full update.
                    _o(t, e);
                    // Mark the target we send as being on behalf of an existence filter
                    // mismatch, but don't actually retain that in listenTargets. This ensures
                    // that we flag the first re-listen this way without impacting future
                    // listens of this target (that might happen e.g. on reconnect).
                    const s = new ai(n.target, e, 1 /* ExistenceFilterMismatch */ , n.sequenceNumber);
                    wo(t, s);
                })), t.remoteSyncer.applyRemoteEvent(n);
            }(t, n);
        } catch (e) {
            O("RemoteStore", "Failed to raise snapshot:", e), await Ao(t, e);
        }
    }

    /**
     * Recovery logic for IndexedDB errors that takes the network offline until
     * `op` succeeds. Retries are scheduled with backoff using
     * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is
     * validated via a generic operation.
     *
     * The returned Promise is resolved once the network is disabled and before
     * any retry attempt.
     */ async function Ao(t, e, n) {
        if (!Zs(e)) throw e;
        t.Gr.add(1 /* IndexedDbFailed */), 
        // Disable network and raise offline snapshots
        await ho(t), t.Jr.set("Offline" /* Offline */), n || (
        // Use a simple read operation to determine if IndexedDB recovered.
        // Ideally, we would expose a health check directly on SimpleDb, but
        // RemoteStore only has access to persistence through LocalStore.
        n = () => mr(t.localStore)), 
        // Probe IndexedDB periodically and re-enable network
        t.asyncQueue.enqueueRetryable((async () => {
            O("RemoteStore", "Retrying IndexedDB access"), await n(), t.Gr.delete(1 /* IndexedDbFailed */), 
            await uo(t);
        }));
    }

    /**
     * Executes `op`. If `op` fails, takes the network offline until `op`
     * succeeds. Returns after the first attempt.
     */ function Ro(t, e) {
        return e().catch((n => Ao(t, n, e)));
    }

    async function bo(t) {
        const e = K(t), n = Mo(e);
        let s = e.Qr.length > 0 ? e.Qr[e.Qr.length - 1].batchId : -1;
        for (;Po(e); ) try {
            const t = await pr(e.localStore, s);
            if (null === t) {
                0 === e.Qr.length && n._r();
                break;
            }
            s = t.batchId, vo(e, t);
        } catch (t) {
            await Ao(e, t);
        }
        Vo(e) && So(e);
    }

    /**
     * Returns true if we can add to the write pipeline (i.e. the network is
     * enabled and the write pipeline is not full).
     */ function Po(t) {
        return yo(t) && t.Qr.length < 10;
    }

    /**
     * Queues additional writes to be sent to the write stream, sending them
     * immediately if the write stream is established.
     */ function vo(t, e) {
        t.Qr.push(e);
        const n = Mo(t);
        n.lr() && n.Sr && n.Dr(e.mutations);
    }

    function Vo(t) {
        return yo(t) && !Mo(t).hr() && t.Qr.length > 0;
    }

    function So(t) {
        Mo(t).start();
    }

    async function Do(t) {
        Mo(t).kr();
    }

    async function Co(t) {
        const e = Mo(t);
        // Send the write pipeline now that the stream is established.
            for (const n of t.Qr) e.Dr(n.mutations);
    }

    async function No(t, e, n) {
        const s = t.Qr.shift(), i = ci.from(s, e, n);
        await Ro(t, (() => t.remoteSyncer.applySuccessfulWrite(i))), 
        // It's possible that with the completion of this mutation another
        // slot has freed up.
        await bo(t);
    }

    async function ko(t, e) {
        // If the write stream closed after the write handshake completes, a write
        // operation failed and we fail the pending operation.
        e && Mo(t).Sr && 
        // This error affects the actual write.
        await async function(t, e) {
            // Only handle permanent errors here. If it's transient, just let the retry
            // logic kick in.
            if (n = e.code, mn(n) && n !== j.ABORTED) {
                // This was a permanent error, the request itself was the problem
                // so it's not going to succeed if we resend it.
                const n = t.Qr.shift();
                // In this case it's also unlikely that the server itself is melting
                // down -- this was just a bad request so inhibit backoff on the next
                // restart.
                            Mo(t).wr(), await Ro(t, (() => t.remoteSyncer.rejectFailedWrite(n.batchId, e))), 
                // It's possible that with the completion of this mutation
                // another slot has freed up.
                await bo(t);
            }
            var n;
        }(t, e), 
        // The write stream might have been started by refilling the write
        // pipeline for failed writes
        Vo(t) && So(t);
    }

    async function xo(t, e) {
        const n = K(t);
        n.asyncQueue.verifyOperationInProgress(), O("RemoteStore", "RemoteStore received new credentials");
        const s = yo(n);
        // Tear down and re-create our network streams. This will ensure we get a
        // fresh auth token for the new user and re-fill the write pipeline with
        // new mutations from the LocalStore (since mutations are per-user).
            n.Gr.add(3 /* CredentialChange */), await ho(n), s && 
        // Don't set the network status to Unknown if we are offline.
        n.Jr.set("Unknown" /* Unknown */), await n.remoteSyncer.handleCredentialChange(e), 
        n.Gr.delete(3 /* CredentialChange */), await uo(n);
    }

    /**
     * Toggles the network state when the client gains or loses its primary lease.
     */ async function $o(t, e) {
        const n = K(t);
        e ? (n.Gr.delete(2 /* IsSecondary */), await uo(n)) : e || (n.Gr.add(2 /* IsSecondary */), 
        await ho(n), n.Jr.set("Unknown" /* Unknown */));
    }

    /**
     * If not yet initialized, registers the WatchStream and its network state
     * callback with `remoteStoreImpl`. Returns the existing stream if one is
     * already available.
     *
     * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.
     * This is not done on Web to allow it to be tree-shaken.
     */ function Oo(t) {
        return t.Xr || (
        // Create stream (but note that it is not started yet).
        t.Xr = function(t, e, n) {
            const s = K(t);
            return s.Or(), new io(e, s.ir, s.authCredentials, s.appCheckCredentials, s.k, n);
        }
        /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (t.datastore, t.asyncQueue, {
            Di: To.bind(null, t),
            Ni: Eo.bind(null, t),
            br: Io.bind(null, t)
        }), t.zr.push((async e => {
            e ? (t.Xr.wr(), go(t) ? mo(t) : t.Jr.set("Unknown" /* Unknown */)) : (await t.Xr.stop(), 
            po(t));
        }))), t.Xr;
    }

    /**
     * If not yet initialized, registers the WriteStream and its network state
     * callback with `remoteStoreImpl`. Returns the existing stream if one is
     * already available.
     *
     * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.
     * This is not done on Web to allow it to be tree-shaken.
     */ function Mo(t) {
        return t.Zr || (
        // Create stream (but note that it is not started yet).
        t.Zr = function(t, e, n) {
            const s = K(t);
            return s.Or(), new ro(e, s.ir, s.authCredentials, s.appCheckCredentials, s.k, n);
        }(t.datastore, t.asyncQueue, {
            Di: Do.bind(null, t),
            Ni: ko.bind(null, t),
            Nr: Co.bind(null, t),
            Cr: No.bind(null, t)
        }), t.zr.push((async e => {
            e ? (t.Zr.wr(), 
            // This will start the write stream if necessary.
            await bo(t)) : (await t.Zr.stop(), t.Qr.length > 0 && (O("RemoteStore", `Stopping write stream with ${t.Qr.length} pending writes`), 
            t.Qr = []));
        }))), t.Zr;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents an operation scheduled to be run in the future on an AsyncQueue.
     *
     * It is created via DelayedOperation.createAndSchedule().
     *
     * Supports cancellation (via cancel()) and early execution (via skipDelay()).
     *
     * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
     * in newer versions of TypeScript defines `finally`, which is not available in
     * IE.
     */
    class Fo {
        constructor(t, e, n, s, i) {
            this.asyncQueue = t, this.timerId = e, this.targetTimeMs = n, this.op = s, this.removalCallback = i, 
            this.deferred = new W, this.then = this.deferred.promise.then.bind(this.deferred.promise), 
            // It's normal for the deferred promise to be canceled (due to cancellation)
            // and so we attach a dummy catch callback to avoid
            // 'UnhandledPromiseRejectionWarning' log spam.
            this.deferred.promise.catch((t => {}));
        }
        /**
         * Creates and returns a DelayedOperation that has been scheduled to be
         * executed on the provided asyncQueue after the provided delayMs.
         *
         * @param asyncQueue - The queue to schedule the operation on.
         * @param id - A Timer ID identifying the type of operation this is.
         * @param delayMs - The delay (ms) before the operation should be scheduled.
         * @param op - The operation to run.
         * @param removalCallback - A callback to be called synchronously once the
         *   operation is executed or canceled, notifying the AsyncQueue to remove it
         *   from its delayedOperations list.
         *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
         *   the DelayedOperation class public.
         */    static createAndSchedule(t, e, n, s, i) {
            const r = Date.now() + n, o = new Fo(t, e, r, s, i);
            return o.start(n), o;
        }
        /**
         * Starts the timer. This is called immediately after construction by
         * createAndSchedule().
         */    start(t) {
            this.timerHandle = setTimeout((() => this.handleDelayElapsed()), t);
        }
        /**
         * Queues the operation to run immediately (if it hasn't already been run or
         * canceled).
         */    skipDelay() {
            return this.handleDelayElapsed();
        }
        /**
         * Cancels the operation if it hasn't already been executed or canceled. The
         * promise will be rejected.
         *
         * As long as the operation has not yet been run, calling cancel() provides a
         * guarantee that the operation will not be run.
         */    cancel(t) {
            null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new Q(j.CANCELLED, "Operation cancelled" + (t ? ": " + t : ""))));
        }
        handleDelayElapsed() {
            this.asyncQueue.enqueueAndForget((() => null !== this.timerHandle ? (this.clearTimeout(), 
            this.op().then((t => this.deferred.resolve(t)))) : Promise.resolve()));
        }
        clearTimeout() {
            null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), 
            this.timerHandle = null);
        }
    }

    /**
     * Returns a FirestoreError that can be surfaced to the user if the provided
     * error is an IndexedDbTransactionError. Re-throws the error otherwise.
     */ function Lo(t, e) {
        if (M("AsyncQueue", `${e}: ${t}`), Zs(t)) return new Q(j.UNAVAILABLE, `${e}: ${t}`);
        throw t;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * DocumentSet is an immutable (copy-on-write) collection that holds documents
     * in order specified by the provided comparator. We always add a document key
     * comparator on top of what is provided to guarantee document equality based on
     * the key.
     */ class Bo {
        /** The default ordering is by key if the comparator is omitted */
        constructor(t) {
            // We are adding document key comparator to the end as it's the only
            // guaranteed unique property of a document.
            this.comparator = t ? (e, n) => t(e, n) || Dt.comparator(e.key, n.key) : (t, e) => Dt.comparator(t.key, e.key), 
            this.keyedMap = Pn(), this.sortedSet = new yn(this.comparator);
        }
        /**
         * Returns an empty copy of the existing DocumentSet, using the same
         * comparator.
         */    static emptySet(t) {
            return new Bo(t.comparator);
        }
        has(t) {
            return null != this.keyedMap.get(t);
        }
        get(t) {
            return this.keyedMap.get(t);
        }
        first() {
            return this.sortedSet.minKey();
        }
        last() {
            return this.sortedSet.maxKey();
        }
        isEmpty() {
            return this.sortedSet.isEmpty();
        }
        /**
         * Returns the index of the provided key in the document set, or -1 if the
         * document key is not present in the set;
         */    indexOf(t) {
            const e = this.keyedMap.get(t);
            return e ? this.sortedSet.indexOf(e) : -1;
        }
        get size() {
            return this.sortedSet.size;
        }
        /** Iterates documents in order defined by "comparator" */    forEach(t) {
            this.sortedSet.inorderTraversal(((e, n) => (t(e), !1)));
        }
        /** Inserts or updates a document with the same key */    add(t) {
            // First remove the element if we have it.
            const e = this.delete(t.key);
            return e.copy(e.keyedMap.insert(t.key, t), e.sortedSet.insert(t, null));
        }
        /** Deletes a document with a given key */    delete(t) {
            const e = this.get(t);
            return e ? this.copy(this.keyedMap.remove(t), this.sortedSet.remove(e)) : this;
        }
        isEqual(t) {
            if (!(t instanceof Bo)) return !1;
            if (this.size !== t.size) return !1;
            const e = this.sortedSet.getIterator(), n = t.sortedSet.getIterator();
            for (;e.hasNext(); ) {
                const t = e.getNext().key, s = n.getNext().key;
                if (!t.isEqual(s)) return !1;
            }
            return !0;
        }
        toString() {
            const t = [];
            return this.forEach((e => {
                t.push(e.toString());
            })), 0 === t.length ? "DocumentSet ()" : "DocumentSet (\n  " + t.join("  \n") + "\n)";
        }
        copy(t, e) {
            const n = new Bo;
            return n.comparator = this.comparator, n.keyedMap = t, n.sortedSet = e, n;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
     * duplicate events for the same doc.
     */ class Uo {
        constructor() {
            this.eo = new yn(Dt.comparator);
        }
        track(t) {
            const e = t.doc.key, n = this.eo.get(e);
            n ? 
            // Merge the new change with the existing change.
            0 /* Added */ !== t.type && 3 /* Metadata */ === n.type ? this.eo = this.eo.insert(e, t) : 3 /* Metadata */ === t.type && 1 /* Removed */ !== n.type ? this.eo = this.eo.insert(e, {
                type: n.type,
                doc: t.doc
            }) : 2 /* Modified */ === t.type && 2 /* Modified */ === n.type ? this.eo = this.eo.insert(e, {
                type: 2 /* Modified */ ,
                doc: t.doc
            }) : 2 /* Modified */ === t.type && 0 /* Added */ === n.type ? this.eo = this.eo.insert(e, {
                type: 0 /* Added */ ,
                doc: t.doc
            }) : 1 /* Removed */ === t.type && 0 /* Added */ === n.type ? this.eo = this.eo.remove(e) : 1 /* Removed */ === t.type && 2 /* Modified */ === n.type ? this.eo = this.eo.insert(e, {
                type: 1 /* Removed */ ,
                doc: n.doc
            }) : 0 /* Added */ === t.type && 1 /* Removed */ === n.type ? this.eo = this.eo.insert(e, {
                type: 2 /* Modified */ ,
                doc: t.doc
            }) : 
            // This includes these cases, which don't make sense:
            // Added->Added
            // Removed->Removed
            // Modified->Added
            // Removed->Modified
            // Metadata->Added
            // Removed->Metadata
            B() : this.eo = this.eo.insert(e, t);
        }
        no() {
            const t = [];
            return this.eo.inorderTraversal(((e, n) => {
                t.push(n);
            })), t;
        }
    }

    class qo {
        constructor(t, e, n, s, i, r, o, c) {
            this.query = t, this.docs = e, this.oldDocs = n, this.docChanges = s, this.mutatedKeys = i, 
            this.fromCache = r, this.syncStateChanged = o, this.excludesMetadataChanges = c;
        }
        /** Returns a view snapshot as if all documents in the snapshot were added. */    static fromInitialDocuments(t, e, n, s) {
            const i = [];
            return e.forEach((t => {
                i.push({
                    type: 0 /* Added */ ,
                    doc: t
                });
            })), new qo(t, e, Bo.emptySet(e), i, n, s, 
            /* syncStateChanged= */ !0, 
            /* excludesMetadataChanges= */ !1);
        }
        get hasPendingWrites() {
            return !this.mutatedKeys.isEmpty();
        }
        isEqual(t) {
            if (!(this.fromCache === t.fromCache && this.syncStateChanged === t.syncStateChanged && this.mutatedKeys.isEqual(t.mutatedKeys) && ve(this.query, t.query) && this.docs.isEqual(t.docs) && this.oldDocs.isEqual(t.oldDocs))) return !1;
            const e = this.docChanges, n = t.docChanges;
            if (e.length !== n.length) return !1;
            for (let t = 0; t < e.length; t++) if (e[t].type !== n[t].type || !e[t].doc.isEqual(n[t].doc)) return !1;
            return !0;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Holds the listeners and the last received ViewSnapshot for a query being
     * tracked by EventManager.
     */ class Ko {
        constructor() {
            this.so = void 0, this.listeners = [];
        }
    }

    class jo {
        constructor() {
            this.queries = new zi((t => Ve(t)), ve), this.onlineState = "Unknown" /* Unknown */ , 
            this.io = new Set;
        }
    }

    async function Qo(t, e) {
        const n = K(t), s = e.query;
        let i = !1, r = n.queries.get(s);
        if (r || (i = !0, r = new Ko), i) try {
            r.so = await n.onListen(s);
        } catch (t) {
            const n = Lo(t, `Initialization of query '${Se(e.query)}' failed`);
            return void e.onError(n);
        }
        if (n.queries.set(s, r), r.listeners.push(e), 
        // Run global snapshot listeners if a consistent snapshot has been emitted.
        e.ro(n.onlineState), r.so) {
            e.oo(r.so) && Ho(n);
        }
    }

    async function Wo(t, e) {
        const n = K(t), s = e.query;
        let i = !1;
        const r = n.queries.get(s);
        if (r) {
            const t = r.listeners.indexOf(e);
            t >= 0 && (r.listeners.splice(t, 1), i = 0 === r.listeners.length);
        }
        if (i) return n.queries.delete(s), n.onUnlisten(s);
    }

    function Go(t, e) {
        const n = K(t);
        let s = !1;
        for (const t of e) {
            const e = t.query, i = n.queries.get(e);
            if (i) {
                for (const e of i.listeners) e.oo(t) && (s = !0);
                i.so = t;
            }
        }
        s && Ho(n);
    }

    function zo(t, e, n) {
        const s = K(t), i = s.queries.get(e);
        if (i) for (const t of i.listeners) t.onError(n);
        // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
        // after an error.
            s.queries.delete(e);
    }

    // Call all global snapshot listeners that have been set.
    function Ho(t) {
        t.io.forEach((t => {
            t.next();
        }));
    }

    /**
     * QueryListener takes a series of internal view snapshots and determines
     * when to raise the event.
     *
     * It uses an Observer to dispatch events.
     */ class Jo {
        constructor(t, e, n) {
            this.query = t, this.co = e, 
            /**
             * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
             * observer. This flag is set to true once we've actually raised an event.
             */
            this.ao = !1, this.uo = null, this.onlineState = "Unknown" /* Unknown */ , this.options = n || {};
        }
        /**
         * Applies the new ViewSnapshot to this listener, raising a user-facing event
         * if applicable (depending on what changed, whether the user has opted into
         * metadata-only changes, etc.). Returns true if a user-facing event was
         * indeed raised.
         */    oo(t) {
            if (!this.options.includeMetadataChanges) {
                // Remove the metadata only changes.
                const e = [];
                for (const n of t.docChanges) 3 /* Metadata */ !== n.type && e.push(n);
                t = new qo(t.query, t.docs, t.oldDocs, e, t.mutatedKeys, t.fromCache, t.syncStateChanged, 
                /* excludesMetadataChanges= */ !0);
            }
            let e = !1;
            return this.ao ? this.ho(t) && (this.co.next(t), e = !0) : this.lo(t, this.onlineState) && (this.fo(t), 
            e = !0), this.uo = t, e;
        }
        onError(t) {
            this.co.error(t);
        }
        /** Returns whether a snapshot was raised. */    ro(t) {
            this.onlineState = t;
            let e = !1;
            return this.uo && !this.ao && this.lo(this.uo, t) && (this.fo(this.uo), e = !0), 
            e;
        }
        lo(t, e) {
            // Always raise the first event when we're synced
            if (!t.fromCache) return !0;
            // NOTE: We consider OnlineState.Unknown as online (it should become Offline
            // or Online if we wait long enough).
                    const n = "Offline" /* Offline */ !== e;
            // Don't raise the event if we're online, aren't synced yet (checked
            // above) and are waiting for a sync.
                    return (!this.options.wo || !n) && (!t.docs.isEmpty() || "Offline" /* Offline */ === e);
            // Raise data from cache if we have any documents or we are offline
            }
        ho(t) {
            // We don't need to handle includeDocumentMetadataChanges here because
            // the Metadata only changes have already been stripped out if needed.
            // At this point the only changes we will see are the ones we should
            // propagate.
            if (t.docChanges.length > 0) return !0;
            const e = this.uo && this.uo.hasPendingWrites !== t.hasPendingWrites;
            return !(!t.syncStateChanged && !e) && !0 === this.options.includeMetadataChanges;
            // Generally we should have hit one of the cases above, but it's possible
            // to get here if there were only metadata docChanges and they got
            // stripped out.
            }
        fo(t) {
            t = qo.fromInitialDocuments(t.query, t.docs, t.mutatedKeys, t.fromCache), this.ao = !0, 
            this.co.next(t);
        }
    }

    /**
     * Returns a `LoadBundleTaskProgress` representing the progress that the loading
     * has succeeded.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ec {
        constructor(t) {
            this.key = t;
        }
    }

    class nc {
        constructor(t) {
            this.key = t;
        }
    }

    /**
     * View is responsible for computing the final merged truth of what docs are in
     * a query. It gets notified of local and remote changes to docs, and applies
     * the query filters and limits to determine the most correct possible results.
     */ class sc {
        constructor(t, 
        /** Documents included in the remote target */
        e) {
            this.query = t, this.To = e, this.Eo = null, 
            /**
             * A flag whether the view is current with the backend. A view is considered
             * current after it has seen the current flag from the backend and did not
             * lose consistency within the watch stream (e.g. because of an existence
             * filter mismatch).
             */
            this.current = !1, 
            /** Documents in the view but not in the remote target */
            this.Io = Dn(), 
            /** Document Keys that have local changes */
            this.mutatedKeys = Dn(), this.Ao = Ce(t), this.Ro = new Bo(this.Ao);
        }
        /**
         * The set of remote documents that the server has told us belongs to the target associated with
         * this view.
         */    get bo() {
            return this.To;
        }
        /**
         * Iterates over a set of doc changes, applies the query limit, and computes
         * what the new results should be, what the changes were, and whether we may
         * need to go back to the local cache for more results. Does not make any
         * changes to the view.
         * @param docChanges - The doc changes to apply to this view.
         * @param previousChanges - If this is being called with a refill, then start
         *        with this set of docs and changes instead of the current view.
         * @returns a new set of docs, changes, and refill flag.
         */    Po(t, e) {
            const n = e ? e.vo : new Uo, s = e ? e.Ro : this.Ro;
            let i = e ? e.mutatedKeys : this.mutatedKeys, r = s, o = !1;
            // Track the last doc in a (full) limit. This is necessary, because some
            // update (a delete, or an update moving a doc past the old limit) might
            // mean there is some other document in the local cache that either should
            // come (1) between the old last limit doc and the new last document, in the
            // case of updates, or (2) after the new last document, in the case of
            // deletes. So we keep this doc at the old limit to compare the updates to.
            // Note that this should never get used in a refill (when previousChanges is
            // set), because there will only be adds -- no deletes or updates.
            const c = pe(this.query) && s.size === this.query.limit ? s.last() : null, a = Te(this.query) && s.size === this.query.limit ? s.first() : null;
            // Drop documents out to meet limit/limitToLast requirement.
            if (t.inorderTraversal(((t, e) => {
                const u = s.get(t), h = De(this.query, e) ? e : null, l = !!u && this.mutatedKeys.has(u.key), f = !!h && (h.hasLocalMutations || 
                // We only consider committed mutations for documents that were
                // mutated during the lifetime of the view.
                this.mutatedKeys.has(h.key) && h.hasCommittedMutations);
                let d = !1;
                // Calculate change
                            if (u && h) {
                    u.data.isEqual(h.data) ? l !== f && (n.track({
                        type: 3 /* Metadata */ ,
                        doc: h
                    }), d = !0) : this.Vo(u, h) || (n.track({
                        type: 2 /* Modified */ ,
                        doc: h
                    }), d = !0, (c && this.Ao(h, c) > 0 || a && this.Ao(h, a) < 0) && (
                    // This doc moved from inside the limit to outside the limit.
                    // That means there may be some other doc in the local cache
                    // that should be included instead.
                    o = !0));
                } else !u && h ? (n.track({
                    type: 0 /* Added */ ,
                    doc: h
                }), d = !0) : u && !h && (n.track({
                    type: 1 /* Removed */ ,
                    doc: u
                }), d = !0, (c || a) && (
                // A doc was removed from a full limit query. We'll need to
                // requery from the local cache to see if we know about some other
                // doc that should be in the results.
                o = !0));
                d && (h ? (r = r.add(h), i = f ? i.add(t) : i.delete(t)) : (r = r.delete(t), i = i.delete(t)));
            })), pe(this.query) || Te(this.query)) for (;r.size > this.query.limit; ) {
                const t = pe(this.query) ? r.last() : r.first();
                r = r.delete(t.key), i = i.delete(t.key), n.track({
                    type: 1 /* Removed */ ,
                    doc: t
                });
            }
            return {
                Ro: r,
                vo: n,
                Bn: o,
                mutatedKeys: i
            };
        }
        Vo(t, e) {
            // We suppress the initial change event for documents that were modified as
            // part of a write acknowledgment (e.g. when the value of a server transform
            // is applied) as Watch will send us the same document again.
            // By suppressing the event, we only raise two user visible events (one with
            // `hasPendingWrites` and the final state of the document) instead of three
            // (one with `hasPendingWrites`, the modified document with
            // `hasPendingWrites` and the final state of the document).
            return t.hasLocalMutations && e.hasCommittedMutations && !e.hasLocalMutations;
        }
        /**
         * Updates the view with the given ViewDocumentChanges and optionally updates
         * limbo docs and sync state from the provided target change.
         * @param docChanges - The set of changes to make to the view's docs.
         * @param updateLimboDocuments - Whether to update limbo documents based on
         *        this change.
         * @param targetChange - A target change to apply for computing limbo docs and
         *        sync state.
         * @returns A new ViewChange with the given docs, changes, and sync state.
         */
        // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
        applyChanges(t, e, n) {
            const s = this.Ro;
            this.Ro = t.Ro, this.mutatedKeys = t.mutatedKeys;
            // Sort changes based on type and query comparator
            const i = t.vo.no();
            i.sort(((t, e) => function(t, e) {
                const n = t => {
                    switch (t) {
                      case 0 /* Added */ :
                        return 1;

                      case 2 /* Modified */ :
                      case 3 /* Metadata */ :
                        // A metadata change is converted to a modified change at the public
                        // api layer.  Since we sort by document key and then change type,
                        // metadata and modified changes must be sorted equivalently.
                        return 2;

                      case 1 /* Removed */ :
                        return 0;

                      default:
                        return B();
                    }
                };
                return n(t) - n(e);
            }
            /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (t.type, e.type) || this.Ao(t.doc, e.doc))), this.So(n);
            const r = e ? this.Do() : [], o = 0 === this.Io.size && this.current ? 1 /* Synced */ : 0 /* Local */ , c = o !== this.Eo;
            if (this.Eo = o, 0 !== i.length || c) {
                return {
                    snapshot: new qo(this.query, t.Ro, s, i, t.mutatedKeys, 0 /* Local */ === o, c, 
                    /* excludesMetadataChanges= */ !1),
                    Co: r
                };
            }
            // no changes
            return {
                Co: r
            };
        }
        /**
         * Applies an OnlineState change to the view, potentially generating a
         * ViewChange if the view's syncState changes as a result.
         */    ro(t) {
            return this.current && "Offline" /* Offline */ === t ? (
            // If we're offline, set `current` to false and then call applyChanges()
            // to refresh our syncState and generate a ViewChange as appropriate. We
            // are guaranteed to get a new TargetChange that sets `current` back to
            // true once the client is back online.
            this.current = !1, this.applyChanges({
                Ro: this.Ro,
                vo: new Uo,
                mutatedKeys: this.mutatedKeys,
                Bn: !1
            }, 
            /* updateLimboDocuments= */ !1)) : {
                Co: []
            };
        }
        /**
         * Returns whether the doc for the given key should be in limbo.
         */    No(t) {
            // If the remote end says it's part of this query, it's not in limbo.
            return !this.To.has(t) && (
            // The local store doesn't think it's a result, so it shouldn't be in limbo.
            !!this.Ro.has(t) && !this.Ro.get(t).hasLocalMutations);
        }
        /**
         * Updates syncedDocuments, current, and limbo docs based on the given change.
         * Returns the list of changes to which docs are in limbo.
         */    So(t) {
            t && (t.addedDocuments.forEach((t => this.To = this.To.add(t))), t.modifiedDocuments.forEach((t => {})), 
            t.removedDocuments.forEach((t => this.To = this.To.delete(t))), this.current = t.current);
        }
        Do() {
            // We can only determine limbo documents when we're in-sync with the server.
            if (!this.current) return [];
            // TODO(klimt): Do this incrementally so that it's not quadratic when
            // updating many documents.
                    const t = this.Io;
            this.Io = Dn(), this.Ro.forEach((t => {
                this.No(t.key) && (this.Io = this.Io.add(t.key));
            }));
            // Diff the new limbo docs with the old limbo docs.
            const e = [];
            return t.forEach((t => {
                this.Io.has(t) || e.push(new nc(t));
            })), this.Io.forEach((n => {
                t.has(n) || e.push(new ec(n));
            })), e;
        }
        /**
         * Update the in-memory state of the current view with the state read from
         * persistence.
         *
         * We update the query view whenever a client's primary status changes:
         * - When a client transitions from primary to secondary, it can miss
         *   LocalStorage updates and its query views may temporarily not be
         *   synchronized with the state on disk.
         * - For secondary to primary transitions, the client needs to update the list
         *   of `syncedDocuments` since secondary clients update their query views
         *   based purely on synthesized RemoteEvents.
         *
         * @param queryResult.documents - The documents that match the query according
         * to the LocalStore.
         * @param queryResult.remoteKeys - The keys of the documents that match the
         * query according to the backend.
         *
         * @returns The ViewChange that resulted from this synchronization.
         */
        // PORTING NOTE: Multi-tab only.
        ko(t) {
            this.To = t.zn, this.Io = Dn();
            const e = this.Po(t.documents);
            return this.applyChanges(e, /*updateLimboDocuments=*/ !0);
        }
        /**
         * Returns a view snapshot as if this query was just listened to. Contains
         * a document add for every existing document and the `fromCache` and
         * `hasPendingWrites` status of the already established view.
         */
        // PORTING NOTE: Multi-tab only.
        xo() {
            return qo.fromInitialDocuments(this.query, this.Ro, this.mutatedKeys, 0 /* Local */ === this.Eo);
        }
    }

    /**
     * QueryView contains all of the data that SyncEngine needs to keep track of for
     * a particular query.
     */
    class ic {
        constructor(
        /**
         * The query itself.
         */
        t, 
        /**
         * The target number created by the client that is used in the watch
         * stream to identify this query.
         */
        e, 
        /**
         * The view is responsible for computing the final merged truth of what
         * docs are in the query. It gets notified of local and remote changes,
         * and applies the query filters and limits to determine the most correct
         * possible results.
         */
        n) {
            this.query = t, this.targetId = e, this.view = n;
        }
    }

    /** Tracks a limbo resolution. */ class rc {
        constructor(t) {
            this.key = t, 
            /**
             * Set to true once we've received a document. This is used in
             * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
             * decide whether it needs to manufacture a delete event for the target once
             * the target is CURRENT.
             */
            this.$o = !1;
        }
    }

    /**
     * An implementation of `SyncEngine` coordinating with other parts of SDK.
     *
     * The parts of SyncEngine that act as a callback to RemoteStore need to be
     * registered individually. This is done in `syncEngineWrite()` and
     * `syncEngineListen()` (as well as `applyPrimaryState()`) as these methods
     * serve as entry points to RemoteStore's functionality.
     *
     * Note: some field defined in this class might have public access level, but
     * the class is not exported so they are only accessible from this module.
     * This is useful to implement optional features (like bundles) in free
     * functions, such that they are tree-shakeable.
     */ class oc {
        constructor(t, e, n, 
        // PORTING NOTE: Manages state synchronization in multi-tab environments.
        s, i, r) {
            this.localStore = t, this.remoteStore = e, this.eventManager = n, this.sharedClientState = s, 
            this.currentUser = i, this.maxConcurrentLimboResolutions = r, this.Oo = {}, this.Mo = new zi((t => Ve(t)), ve), 
            this.Fo = new Map, 
            /**
             * The keys of documents that are in limbo for which we haven't yet started a
             * limbo resolution query. The strings in this set are the result of calling
             * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
             *
             * The `Set` type was chosen because it provides efficient lookup and removal
             * of arbitrary elements and it also maintains insertion order, providing the
             * desired queue-like FIFO semantics.
             */
            this.Lo = new Set, 
            /**
             * Keeps track of the target ID for each document that is in limbo with an
             * active target.
             */
            this.Bo = new yn(Dt.comparator), 
            /**
             * Keeps track of the information about an active limbo resolution for each
             * active target ID that was started for the purpose of limbo resolution.
             */
            this.Uo = new Map, this.qo = new Sr, 
            /** Stores user completion handlers, indexed by User and BatchId. */
            this.Ko = {}, 
            /** Stores user callbacks waiting for all pending writes to be acknowledged. */
            this.jo = new Map, this.Qo = Oi.re(), this.onlineState = "Unknown" /* Unknown */ , 
            // The primary state is set to `true` or `false` immediately after Firestore
            // startup. In the interim, a client should only be considered primary if
            // `isPrimary` is true.
            this.Wo = void 0;
        }
        get isPrimaryClient() {
            return !0 === this.Wo;
        }
    }

    /**
     * Initiates the new listen, resolves promise when listen enqueued to the
     * server. All the subsequent view snapshots or errors are sent to the
     * subscribed handlers. Returns the initial snapshot.
     */
    async function cc(t, e) {
        const n = Oc(t);
        let s, i;
        const r = n.Mo.get(e);
        if (r) 
        // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
        // already exists when EventManager calls us for the first time. This
        // happens when the primary tab is already listening to this query on
        // behalf of another tab and the user of the primary also starts listening
        // to the query. EventManager will not have an assigned target ID in this
        // case and calls `listen` to obtain this ID.
        s = r.targetId, n.sharedClientState.addLocalQueryTarget(s), i = r.view.xo(); else {
            const t = await Tr(n.localStore, be(e)), r = n.sharedClientState.addLocalQueryTarget(t.targetId);
            s = t.targetId, i = await ac(n, e, s, "current" === r), n.isPrimaryClient && lo(n.remoteStore, t);
        }
        return i;
    }

    /**
     * Registers a view for a previously unknown query and computes its initial
     * snapshot.
     */ async function ac(t, e, n, s) {
        // PORTING NOTE: On Web only, we inject the code that registers new Limbo
        // targets based on view changes. This allows us to only depend on Limbo
        // changes when user code includes queries.
        t.Go = (e, n, s) => async function(t, e, n, s) {
            let i = e.view.Po(n);
            i.Bn && (
            // The query has a limit and some docs were removed, so we need
            // to re-run the query against the local store to make sure we
            // didn't lose any good docs that had been past the limit.
            i = await Ir(t.localStore, e.query, 
            /* usePreviousResults= */ !1).then((({documents: t}) => e.view.Po(t, i))));
            const r = s && s.targetChanges.get(e.targetId), o = e.view.applyChanges(i, 
            /* updateLimboDocuments= */ t.isPrimaryClient, r);
            return Ec(t, e.targetId, o.Co), o.snapshot;
        }(t, e, n, s);
        const i = await Ir(t.localStore, e, 
        /* usePreviousResults= */ !0), r = new sc(e, i.zn), o = r.Po(i.documents), c = xn.createSynthesizedTargetChangeForCurrentChange(n, s && "Offline" /* Offline */ !== t.onlineState), a = r.applyChanges(o, 
        /* updateLimboDocuments= */ t.isPrimaryClient, c);
        Ec(t, n, a.Co);
        const u = new ic(e, n, r);
        return t.Mo.set(e, u), t.Fo.has(n) ? t.Fo.get(n).push(e) : t.Fo.set(n, [ e ]), a.snapshot;
    }

    /** Stops listening to the query. */ async function uc(t, e) {
        const n = K(t), s = n.Mo.get(e), i = n.Fo.get(s.targetId);
        if (i.length > 1) return n.Fo.set(s.targetId, i.filter((t => !ve(t, e)))), void n.Mo.delete(e);
        // No other queries are mapped to the target, clean up the query and the target.
            if (n.isPrimaryClient) {
            // We need to remove the local query target first to allow us to verify
            // whether any other client is still interested in this target.
            n.sharedClientState.removeLocalQueryTarget(s.targetId);
            n.sharedClientState.isActiveQueryTarget(s.targetId) || await Er(n.localStore, s.targetId, 
            /*keepPersistedTargetData=*/ !1).then((() => {
                n.sharedClientState.clearQueryState(s.targetId), fo(n.remoteStore, s.targetId), 
                pc(n, s.targetId);
            })).catch(Ui);
        } else pc(n, s.targetId), await Er(n.localStore, s.targetId, 
        /*keepPersistedTargetData=*/ !0);
    }

    /**
     * Initiates the write of local mutation batch which involves adding the
     * writes to the mutation queue, notifying the remote store about new
     * mutations and raising events for any changes this write caused.
     *
     * The promise returned by this call is resolved when the above steps
     * have completed, *not* when the write was acked by the backend. The
     * userCallback is resolved once the write was acked/rejected by the
     * backend (or failed locally for any other reason).
     */ async function hc(t, e, n) {
        const s = Mc(t);
        try {
            const t = await function(t, e) {
                const n = K(t), s = at.now(), i = e.reduce(((t, e) => t.add(e.key)), Dn());
                let r;
                return n.persistence.runTransaction("Locally write mutations", "readwrite", (t => n.Wn.vn(t, i).next((i => {
                    r = i;
                    // For non-idempotent mutations (such as `FieldValue.increment()`),
                    // we record the base state in a separate patch mutation. This is
                    // later used to guarantee consistent values and prevents flicker
                    // even if the backend sends us an update that already includes our
                    // transform.
                    const o = [];
                    for (const t of e) {
                        const e = nn(t, r.get(t.key));
                        null != e && 
                        // NOTE: The base state should only be applied if there's some
                        // existing document to override, so use a Precondition of
                        // exists=true
                        o.push(new cn(t.key, e, Wt(e.value.mapValue), Ye.exists(!0)));
                    }
                    return n.An.addMutationBatch(t, s, o, e);
                })))).then((t => (t.applyToLocalDocumentSet(r), {
                    batchId: t.batchId,
                    changes: r
                })));
            }(s.localStore, e);
            s.sharedClientState.addPendingMutation(t.batchId), function(t, e, n) {
                let s = t.Ko[t.currentUser.toKey()];
                s || (s = new yn(rt));
                s = s.insert(e, n), t.Ko[t.currentUser.toKey()] = s;
            }
            /**
     * Resolves or rejects the user callback for the given batch and then discards
     * it.
     */ (s, t.batchId, n), await Rc(s, t.changes), await bo(s.remoteStore);
        } catch (t) {
            // If we can't persist the mutation, we reject the user callback and
            // don't send the mutation. The user can then retry the write.
            const e = Lo(t, "Failed to persist write");
            n.reject(e);
        }
    }

    /**
     * Applies one remote event to the sync engine, notifying any views of the
     * changes, and releasing any pending mutation batches that would become
     * visible because of the snapshot version the remote event contains.
     */ async function lc(t, e) {
        const n = K(t);
        try {
            const t = await gr(n.localStore, e);
            // Update `receivedDocument` as appropriate for any limbo targets.
                    e.targetChanges.forEach(((t, e) => {
                const s = n.Uo.get(e);
                s && (
                // Since this is a limbo resolution lookup, it's for a single document
                // and it could be added, modified, or removed, but not a combination.
                U(t.addedDocuments.size + t.modifiedDocuments.size + t.removedDocuments.size <= 1), 
                t.addedDocuments.size > 0 ? s.$o = !0 : t.modifiedDocuments.size > 0 ? U(s.$o) : t.removedDocuments.size > 0 && (U(s.$o), 
                s.$o = !1));
            })), await Rc(n, t, e);
        } catch (t) {
            await Ui(t);
        }
    }

    /**
     * Applies an OnlineState change to the sync engine and notifies any views of
     * the change.
     */ function fc(t, e, n) {
        const s = K(t);
        // If we are the secondary client, we explicitly ignore the remote store's
        // online state (the local client may go offline, even though the primary
        // tab remains online) and only apply the primary tab's online state from
        // SharedClientState.
            if (s.isPrimaryClient && 0 /* RemoteStore */ === n || !s.isPrimaryClient && 1 /* SharedClientState */ === n) {
            const t = [];
            s.Mo.forEach(((n, s) => {
                const i = s.view.ro(e);
                i.snapshot && t.push(i.snapshot);
            })), function(t, e) {
                const n = K(t);
                n.onlineState = e;
                let s = !1;
                n.queries.forEach(((t, n) => {
                    for (const t of n.listeners) 
                    // Run global snapshot listeners if a consistent snapshot has been emitted.
                    t.ro(e) && (s = !0);
                })), s && Ho(n);
            }(s.eventManager, e), t.length && s.Oo.br(t), s.onlineState = e, s.isPrimaryClient && s.sharedClientState.setOnlineState(e);
        }
    }

    /**
     * Rejects the listen for the given targetID. This can be triggered by the
     * backend for any active target.
     *
     * @param syncEngine - The sync engine implementation.
     * @param targetId - The targetID corresponds to one previously initiated by the
     * user as part of TargetData passed to listen() on RemoteStore.
     * @param err - A description of the condition that has forced the rejection.
     * Nearly always this will be an indication that the user is no longer
     * authorized to see the data matching the target.
     */ async function dc(t, e, n) {
        const s = K(t);
        // PORTING NOTE: Multi-tab only.
            s.sharedClientState.updateQueryState(e, "rejected", n);
        const i = s.Uo.get(e), r = i && i.key;
        if (r) {
            // TODO(klimt): We really only should do the following on permission
            // denied errors, but we don't have the cause code here.
            // It's a limbo doc. Create a synthetic event saying it was deleted.
            // This is kind of a hack. Ideally, we would have a method in the local
            // store to purge a document. However, it would be tricky to keep all of
            // the local store's invariants with another method.
            let t = new yn(Dt.comparator);
            t = t.insert(r, Gt.newNoDocument(r, ut.min()));
            const n = Dn().add(r), i = new kn(ut.min(), 
            /* targetChanges= */ new Map, 
            /* targetMismatches= */ new En(rt), t, n);
            await lc(s, i), 
            // Since this query failed, we won't want to manually unlisten to it.
            // We only remove it from bookkeeping after we successfully applied the
            // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
            // this query when the RemoteStore restarts the Watch stream, which should
            // re-trigger the target failure.
            s.Bo = s.Bo.remove(r), s.Uo.delete(e), Ac(s);
        } else await Er(s.localStore, e, 
        /* keepPersistedTargetData */ !1).then((() => pc(s, e, n))).catch(Ui);
    }

    async function wc(t, e) {
        const n = K(t), s = e.batch.batchId;
        try {
            const t = await _r(n.localStore, e);
            // The local store may or may not be able to apply the write result and
            // raise events immediately (depending on whether the watcher is caught
            // up), so we raise user callbacks first so that they consistently happen
            // before listen events.
                    yc(n, s, /*error=*/ null), gc(n, s), n.sharedClientState.updateMutationState(s, "acknowledged"), 
            await Rc(n, t);
        } catch (t) {
            await Ui(t);
        }
    }

    async function _c(t, e, n) {
        const s = K(t);
        try {
            const t = await function(t, e) {
                const n = K(t);
                return n.persistence.runTransaction("Reject batch", "readwrite-primary", (t => {
                    let s;
                    return n.An.lookupMutationBatch(t, e).next((e => (U(null !== e), s = e.keys(), n.An.removeMutationBatch(t, e)))).next((() => n.An.performConsistencyCheck(t))).next((() => n.Wn.vn(t, s)));
                }));
            }
            /**
     * Returns the largest (latest) batch id in mutation queue that is pending
     * server response.
     *
     * Returns `BATCHID_UNKNOWN` if the queue is empty.
     */ (s.localStore, e);
            // The local store may or may not be able to apply the write result and
            // raise events immediately (depending on whether the watcher is caught up),
            // so we raise user callbacks first so that they consistently happen before
            // listen events.
                    yc(s, e, n), gc(s, e), s.sharedClientState.updateMutationState(e, "rejected", n), 
            await Rc(s, t);
        } catch (n) {
            await Ui(n);
        }
    }

    /**
     * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
     * if there are any.
     */ function gc(t, e) {
        (t.jo.get(e) || []).forEach((t => {
            t.resolve();
        })), t.jo.delete(e);
    }

    /** Reject all outstanding callbacks waiting for pending writes to complete. */ function yc(t, e, n) {
        const s = K(t);
        let i = s.Ko[s.currentUser.toKey()];
        // NOTE: Mutations restored from persistence won't have callbacks, so it's
        // okay for there to be no callback for this ID.
            if (i) {
            const t = i.get(e);
            t && (n ? t.reject(n) : t.resolve(), i = i.remove(e)), s.Ko[s.currentUser.toKey()] = i;
        }
    }

    function pc(t, e, n = null) {
        t.sharedClientState.removeLocalQueryTarget(e);
        for (const s of t.Fo.get(e)) t.Mo.delete(s), n && t.Oo.zo(s, n);
        if (t.Fo.delete(e), t.isPrimaryClient) {
            t.qo.us(e).forEach((e => {
                t.qo.containsKey(e) || 
                // We removed the last reference for this key
                Tc(t, e);
            }));
        }
    }

    function Tc(t, e) {
        t.Lo.delete(e.path.canonicalString());
        // It's possible that the target already got removed because the query failed. In that case,
        // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
        const n = t.Bo.get(e);
        null !== n && (fo(t.remoteStore, n), t.Bo = t.Bo.remove(e), t.Uo.delete(n), Ac(t));
    }

    function Ec(t, e, n) {
        for (const s of n) if (s instanceof ec) t.qo.addReference(s.key, e), Ic(t, s); else if (s instanceof nc) {
            O("SyncEngine", "Document no longer in limbo: " + s.key), t.qo.removeReference(s.key, e);
            t.qo.containsKey(s.key) || 
            // We removed the last reference for this key
            Tc(t, s.key);
        } else B();
    }

    function Ic(t, e) {
        const n = e.key, s = n.path.canonicalString();
        t.Bo.get(n) || t.Lo.has(s) || (O("SyncEngine", "New document in limbo: " + n), t.Lo.add(s), 
        Ac(t));
    }

    /**
     * Starts listens for documents in limbo that are enqueued for resolution,
     * subject to a maximum number of concurrent resolutions.
     *
     * Without bounding the number of concurrent resolutions, the server can fail
     * with "resource exhausted" errors which can lead to pathological client
     * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
     */ function Ac(t) {
        for (;t.Lo.size > 0 && t.Bo.size < t.maxConcurrentLimboResolutions; ) {
            const e = t.Lo.values().next().value;
            t.Lo.delete(e);
            const n = new Dt(wt.fromString(e)), s = t.Qo.next();
            t.Uo.set(s, new rc(n)), t.Bo = t.Bo.insert(n, s), lo(t.remoteStore, new ai(be(ye(n.path)), s, 2 /* LimboResolution */ , nt.I));
        }
    }

    async function Rc(t, e, n) {
        const s = K(t), i = [], r = [], o = [];
        s.Mo.isEmpty() || (s.Mo.forEach(((t, c) => {
            o.push(s.Go(c, e, n).then((t => {
                if (t) {
                    s.isPrimaryClient && s.sharedClientState.updateQueryState(c.targetId, t.fromCache ? "not-current" : "current"), 
                    i.push(t);
                    const e = hr.$n(c.targetId, t);
                    r.push(e);
                }
            })));
        })), await Promise.all(o), s.Oo.br(i), await async function(t, e) {
            const n = K(t);
            try {
                await n.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (t => zs.forEach(e, (e => zs.forEach(e.kn, (s => n.persistence.referenceDelegate.addReference(t, e.targetId, s))).next((() => zs.forEach(e.xn, (s => n.persistence.referenceDelegate.removeReference(t, e.targetId, s)))))))));
            } catch (t) {
                if (!Zs(t)) throw t;
                // If `notifyLocalViewChanges` fails, we did not advance the sequence
                // number for the documents that were included in this transaction.
                // This might trigger them to be deleted earlier than they otherwise
                // would have, but it should not invalidate the integrity of the data.
                O("LocalStore", "Failed to update sequence numbers: " + t);
            }
            for (const t of e) {
                const e = t.targetId;
                if (!t.fromCache) {
                    const t = n.qn.get(e), s = t.snapshotVersion, i = t.withLastLimboFreeSnapshotVersion(s);
                    // Advance the last limbo free snapshot version
                                    n.qn = n.qn.insert(e, i);
                }
            }
        }(s.localStore, r));
    }

    async function bc(t, e) {
        const n = K(t);
        if (!n.currentUser.isEqual(e)) {
            O("SyncEngine", "User change. New user:", e.toKey());
            const t = await wr(n.localStore, e);
            n.currentUser = e, 
            // Fails tasks waiting for pending writes requested by previous user.
            function(t, e) {
                t.jo.forEach((t => {
                    t.forEach((t => {
                        t.reject(new Q(j.CANCELLED, e));
                    }));
                })), t.jo.clear();
            }(n, "'waitForPendingWrites' promise is rejected due to a user change."), 
            // TODO(b/114226417): Consider calling this only in the primary tab.
            n.sharedClientState.handleUserChange(e, t.removedBatchIds, t.addedBatchIds), await Rc(n, t.Gn);
        }
    }

    function Pc(t, e) {
        const n = K(t), s = n.Uo.get(e);
        if (s && s.$o) return Dn().add(s.key);
        {
            let t = Dn();
            const s = n.Fo.get(e);
            if (!s) return t;
            for (const e of s) {
                const s = n.Mo.get(e);
                t = t.unionWith(s.view.bo);
            }
            return t;
        }
    }

    function Oc(t) {
        const e = K(t);
        return e.remoteStore.remoteSyncer.applyRemoteEvent = lc.bind(null, e), e.remoteStore.remoteSyncer.getRemoteKeysForTarget = Pc.bind(null, e), 
        e.remoteStore.remoteSyncer.rejectListen = dc.bind(null, e), e.Oo.br = Go.bind(null, e.eventManager), 
        e.Oo.zo = zo.bind(null, e.eventManager), e;
    }

    function Mc(t) {
        const e = K(t);
        return e.remoteStore.remoteSyncer.applySuccessfulWrite = wc.bind(null, e), e.remoteStore.remoteSyncer.rejectFailedWrite = _c.bind(null, e), 
        e;
    }

    class Lc {
        constructor() {
            this.synchronizeTabs = !1;
        }
        async initialize(t) {
            this.k = eo(t.databaseInfo.databaseId), this.sharedClientState = this.Jo(t), this.persistence = this.Yo(t), 
            await this.persistence.start(), this.gcScheduler = this.Xo(t), this.localStore = this.Zo(t);
        }
        Xo(t) {
            return null;
        }
        Zo(t) {
            return dr(this.persistence, new lr, t.initialUser, this.k);
        }
        Yo(t) {
            return new $r(Mr.ks, this.k);
        }
        Jo(t) {
            return new Gr;
        }
        async terminate() {
            this.gcScheduler && this.gcScheduler.stop(), await this.sharedClientState.shutdown(), 
            await this.persistence.shutdown();
        }
    }

    /**
     * Initializes and wires the components that are needed to interface with the
     * network.
     */ class qc {
        async initialize(t, e) {
            this.localStore || (this.localStore = t.localStore, this.sharedClientState = t.sharedClientState, 
            this.datastore = this.createDatastore(e), this.remoteStore = this.createRemoteStore(e), 
            this.eventManager = this.createEventManager(e), this.syncEngine = this.createSyncEngine(e, 
            /* startAsPrimary=*/ !t.synchronizeTabs), this.sharedClientState.onlineStateHandler = t => fc(this.syncEngine, t, 1 /* SharedClientState */), 
            this.remoteStore.remoteSyncer.handleCredentialChange = bc.bind(null, this.syncEngine), 
            await $o(this.remoteStore, this.syncEngine.isPrimaryClient));
        }
        createEventManager(t) {
            return new jo;
        }
        createDatastore(t) {
            const e = eo(t.databaseInfo.databaseId), n = (s = t.databaseInfo, new Xr(s));
            var s;
            /** Return the Platform-specific connectivity monitor. */        return function(t, e, n, s) {
                return new oo(t, e, n, s);
            }(t.authCredentials, t.appCheckCredentials, n, e);
        }
        createRemoteStore(t) {
            return e = this.localStore, n = this.datastore, s = t.asyncQueue, i = t => fc(this.syncEngine, t, 0 /* RemoteStore */), 
            r = Hr.Pt() ? new Hr : new zr, new ao(e, n, s, i, r);
            var e, n, s, i, r;
            /** Re-enables the network. Idempotent. */    }
        createSyncEngine(t, e) {
            return function(t, e, n, 
            // PORTING NOTE: Manages state synchronization in multi-tab environments.
            s, i, r, o) {
                const c = new oc(t, e, n, s, i, r);
                return o && (c.Wo = !0), c;
            }(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, t.initialUser, t.maxConcurrentLimboResolutions, e);
        }
        terminate() {
            return async function(t) {
                const e = K(t);
                O("RemoteStore", "RemoteStore shutting down."), e.Gr.add(5 /* Shutdown */), await ho(e), 
                e.Hr.shutdown(), 
                // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
                // triggering spurious listener events with cached data, etc.
                e.Jr.set("Unknown" /* Unknown */);
            }(this.remoteStore);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * On web, a `ReadableStream` is wrapped around by a `ByteStreamReader`.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /*
     * A wrapper implementation of Observer<T> that will dispatch events
     * asynchronously. To allow immediate silencing, a mute call is added which
     * causes events scheduled to no longer be raised.
     */
    class jc {
        constructor(t) {
            this.observer = t, 
            /**
             * When set to true, will not raise future events. Necessary to deal with
             * async detachment of listener.
             */
            this.muted = !1;
        }
        next(t) {
            this.observer.next && this.ec(this.observer.next, t);
        }
        error(t) {
            this.observer.error ? this.ec(this.observer.error, t) : console.error("Uncaught Error in snapshot listener:", t);
        }
        nc() {
            this.muted = !0;
        }
        ec(t, e) {
            this.muted || setTimeout((() => {
                this.muted || t(e);
            }), 0);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * FirestoreClient is a top-level class that constructs and owns all of the
     * pieces of the client SDK architecture. It is responsible for creating the
     * async queue that is shared by all of the other components in the system.
     */
    class zc {
        constructor(t, e, 
        /**
         * Asynchronous queue responsible for all of our internal processing. When
         * we get incoming work from the user (via public API) or the network
         * (incoming GRPC messages), we should always schedule onto this queue.
         * This ensures all of our work is properly serialized (e.g. we don't
         * start processing a new operation while the previous one is waiting for
         * an async I/O to complete).
         */
        n, s) {
            this.authCredentials = t, this.appCheckCredentials = e, this.asyncQueue = n, this.databaseInfo = s, 
            this.user = C.UNAUTHENTICATED, this.clientId = it.A(), this.authCredentialListener = () => Promise.resolve(), 
            this.appCheckCredentialListener = () => Promise.resolve(), this.authCredentials.start(n, (async t => {
                O("FirestoreClient", "Received user=", t.uid), await this.authCredentialListener(t), 
                this.user = t;
            })), this.appCheckCredentials.start(n, (t => (O("FirestoreClient", "Received new app check token=", t), 
            this.appCheckCredentialListener(t, this.user))));
        }
        async getConfiguration() {
            return {
                asyncQueue: this.asyncQueue,
                databaseInfo: this.databaseInfo,
                clientId: this.clientId,
                authCredentials: this.authCredentials,
                appCheckCredentials: this.appCheckCredentials,
                initialUser: this.user,
                maxConcurrentLimboResolutions: 100
            };
        }
        setCredentialChangeListener(t) {
            this.authCredentialListener = t;
        }
        setAppCheckTokenChangeListener(t) {
            this.appCheckCredentialListener = t;
        }
        /**
         * Checks that the client has not been terminated. Ensures that other methods on
         * this class cannot be called after the client is terminated.
         */    verifyNotTerminated() {
            if (this.asyncQueue.isShuttingDown) throw new Q(j.FAILED_PRECONDITION, "The client has already been terminated.");
        }
        terminate() {
            this.asyncQueue.enterRestrictedMode();
            const t = new W;
            return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((async () => {
                try {
                    this.onlineComponents && await this.onlineComponents.terminate(), this.offlineComponents && await this.offlineComponents.terminate(), 
                    // The credentials provider must be terminated after shutting down the
                    // RemoteStore as it will prevent the RemoteStore from retrieving auth
                    // tokens.
                    this.authCredentials.shutdown(), this.appCheckCredentials.shutdown(), t.resolve();
                } catch (e) {
                    const n = Lo(e, "Failed to shutdown persistence");
                    t.reject(n);
                }
            })), t.promise;
        }
    }

    async function Hc(t, e) {
        t.asyncQueue.verifyOperationInProgress(), O("FirestoreClient", "Initializing OfflineComponentProvider");
        const n = await t.getConfiguration();
        await e.initialize(n);
        let s = n.initialUser;
        t.setCredentialChangeListener((async t => {
            s.isEqual(t) || (await wr(e.localStore, t), s = t);
        })), 
        // When a user calls clearPersistence() in one client, all other clients
        // need to be terminated to allow the delete to succeed.
        e.persistence.setDatabaseDeletedListener((() => t.terminate())), t.offlineComponents = e;
    }

    async function Jc(t, e) {
        t.asyncQueue.verifyOperationInProgress();
        const n = await Yc(t);
        O("FirestoreClient", "Initializing OnlineComponentProvider");
        const s = await t.getConfiguration();
        await e.initialize(n, s), 
        // The CredentialChangeListener of the online component provider takes
        // precedence over the offline component provider.
        t.setCredentialChangeListener((t => xo(e.remoteStore, t))), t.setAppCheckTokenChangeListener(((t, n) => xo(e.remoteStore, n))), 
        t.onlineComponents = e;
    }

    async function Yc(t) {
        return t.offlineComponents || (O("FirestoreClient", "Using default OfflineComponentProvider"), 
        await Hc(t, new Lc)), t.offlineComponents;
    }

    async function Xc(t) {
        return t.onlineComponents || (O("FirestoreClient", "Using default OnlineComponentProvider"), 
        await Jc(t, new qc)), t.onlineComponents;
    }

    function na(t) {
        return Xc(t).then((t => t.syncEngine));
    }

    async function sa(t) {
        const e = await Xc(t), n = e.eventManager;
        return n.onListen = cc.bind(null, e.syncEngine), n.onUnlisten = uc.bind(null, e.syncEngine), 
        n;
    }

    function ua(t, e, n = {}) {
        const s = new W;
        return t.asyncQueue.enqueueAndForget((async () => function(t, e, n, s, i) {
            const r = new jc({
                next: n => {
                    // Remove query first before passing event to user to avoid
                    // user actions affecting the now stale query.
                    e.enqueueAndForget((() => Wo(t, o))), n.fromCache && "server" === s.source ? i.reject(new Q(j.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i.resolve(n);
                },
                error: t => i.reject(t)
            }), o = new Jo(n, r, {
                includeMetadataChanges: !0,
                wo: !0
            });
            return Qo(t, o);
        }(await sa(t), t.asyncQueue, e, n, s))), s.promise;
    }

    class wa {
        /**
         * Constructs a DatabaseInfo using the provided host, databaseId and
         * persistenceKey.
         *
         * @param databaseId - The database to use.
         * @param appId - The Firebase App Id.
         * @param persistenceKey - A unique identifier for this Firestore's local
         * storage (used in conjunction with the databaseId).
         * @param host - The Firestore backend host to connect to.
         * @param ssl - Whether to use SSL when connecting.
         * @param forceLongPolling - Whether to use the forceLongPolling option
         * when using WebChannel as the network transport.
         * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
         * option when using WebChannel as the network transport.
         * @param useFetchStreams Whether to use the Fetch API instead of
         * XMLHTTPRequest
         */
        constructor(t, e, n, s, i, r, o, c) {
            this.databaseId = t, this.appId = e, this.persistenceKey = n, this.host = s, this.ssl = i, 
            this.forceLongPolling = r, this.autoDetectLongPolling = o, this.useFetchStreams = c;
        }
    }

    /** The default database name for a project. */
    /**
     * Represents the database ID a Firestore client is associated with.
     * @internal
     */
    class _a {
        constructor(t, e) {
            this.projectId = t, this.database = e || "(default)";
        }
        get isDefaultDatabase() {
            return "(default)" === this.database;
        }
        isEqual(t) {
            return t instanceof _a && t.projectId === this.projectId && t.database === this.database;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const ma = new Map;

    /**
     * An instance map that ensures only one Datastore exists per Firestore
     * instance.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function ga(t, e, n) {
        if (!n) throw new Q(j.INVALID_ARGUMENT, `Function ${t}() cannot be called with an empty ${e}.`);
    }

    /**
     * Validates that two boolean options are not set at the same time.
     * @internal
     */ function ya(t, e, n, s) {
        if (!0 === e && !0 === s) throw new Q(j.INVALID_ARGUMENT, `${t} and ${n} cannot be used together.`);
    }

    /**
     * Validates that `path` refers to a document (indicated by the fact it contains
     * an even numbers of segments).
     */ function pa(t) {
        if (!Dt.isDocumentKey(t)) throw new Q(j.INVALID_ARGUMENT, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);
    }

    /**
     * Validates that `path` refers to a collection (indicated by the fact it
     * contains an odd numbers of segments).
     */ function Ta(t) {
        if (Dt.isDocumentKey(t)) throw new Q(j.INVALID_ARGUMENT, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);
    }

    /**
     * Returns true if it's a non-null object without a custom prototype
     * (i.e. excludes Array, Date, etc.).
     */
    /** Returns a string describing the type / value of the provided input. */
    function Ea(t) {
        if (void 0 === t) return "undefined";
        if (null === t) return "null";
        if ("string" == typeof t) return t.length > 20 && (t = `${t.substring(0, 20)}...`), 
        JSON.stringify(t);
        if ("number" == typeof t || "boolean" == typeof t) return "" + t;
        if ("object" == typeof t) {
            if (t instanceof Array) return "an array";
            {
                const e = 
                /** try to get the constructor name for an object. */
                function(t) {
                    if (t.constructor) return t.constructor.name;
                    return null;
                }
                /**
     * Casts `obj` to `T`, optionally unwrapping Compat types to expose the
     * underlying instance. Throws if  `obj` is not an instance of `T`.
     *
     * This cast is used in the Lite and Full SDK to verify instance types for
     * arguments passed to the public API.
     * @internal
     */ (t);
                return e ? `a custom ${e} object` : "an object";
            }
        }
        return "function" == typeof t ? "a function" : B();
    }

    function Ia(t, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    e) {
        if ("_delegate" in t && (
        // Unwrap Compat types
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        t = t._delegate), !(t instanceof e)) {
            if (e.name === t.constructor.name) throw new Q(j.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
            {
                const n = Ea(t);
                throw new Q(j.INVALID_ARGUMENT, `Expected type '${e.name}', but it was: ${n}`);
            }
        }
        return t;
    }

    function Aa(t, e) {
        if (e <= 0) throw new Q(j.INVALID_ARGUMENT, `Function ${t}() requires a positive number, but it was: ${e}.`);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // settings() defaults:
    /**
     * A concrete type describing all the values that can be applied via a
     * user-supplied `FirestoreSettings` object. This is a separate type so that
     * defaults can be supplied and the value can be checked for equality.
     */
    class Ra {
        constructor(t) {
            var e;
            if (void 0 === t.host) {
                if (void 0 !== t.ssl) throw new Q(j.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
                this.host = "firestore.googleapis.com", this.ssl = true;
            } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;
            if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, 
            void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040; else {
                if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new Q(j.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
                this.cacheSizeBytes = t.cacheSizeBytes;
            }
            this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, 
            this.useFetchStreams = !!t.useFetchStreams, ya("experimentalForceLongPolling", t.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t.experimentalAutoDetectLongPolling);
        }
        isEqual(t) {
            return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The Cloud Firestore service interface.
     *
     * Do not call this constructor directly. Instead, use {@link getFirestore}.
     */ class ba {
        /** @hideconstructor */
        constructor(t, e, n) {
            this._authCredentials = e, this._appCheckCredentials = n, 
            /**
             * Whether it's a Firestore or Firestore Lite instance.
             */
            this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new Ra({}), 
            this._settingsFrozen = !1, t instanceof _a ? this._databaseId = t : (this._app = t, 
            this._databaseId = function(t) {
                if (!Object.prototype.hasOwnProperty.apply(t.options, [ "projectId" ])) throw new Q(j.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
                return new _a(t.options.projectId);
            }
            /**
     * Modify this instance to communicate with the Cloud Firestore emulator.
     *
     * Note: This must be called before this instance has been used to do any
     * operations.
     *
     * @param firestore - The `Firestore` instance to configure to connect to the
     * emulator.
     * @param host - the emulator host (ex: localhost).
     * @param port - the emulator port (ex: 9000).
     * @param options.mockUserToken - the mock auth token to use for unit testing
     * Security Rules.
     */ (t));
        }
        /**
         * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
         * instance.
         */    get app() {
            if (!this._app) throw new Q(j.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
            return this._app;
        }
        get _initialized() {
            return this._settingsFrozen;
        }
        get _terminated() {
            return void 0 !== this._terminateTask;
        }
        _setSettings(t) {
            if (this._settingsFrozen) throw new Q(j.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
            this._settings = new Ra(t), void 0 !== t.credentials && (this._authCredentials = function(t) {
                if (!t) return new z;
                switch (t.type) {
                  case "gapi":
                    const e = t.client;
                    // Make sure this really is a Gapi client.
                                    return U(!("object" != typeof e || null === e || !e.auth || !e.auth.getAuthHeaderValueForFirstParty)), 
                    new X(e, t.sessionIndex || "0", t.iamToken || null);

                  case "provider":
                    return t.client;

                  default:
                    throw new Q(j.INVALID_ARGUMENT, "makeAuthCredentialsProvider failed due to invalid credential type");
                }
            }(t.credentials));
        }
        _getSettings() {
            return this._settings;
        }
        _freezeSettings() {
            return this._settingsFrozen = !0, this._settings;
        }
        _delete() {
            return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
        }
        /** Returns a JSON-serializable representation of this `Firestore` instance. */    toJSON() {
            return {
                app: this._app,
                databaseId: this._databaseId,
                settings: this._settings
            };
        }
        /**
         * Terminates all components used by this client. Subclasses can override
         * this method to clean up their own dependencies, but must also call this
         * method.
         *
         * Only ever called once.
         */    _terminate() {
            /**
     * Removes all components associated with the provided instance. Must be called
     * when the `Firestore` instance is terminated.
     */
            return function(t) {
                const e = ma.get(t);
                e && (O("ComponentProvider", "Removing Datastore"), ma.delete(t), e.terminate());
            }(this), Promise.resolve();
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `DocumentReference` refers to a document location in a Firestore database
     * and can be used to write, read, or listen to the location. The document at
     * the referenced location may or may not exist.
     */ class va {
        /** @hideconstructor */
        constructor(t, 
        /**
         * If provided, the `FirestoreDataConverter` associated with this instance.
         */
        e, n) {
            this.converter = e, this._key = n, 
            /** The type of this Firestore reference. */
            this.type = "document", this.firestore = t;
        }
        get _path() {
            return this._key.path;
        }
        /**
         * The document's identifier within its collection.
         */    get id() {
            return this._key.path.lastSegment();
        }
        /**
         * A string representing the path of the referenced document (relative
         * to the root of the database).
         */    get path() {
            return this._key.path.canonicalString();
        }
        /**
         * The collection this `DocumentReference` belongs to.
         */    get parent() {
            return new Sa(this.firestore, this.converter, this._key.path.popLast());
        }
        withConverter(t) {
            return new va(this.firestore, t, this._key);
        }
    }

    /**
     * A `Query` refers to a query which you can read or listen to. You can also
     * construct refined `Query` objects by adding filters and ordering.
     */ class Va {
        // This is the lite version of the Query class in the main SDK.
        /** @hideconstructor protected */
        constructor(t, 
        /**
         * If provided, the `FirestoreDataConverter` associated with this instance.
         */
        e, n) {
            this.converter = e, this._query = n, 
            /** The type of this Firestore reference. */
            this.type = "query", this.firestore = t;
        }
        withConverter(t) {
            return new Va(this.firestore, t, this._query);
        }
    }

    /**
     * A `CollectionReference` object can be used for adding documents, getting
     * document references, and querying for documents (using {@link query}).
     */ class Sa extends Va {
        /** @hideconstructor */
        constructor(t, e, n) {
            super(t, e, ye(n)), this._path = n, 
            /** The type of this Firestore reference. */
            this.type = "collection";
        }
        /** The collection's identifier. */    get id() {
            return this._query.path.lastSegment();
        }
        /**
         * A string representing the path of the referenced collection (relative
         * to the root of the database).
         */    get path() {
            return this._query.path.canonicalString();
        }
        /**
         * A reference to the containing `DocumentReference` if this is a
         * subcollection. If this isn't a subcollection, the reference is null.
         */    get parent() {
            const t = this._path.popLast();
            return t.isEmpty() ? null : new va(this.firestore, 
            /* converter= */ null, new Dt(t));
        }
        withConverter(t) {
            return new Sa(this.firestore, t, this._path);
        }
    }

    function Da(t, e, ...n) {
        if (t = getModularInstance(t), ga("collection", "path", e), t instanceof ba) {
            const s = wt.fromString(e, ...n);
            return Ta(s), new Sa(t, /* converter= */ null, s);
        }
        {
            if (!(t instanceof va || t instanceof Sa)) throw new Q(j.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
            const s = t._path.child(wt.fromString(e, ...n));
            return Ta(s), new Sa(t.firestore, 
            /* converter= */ null, s);
        }
    }

    function Na(t, e, ...n) {
        if (t = getModularInstance(t), 
        // We allow omission of 'pathString' but explicitly prohibit passing in both
        // 'undefined' and 'null'.
        1 === arguments.length && (e = it.A()), ga("doc", "path", e), t instanceof ba) {
            const s = wt.fromString(e, ...n);
            return pa(s), new va(t, 
            /* converter= */ null, new Dt(s));
        }
        {
            if (!(t instanceof va || t instanceof Sa)) throw new Q(j.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
            const s = t._path.child(wt.fromString(e, ...n));
            return pa(s), new va(t.firestore, t instanceof Sa ? t.converter : null, new Dt(s));
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class $a {
        constructor() {
            // The last promise in the queue.
            this.mc = Promise.resolve(), 
            // A list of retryable operations. Retryable operations are run in order and
            // retried with backoff.
            this.gc = [], 
            // Is this AsyncQueue being shut down? Once it is set to true, it will not
            // be changed again.
            this.yc = !1, 
            // Operations scheduled to be queued in the future. Operations are
            // automatically removed after they are run or canceled.
            this.Tc = [], 
            // visible for testing
            this.Ec = null, 
            // Flag set while there's an outstanding AsyncQueue operation, used for
            // assertion sanity-checks.
            this.Ic = !1, 
            // Enabled during shutdown on Safari to prevent future access to IndexedDB.
            this.Ac = !1, 
            // List of TimerIds to fast-forward delays for.
            this.Rc = [], 
            // Backoff timer used to schedule retries for retryable operations
            this.ur = new no(this, "async_queue_retry" /* AsyncQueueRetry */), 
            // Visibility handler that triggers an immediate retry of all retryable
            // operations. Meant to speed up recovery when we regain file system access
            // after page comes into foreground.
            this.bc = () => {
                const t = to();
                t && O("AsyncQueue", "Visibility state changed to " + t.visibilityState), this.ur.er();
            };
            const t = to();
            t && "function" == typeof t.addEventListener && t.addEventListener("visibilitychange", this.bc);
        }
        get isShuttingDown() {
            return this.yc;
        }
        /**
         * Adds a new operation to the queue without waiting for it to complete (i.e.
         * we ignore the Promise result).
         */    enqueueAndForget(t) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.enqueue(t);
        }
        enqueueAndForgetEvenWhileRestricted(t) {
            this.Pc(), 
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.vc(t);
        }
        enterRestrictedMode(t) {
            if (!this.yc) {
                this.yc = !0, this.Ac = t || !1;
                const e = to();
                e && "function" == typeof e.removeEventListener && e.removeEventListener("visibilitychange", this.bc);
            }
        }
        enqueue(t) {
            if (this.Pc(), this.yc) 
            // Return a Promise which never resolves.
            return new Promise((() => {}));
            // Create a deferred Promise that we can return to the callee. This
            // allows us to return a "hanging Promise" only to the callee and still
            // advance the queue even when the operation is not run.
                    const e = new W;
            return this.vc((() => this.yc && this.Ac ? Promise.resolve() : (t().then(e.resolve, e.reject), 
            e.promise))).then((() => e.promise));
        }
        enqueueRetryable(t) {
            this.enqueueAndForget((() => (this.gc.push(t), this.Vc())));
        }
        /**
         * Runs the next operation from the retryable queue. If the operation fails,
         * reschedules with backoff.
         */    async Vc() {
            if (0 !== this.gc.length) {
                try {
                    await this.gc[0](), this.gc.shift(), this.ur.reset();
                } catch (t) {
                    if (!Zs(t)) throw t;
     // Failure will be handled by AsyncQueue
                                    O("AsyncQueue", "Operation failed with retryable error: " + t);
                }
                this.gc.length > 0 && 
                // If there are additional operations, we re-schedule `retryNextOp()`.
                // This is necessary to run retryable operations that failed during
                // their initial attempt since we don't know whether they are already
                // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
                // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
                // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
                // call scheduled here.
                // Since `backoffAndRun()` cancels an existing backoff and schedules a
                // new backoff on every call, there is only ever a single additional
                // operation in the queue.
                this.ur.Zi((() => this.Vc()));
            }
        }
        vc(t) {
            const e = this.mc.then((() => (this.Ic = !0, t().catch((t => {
                this.Ec = t, this.Ic = !1;
                const e = 
                /**
     * Chrome includes Error.message in Error.stack. Other browsers do not.
     * This returns expected output of message + stack when available.
     * @param error - Error or FirestoreError
     */
                function(t) {
                    let e = t.message || "";
                    t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + "\n" + t.stack);
                    return e;
                }
                /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (t);
                // Re-throw the error so that this.tail becomes a rejected Promise and
                // all further attempts to chain (via .then) will just short-circuit
                // and return the rejected Promise.
                throw M("INTERNAL UNHANDLED ERROR: ", e), t;
            })).then((t => (this.Ic = !1, t))))));
            return this.mc = e, e;
        }
        enqueueAfterDelay(t, e, n) {
            this.Pc(), 
            // Fast-forward delays for timerIds that have been overriden.
            this.Rc.indexOf(t) > -1 && (e = 0);
            const s = Fo.createAndSchedule(this, t, e, n, (t => this.Sc(t)));
            return this.Tc.push(s), s;
        }
        Pc() {
            this.Ec && B();
        }
        verifyOperationInProgress() {}
        /**
         * Waits until all currently queued tasks are finished executing. Delayed
         * operations are not run.
         */    async Dc() {
            // Operations in the queue prior to draining may have enqueued additional
            // operations. Keep draining the queue until the tail is no longer advanced,
            // which indicates that no more new operations were enqueued and that all
            // operations were executed.
            let t;
            do {
                t = this.mc, await t;
            } while (t !== this.mc);
        }
        /**
         * For Tests: Determine if a delayed operation with a particular TimerId
         * exists.
         */    Cc(t) {
            for (const e of this.Tc) if (e.timerId === t) return !0;
            return !1;
        }
        /**
         * For Tests: Runs some or all delayed operations early.
         *
         * @param lastTimerId - Delayed operations up to and including this TimerId
         * will be drained. Pass TimerId.All to run all delayed operations.
         * @returns a Promise that resolves once all operations have been run.
         */    Nc(t) {
            // Note that draining may generate more delayed ops, so we do that first.
            return this.Dc().then((() => {
                // Run ops in the same order they'd run if they ran naturally.
                this.Tc.sort(((t, e) => t.targetTimeMs - e.targetTimeMs));
                for (const e of this.Tc) if (e.skipDelay(), "all" /* All */ !== t && e.timerId === t) break;
                return this.Dc();
            }));
        }
        /**
         * For Tests: Skip all subsequent delays for a timer id.
         */    kc(t) {
            this.Rc.push(t);
        }
        /** Called once a DelayedOperation is run or canceled. */    Sc(t) {
            // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
            const e = this.Tc.indexOf(t);
            this.Tc.splice(e, 1);
        }
    }

    function Oa(t) {
        /**
     * Returns true if obj is an object and contains at least one of the specified
     * methods.
     */
        return function(t, e) {
            if ("object" != typeof t || null === t) return !1;
            const n = t;
            for (const t of e) if (t in n && "function" == typeof n[t]) return !0;
            return !1;
        }
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /**
     * Represents the task of loading a Firestore bundle. It provides progress of bundle
     * loading, as well as task completion and error events.
     *
     * The API is compatible with `Promise<LoadBundleTaskProgress>`.
     */ (t, [ "next", "error", "complete" ]);
    }

    /**
     * The Cloud Firestore service interface.
     *
     * Do not call this constructor directly. Instead, use {@link getFirestore}.
     */
    class La extends ba {
        /** @hideconstructor */
        constructor(t, e, n) {
            super(t, e, n), 
            /**
             * Whether it's a {@link Firestore} or Firestore Lite instance.
             */
            this.type = "firestore", this._queue = new $a, this._persistenceKey = "name" in t ? t.name : "[DEFAULT]";
        }
        _terminate() {
            return this._firestoreClient || 
            // The client must be initialized to ensure that all subsequent API
            // usage throws an exception.
            Ka(this), this._firestoreClient.terminate();
        }
    }

    /**
     * Returns the existing {@link Firestore} instance that is associated with the
     * provided {@link @firebase/app#FirebaseApp}. If no instance exists, initializes a new
     * instance with default settings.
     *
     * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned {@link Firestore}
     * instance is associated with.
     * @returns The {@link Firestore} instance of the provided app.
     */ function Ua(e = getApp()) {
        return _getProvider(e, "firestore").getImmediate();
    }

    /**
     * @internal
     */ function qa(t) {
        return t._firestoreClient || Ka(t), t._firestoreClient.verifyNotTerminated(), t._firestoreClient;
    }

    function Ka(t) {
        var e;
        const n = t._freezeSettings(), s = function(t, e, n, s) {
            return new wa(t, e, n, s.host, s.ssl, s.experimentalForceLongPolling, s.experimentalAutoDetectLongPolling, s.useFetchStreams);
        }(t._databaseId, (null === (e = t._app) || void 0 === e ? void 0 : e.options.appId) || "", t._persistenceKey, n);
        t._firestoreClient = new zc(t._authCredentials, t._appCheckCredentials, t._queue, s);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `FieldPath` refers to a field in a document. The path may consist of a
     * single field name (referring to a top-level field in the document), or a
     * list of field names (referring to a nested field in the document).
     *
     * Create a `FieldPath` by providing field names. If more than one field
     * name is provided, the path will point to a nested field in a document.
     */
    class eu {
        /**
         * Creates a `FieldPath` from the provided field names. If more than one field
         * name is provided, the path will point to a nested field in a document.
         *
         * @param fieldNames - A list of field names.
         */
        constructor(...t) {
            for (let e = 0; e < t.length; ++e) if (0 === t[e].length) throw new Q(j.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
            this._internalPath = new mt(t);
        }
        /**
         * Returns true if this `FieldPath` is equal to the provided one.
         *
         * @param other - The `FieldPath` to compare against.
         * @returns true if this `FieldPath` is equal to the provided one.
         */    isEqual(t) {
            return this._internalPath.isEqual(t._internalPath);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An immutable object representing an array of bytes.
     */ class su {
        /** @hideconstructor */
        constructor(t) {
            this._byteString = t;
        }
        /**
         * Creates a new `Bytes` object from the given Base64 string, converting it to
         * bytes.
         *
         * @param base64 - The Base64 string used to create the `Bytes` object.
         */    static fromBase64String(t) {
            try {
                return new su(pt.fromBase64String(t));
            } catch (t) {
                throw new Q(j.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + t);
            }
        }
        /**
         * Creates a new `Bytes` object from the given Uint8Array.
         *
         * @param array - The Uint8Array used to create the `Bytes` object.
         */    static fromUint8Array(t) {
            return new su(pt.fromUint8Array(t));
        }
        /**
         * Returns the underlying bytes as a Base64-encoded string.
         *
         * @returns The Base64-encoded string created from the `Bytes` object.
         */    toBase64() {
            return this._byteString.toBase64();
        }
        /**
         * Returns the underlying bytes in a new `Uint8Array`.
         *
         * @returns The Uint8Array created from the `Bytes` object.
         */    toUint8Array() {
            return this._byteString.toUint8Array();
        }
        /**
         * Returns a string representation of the `Bytes` object.
         *
         * @returns A string representation of the `Bytes` object.
         */    toString() {
            return "Bytes(base64: " + this.toBase64() + ")";
        }
        /**
         * Returns true if this `Bytes` object is equal to the provided one.
         *
         * @param other - The `Bytes` object to compare against.
         * @returns true if this `Bytes` object is equal to the provided one.
         */    isEqual(t) {
            return this._byteString.isEqual(t._byteString);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Sentinel values that can be used when writing document fields with `set()`
     * or `update()`.
     */ class iu {
        /**
         * @param _methodName - The public API endpoint that returns this class.
         * @hideconstructor
         */
        constructor(t) {
            this._methodName = t;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An immutable object representing a geographic location in Firestore. The
     * location is represented as latitude/longitude pair.
     *
     * Latitude values are in the range of [-90, 90].
     * Longitude values are in the range of [-180, 180].
     */ class ru {
        /**
         * Creates a new immutable `GeoPoint` object with the provided latitude and
         * longitude values.
         * @param latitude - The latitude as number between -90 and 90.
         * @param longitude - The longitude as number between -180 and 180.
         */
        constructor(t, e) {
            if (!isFinite(t) || t < -90 || t > 90) throw new Q(j.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t);
            if (!isFinite(e) || e < -180 || e > 180) throw new Q(j.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e);
            this._lat = t, this._long = e;
        }
        /**
         * The latitude of this `GeoPoint` instance.
         */    get latitude() {
            return this._lat;
        }
        /**
         * The longitude of this `GeoPoint` instance.
         */    get longitude() {
            return this._long;
        }
        /**
         * Returns true if this `GeoPoint` is equal to the provided one.
         *
         * @param other - The `GeoPoint` to compare against.
         * @returns true if this `GeoPoint` is equal to the provided one.
         */    isEqual(t) {
            return this._lat === t._lat && this._long === t._long;
        }
        /** Returns a JSON-serializable representation of this GeoPoint. */    toJSON() {
            return {
                latitude: this._lat,
                longitude: this._long
            };
        }
        /**
         * Actually private to JS consumers of our API, so this function is prefixed
         * with an underscore.
         */    _compareTo(t) {
            return rt(this._lat, t._lat) || rt(this._long, t._long);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const ou = /^__.*__$/;

    /** The result of parsing document data (e.g. for a setData call). */ class cu {
        constructor(t, e, n) {
            this.data = t, this.fieldMask = e, this.fieldTransforms = n;
        }
        toMutation(t, e) {
            return null !== this.fieldMask ? new cn(t, this.data, this.fieldMask, e, this.fieldTransforms) : new on(t, this.data, e, this.fieldTransforms);
        }
    }

    /** The result of parsing "update" data (i.e. for an updateData call). */ class au {
        constructor(t, 
        // The fieldMask does not include document transforms.
        e, n) {
            this.data = t, this.fieldMask = e, this.fieldTransforms = n;
        }
        toMutation(t, e) {
            return new cn(t, this.data, this.fieldMask, e, this.fieldTransforms);
        }
    }

    function uu(t) {
        switch (t) {
          case 0 /* Set */ :
     // fall through
                  case 2 /* MergeSet */ :
     // fall through
                  case 1 /* Update */ :
            return !0;

          case 3 /* Argument */ :
          case 4 /* ArrayArgument */ :
            return !1;

          default:
            throw B();
        }
    }

    /** A "context" object passed around while parsing user data. */ class hu {
        /**
         * Initializes a ParseContext with the given source and path.
         *
         * @param settings - The settings for the parser.
         * @param databaseId - The database ID of the Firestore instance.
         * @param serializer - The serializer to use to generate the Value proto.
         * @param ignoreUndefinedProperties - Whether to ignore undefined properties
         * rather than throw.
         * @param fieldTransforms - A mutable list of field transforms encountered
         * while parsing the data.
         * @param fieldMask - A mutable list of field paths encountered while parsing
         * the data.
         *
         * TODO(b/34871131): We don't support array paths right now, so path can be
         * null to indicate the context represents any location within an array (in
         * which case certain features will not work and errors will be somewhat
         * compromised).
         */
        constructor(t, e, n, s, i, r) {
            this.settings = t, this.databaseId = e, this.k = n, this.ignoreUndefinedProperties = s, 
            // Minor hack: If fieldTransforms is undefined, we assume this is an
            // external call and we need to validate the entire path.
            void 0 === i && this.xc(), this.fieldTransforms = i || [], this.fieldMask = r || [];
        }
        get path() {
            return this.settings.path;
        }
        get $c() {
            return this.settings.$c;
        }
        /** Returns a new context with the specified settings overwritten. */    Oc(t) {
            return new hu(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.k, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
        }
        Mc(t) {
            var e;
            const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), s = this.Oc({
                path: n,
                Fc: !1
            });
            return s.Lc(t), s;
        }
        Bc(t) {
            var e;
            const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), s = this.Oc({
                path: n,
                Fc: !1
            });
            return s.xc(), s;
        }
        Uc(t) {
            // TODO(b/34871131): We don't support array paths right now; so make path
            // undefined.
            return this.Oc({
                path: void 0,
                Fc: !0
            });
        }
        qc(t) {
            return Du(t, this.settings.methodName, this.settings.Kc || !1, this.path, this.settings.jc);
        }
        /** Returns 'true' if 'fieldPath' was traversed when creating this context. */    contains(t) {
            return void 0 !== this.fieldMask.find((e => t.isPrefixOf(e))) || void 0 !== this.fieldTransforms.find((e => t.isPrefixOf(e.field)));
        }
        xc() {
            // TODO(b/34871131): Remove null check once we have proper paths for fields
            // within arrays.
            if (this.path) for (let t = 0; t < this.path.length; t++) this.Lc(this.path.get(t));
        }
        Lc(t) {
            if (0 === t.length) throw this.qc("Document fields must not be empty");
            if (uu(this.$c) && ou.test(t)) throw this.qc('Document fields cannot begin and end with "__"');
        }
    }

    /**
     * Helper for parsing raw user input (provided via the API) into internal model
     * classes.
     */ class lu {
        constructor(t, e, n) {
            this.databaseId = t, this.ignoreUndefinedProperties = e, this.k = n || eo(t);
        }
        /** Creates a new top-level parse context. */    Qc(t, e, n, s = !1) {
            return new hu({
                $c: t,
                methodName: e,
                jc: n,
                path: mt.emptyPath(),
                Fc: !1,
                Kc: s
            }, this.databaseId, this.k, this.ignoreUndefinedProperties);
        }
    }

    function fu(t) {
        const e = t._freezeSettings(), n = eo(t._databaseId);
        return new lu(t._databaseId, !!e.ignoreUndefinedProperties, n);
    }

    /** Parse document data from a set() call. */ function du(t, e, n, s, i, r = {}) {
        const o = t.Qc(r.merge || r.mergeFields ? 2 /* MergeSet */ : 0 /* Set */ , e, n, i);
        Pu("Data must be an object, but it was:", o, s);
        const c = Ru(s, o);
        let a, u;
        if (r.merge) a = new gt(o.fieldMask), u = o.fieldTransforms; else if (r.mergeFields) {
            const t = [];
            for (const s of r.mergeFields) {
                const i = vu(e, s, n);
                if (!o.contains(i)) throw new Q(j.INVALID_ARGUMENT, `Field '${i}' is specified in your field mask but missing from your input data.`);
                Cu(t, i) || t.push(i);
            }
            a = new gt(t), u = o.fieldTransforms.filter((t => a.covers(t.field)));
        } else a = null, u = o.fieldTransforms;
        return new cu(new Qt(c), a, u);
    }

    class wu extends iu {
        _toFieldTransform(t) {
            if (2 /* MergeSet */ !== t.$c) throw 1 /* Update */ === t.$c ? t.qc(`${this._methodName}() can only appear at the top level of your update data`) : t.qc(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);
            // No transform to add for a delete, but we need to add it to our
            // fieldMask so it gets deleted.
            return t.fieldMask.push(t.path), null;
        }
        isEqual(t) {
            return t instanceof wu;
        }
    }

    /** Parse update data from an update() call. */ function Tu(t, e, n, s) {
        const i = t.Qc(1 /* Update */ , e, n);
        Pu("Data must be an object, but it was:", i, s);
        const r = [], o = Qt.empty();
        lt(s, ((t, s) => {
            const c = Su(e, t, n);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    s = getModularInstance(s);
            const a = i.Bc(c);
            if (s instanceof wu) 
            // Add it to the field mask, but don't add anything to updateData.
            r.push(c); else {
                const t = Au(s, a);
                null != t && (r.push(c), o.set(c, t));
            }
        }));
        const c = new gt(r);
        return new au(o, c, i.fieldTransforms);
    }

    /** Parse update data from a list of field/value arguments. */ function Eu(t, e, n, s, i, r) {
        const o = t.Qc(1 /* Update */ , e, n), c = [ vu(e, s, n) ], a = [ i ];
        if (r.length % 2 != 0) throw new Q(j.INVALID_ARGUMENT, `Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);
        for (let t = 0; t < r.length; t += 2) c.push(vu(e, r[t])), a.push(r[t + 1]);
        const u = [], h = Qt.empty();
        // We iterate in reverse order to pick the last value for a field if the
        // user specified the field multiple times.
        for (let t = c.length - 1; t >= 0; --t) if (!Cu(u, c[t])) {
            const e = c[t];
            let n = a[t];
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    n = getModularInstance(n);
            const s = o.Bc(e);
            if (n instanceof wu) 
            // Add it to the field mask, but don't add anything to updateData.
            u.push(e); else {
                const t = Au(n, s);
                null != t && (u.push(e), h.set(e, t));
            }
        }
        const l = new gt(u);
        return new au(h, l, o.fieldTransforms);
    }

    /**
     * Parses user data to Protobuf Values.
     *
     * @param input - Data to be parsed.
     * @param context - A context object representing the current path being parsed,
     * the source of the data being parsed, etc.
     * @returns The parsed value, or null if the value was a FieldValue sentinel
     * that should not be included in the resulting parsed data.
     */ function Au(t, e) {
        if (bu(
        // Unwrap the API type from the Compat SDK. This will return the API type
        // from firestore-exp.
        t = getModularInstance(t))) return Pu("Unsupported field value:", e, t), Ru(t, e);
        if (t instanceof iu) 
        // FieldValues usually parse into transforms (except deleteField())
        // in which case we do not want to include this field in our parsed data
        // (as doing so will overwrite the field directly prior to the transform
        // trying to transform it). So we don't add this location to
        // context.fieldMask and we return null as our parsing result.
        /**
     * "Parses" the provided FieldValueImpl, adding any necessary transforms to
     * context.fieldTransforms.
     */
        return function(t, e) {
            // Sentinels are only supported with writes, and not within arrays.
            if (!uu(e.$c)) throw e.qc(`${t._methodName}() can only be used with update() and set()`);
            if (!e.path) throw e.qc(`${t._methodName}() is not currently supported inside arrays`);
            const n = t._toFieldTransform(e);
            n && e.fieldTransforms.push(n);
        }
        /**
     * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)
     *
     * @returns The parsed value
     */ (t, e), null;
        if (void 0 === t && e.ignoreUndefinedProperties) 
        // If the input is undefined it can never participate in the fieldMask, so
        // don't handle this below. If `ignoreUndefinedProperties` is false,
        // `parseScalarValue` will reject an undefined value.
        return null;
        if (
        // If context.path is null we are inside an array and we don't support
        // field mask paths more granular than the top-level array.
        e.path && e.fieldMask.push(e.path), t instanceof Array) {
            // TODO(b/34871131): Include the path containing the array in the error
            // message.
            // In the case of IN queries, the parsed data is an array (representing
            // the set of values to be included for the IN query) that may directly
            // contain additional arrays (each representing an individual field
            // value), so we disable this validation.
            if (e.settings.Fc && 4 /* ArrayArgument */ !== e.$c) throw e.qc("Nested arrays are not supported");
            return function(t, e) {
                const n = [];
                let s = 0;
                for (const i of t) {
                    let t = Au(i, e.Uc(s));
                    null == t && (
                    // Just include nulls in the array for fields being replaced with a
                    // sentinel.
                    t = {
                        nullValue: "NULL_VALUE"
                    }), n.push(t), s++;
                }
                return {
                    arrayValue: {
                        values: n
                    }
                };
            }(t, e);
        }
        return function(t, e) {
            if (null === (t = getModularInstance(t))) return {
                nullValue: "NULL_VALUE"
            };
            if ("number" == typeof t) return $e(e.k, t);
            if ("boolean" == typeof t) return {
                booleanValue: t
            };
            if ("string" == typeof t) return {
                stringValue: t
            };
            if (t instanceof Date) {
                const n = at.fromDate(t);
                return {
                    timestampValue: Qn(e.k, n)
                };
            }
            if (t instanceof at) {
                // Firestore backend truncates precision down to microseconds. To ensure
                // offline mode works the same with regards to truncation, perform the
                // truncation immediately without waiting for the backend to do that.
                const n = new at(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));
                return {
                    timestampValue: Qn(e.k, n)
                };
            }
            if (t instanceof ru) return {
                geoPointValue: {
                    latitude: t.latitude,
                    longitude: t.longitude
                }
            };
            if (t instanceof su) return {
                bytesValue: Wn(e.k, t._byteString)
            };
            if (t instanceof va) {
                const n = e.databaseId, s = t.firestore._databaseId;
                if (!s.isEqual(n)) throw e.qc(`Document reference is for database ${s.projectId}/${s.database} but should be for database ${n.projectId}/${n.database}`);
                return {
                    referenceValue: Hn(t.firestore._databaseId || e.databaseId, t._key.path)
                };
            }
            throw e.qc(`Unsupported field value: ${Ea(t)}`);
        }
        /**
     * Checks whether an object looks like a JSON object that should be converted
     * into a struct. Normal class/prototype instances are considered to look like
     * JSON objects since they should be converted to a struct value. Arrays, Dates,
     * GeoPoints, etc. are not considered to look like JSON objects since they map
     * to specific FieldValue types other than ObjectValue.
     */ (t, e);
    }

    function Ru(t, e) {
        const n = {};
        return ft(t) ? 
        // If we encounter an empty object, we explicitly add it to the update
        // mask to ensure that the server creates a map entry.
        e.path && e.path.length > 0 && e.fieldMask.push(e.path) : lt(t, ((t, s) => {
            const i = Au(s, e.Mc(t));
            null != i && (n[t] = i);
        })), {
            mapValue: {
                fields: n
            }
        };
    }

    function bu(t) {
        return !("object" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof at || t instanceof ru || t instanceof su || t instanceof va || t instanceof iu);
    }

    function Pu(t, e, n) {
        if (!bu(n) || !function(t) {
            return "object" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
        }(n)) {
            const s = Ea(n);
            throw "an object" === s ? e.qc(t + " a custom object") : e.qc(t + " " + s);
        }
    }

    /**
     * Helper that calls fromDotSeparatedString() but wraps any error thrown.
     */ function vu(t, e, n) {
        if ((
        // If required, replace the FieldPath Compat class with with the firestore-exp
        // FieldPath.
        e = getModularInstance(e)) instanceof eu) return e._internalPath;
        if ("string" == typeof e) return Su(t, e);
        throw Du("Field path arguments must be of type string or ", t, 
        /* hasConverter= */ !1, 
        /* path= */ void 0, n);
    }

    /**
     * Matches any characters in a field path string that are reserved.
     */ const Vu = new RegExp("[~\\*/\\[\\]]");

    /**
     * Wraps fromDotSeparatedString with an error message about the method that
     * was thrown.
     * @param methodName - The publicly visible method name
     * @param path - The dot-separated string form of a field path which will be
     * split on dots.
     * @param targetDoc - The document against which the field path will be
     * evaluated.
     */ function Su(t, e, n) {
        if (e.search(Vu) >= 0) throw Du(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`, t, 
        /* hasConverter= */ !1, 
        /* path= */ void 0, n);
        try {
            return new eu(...e.split("."))._internalPath;
        } catch (s) {
            throw Du(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, 
            /* hasConverter= */ !1, 
            /* path= */ void 0, n);
        }
    }

    function Du(t, e, n, s, i) {
        const r = s && !s.isEmpty(), o = void 0 !== i;
        let c = `Function ${e}() called with invalid data`;
        n && (c += " (via `toFirestore()`)"), c += ". ";
        let a = "";
        return (r || o) && (a += " (found", r && (a += ` in field ${s}`), o && (a += ` in document ${i}`), 
        a += ")"), new Q(j.INVALID_ARGUMENT, c + t + a);
    }

    /** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */ function Cu(t, e) {
        return t.some((t => t.isEqual(e)));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `DocumentSnapshot` contains data read from a document in your Firestore
     * database. The data can be extracted with `.data()` or `.get(<field>)` to
     * get a specific field.
     *
     * For a `DocumentSnapshot` that points to a non-existing document, any data
     * access will return 'undefined'. You can use the `exists()` method to
     * explicitly verify a document's existence.
     */ class Nu {
        // Note: This class is stripped down version of the DocumentSnapshot in
        // the legacy SDK. The changes are:
        // - No support for SnapshotMetadata.
        // - No support for SnapshotOptions.
        /** @hideconstructor protected */
        constructor(t, e, n, s, i) {
            this._firestore = t, this._userDataWriter = e, this._key = n, this._document = s, 
            this._converter = i;
        }
        /** Property of the `DocumentSnapshot` that provides the document's ID. */    get id() {
            return this._key.path.lastSegment();
        }
        /**
         * The `DocumentReference` for the document included in the `DocumentSnapshot`.
         */    get ref() {
            return new va(this._firestore, this._converter, this._key);
        }
        /**
         * Signals whether or not the document at the snapshot's location exists.
         *
         * @returns true if the document exists.
         */    exists() {
            return null !== this._document;
        }
        /**
         * Retrieves all fields in the document as an `Object`. Returns `undefined` if
         * the document doesn't exist.
         *
         * @returns An `Object` containing all fields in the document or `undefined`
         * if the document doesn't exist.
         */    data() {
            if (this._document) {
                if (this._converter) {
                    // We only want to use the converter and create a new DocumentSnapshot
                    // if a converter has been provided.
                    const t = new ku(this._firestore, this._userDataWriter, this._key, this._document, 
                    /* converter= */ null);
                    return this._converter.fromFirestore(t);
                }
                return this._userDataWriter.convertValue(this._document.data.value);
            }
        }
        /**
         * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
         * document or field doesn't exist.
         *
         * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
         * field.
         * @returns The data at the specified field location or undefined if no such
         * field exists in the document.
         */
        // We are using `any` here to avoid an explicit cast by our users.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        get(t) {
            if (this._document) {
                const e = this._document.data.field(xu("DocumentSnapshot.get", t));
                if (null !== e) return this._userDataWriter.convertValue(e);
            }
        }
    }

    /**
     * A `QueryDocumentSnapshot` contains data read from a document in your
     * Firestore database as part of a query. The document is guaranteed to exist
     * and its data can be extracted with `.data()` or `.get(<field>)` to get a
     * specific field.
     *
     * A `QueryDocumentSnapshot` offers the same API surface as a
     * `DocumentSnapshot`. Since query results contain only existing documents, the
     * `exists` property will always be true and `data()` will never return
     * 'undefined'.
     */ class ku extends Nu {
        /**
         * Retrieves all fields in the document as an `Object`.
         *
         * @override
         * @returns An `Object` containing all fields in the document.
         */
        data() {
            return super.data();
        }
    }

    /**
     * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.
     */ function xu(t, e) {
        return "string" == typeof e ? Su(t, e) : e instanceof eu ? e._internalPath : e._delegate._internalPath;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Metadata about a snapshot, describing the state of the snapshot.
     */ class $u {
        /** @hideconstructor */
        constructor(t, e) {
            this.hasPendingWrites = t, this.fromCache = e;
        }
        /**
         * Returns true if this `SnapshotMetadata` is equal to the provided one.
         *
         * @param other - The `SnapshotMetadata` to compare against.
         * @returns true if this `SnapshotMetadata` is equal to the provided one.
         */    isEqual(t) {
            return this.hasPendingWrites === t.hasPendingWrites && this.fromCache === t.fromCache;
        }
    }

    /**
     * A `DocumentSnapshot` contains data read from a document in your Firestore
     * database. The data can be extracted with `.data()` or `.get(<field>)` to
     * get a specific field.
     *
     * For a `DocumentSnapshot` that points to a non-existing document, any data
     * access will return 'undefined'. You can use the `exists()` method to
     * explicitly verify a document's existence.
     */ class Ou extends Nu {
        /** @hideconstructor protected */
        constructor(t, e, n, s, i, r) {
            super(t, e, n, s, r), this._firestore = t, this._firestoreImpl = t, this.metadata = i;
        }
        /**
         * Property of the `DocumentSnapshot` that signals whether or not the data
         * exists. True if the document exists.
         */    exists() {
            return super.exists();
        }
        /**
         * Retrieves all fields in the document as an `Object`. Returns `undefined` if
         * the document doesn't exist.
         *
         * By default, `serverTimestamp()` values that have not yet been
         * set to their final value will be returned as `null`. You can override
         * this by passing an options object.
         *
         * @param options - An options object to configure how data is retrieved from
         * the snapshot (for example the desired behavior for server timestamps that
         * have not yet been set to their final value).
         * @returns An `Object` containing all fields in the document or `undefined` if
         * the document doesn't exist.
         */    data(t = {}) {
            if (this._document) {
                if (this._converter) {
                    // We only want to use the converter and create a new DocumentSnapshot
                    // if a converter has been provided.
                    const e = new Mu(this._firestore, this._userDataWriter, this._key, this._document, this.metadata, 
                    /* converter= */ null);
                    return this._converter.fromFirestore(e, t);
                }
                return this._userDataWriter.convertValue(this._document.data.value, t.serverTimestamps);
            }
        }
        /**
         * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
         * document or field doesn't exist.
         *
         * By default, a `serverTimestamp()` that has not yet been set to
         * its final value will be returned as `null`. You can override this by
         * passing an options object.
         *
         * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
         * field.
         * @param options - An options object to configure how the field is retrieved
         * from the snapshot (for example the desired behavior for server timestamps
         * that have not yet been set to their final value).
         * @returns The data at the specified field location or undefined if no such
         * field exists in the document.
         */
        // We are using `any` here to avoid an explicit cast by our users.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        get(t, e = {}) {
            if (this._document) {
                const n = this._document.data.field(xu("DocumentSnapshot.get", t));
                if (null !== n) return this._userDataWriter.convertValue(n, e.serverTimestamps);
            }
        }
    }

    /**
     * A `QueryDocumentSnapshot` contains data read from a document in your
     * Firestore database as part of a query. The document is guaranteed to exist
     * and its data can be extracted with `.data()` or `.get(<field>)` to get a
     * specific field.
     *
     * A `QueryDocumentSnapshot` offers the same API surface as a
     * `DocumentSnapshot`. Since query results contain only existing documents, the
     * `exists` property will always be true and `data()` will never return
     * 'undefined'.
     */ class Mu extends Ou {
        /**
         * Retrieves all fields in the document as an `Object`.
         *
         * By default, `serverTimestamp()` values that have not yet been
         * set to their final value will be returned as `null`. You can override
         * this by passing an options object.
         *
         * @override
         * @param options - An options object to configure how data is retrieved from
         * the snapshot (for example the desired behavior for server timestamps that
         * have not yet been set to their final value).
         * @returns An `Object` containing all fields in the document.
         */
        data(t = {}) {
            return super.data(t);
        }
    }

    /**
     * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects
     * representing the results of a query. The documents can be accessed as an
     * array via the `docs` property or enumerated using the `forEach` method. The
     * number of documents can be determined via the `empty` and `size`
     * properties.
     */ class Fu {
        /** @hideconstructor */
        constructor(t, e, n, s) {
            this._firestore = t, this._userDataWriter = e, this._snapshot = s, this.metadata = new $u(s.hasPendingWrites, s.fromCache), 
            this.query = n;
        }
        /** An array of all the documents in the `QuerySnapshot`. */    get docs() {
            const t = [];
            return this.forEach((e => t.push(e))), t;
        }
        /** The number of documents in the `QuerySnapshot`. */    get size() {
            return this._snapshot.docs.size;
        }
        /** True if there are no documents in the `QuerySnapshot`. */    get empty() {
            return 0 === this.size;
        }
        /**
         * Enumerates all of the documents in the `QuerySnapshot`.
         *
         * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
         * each document in the snapshot.
         * @param thisArg - The `this` binding for the callback.
         */    forEach(t, e) {
            this._snapshot.docs.forEach((n => {
                t.call(e, new Mu(this._firestore, this._userDataWriter, n.key, n, new $u(this._snapshot.mutatedKeys.has(n.key), this._snapshot.fromCache), this.query.converter));
            }));
        }
        /**
         * Returns an array of the documents changes since the last snapshot. If this
         * is the first snapshot, all documents will be in the list as 'added'
         * changes.
         *
         * @param options - `SnapshotListenOptions` that control whether metadata-only
         * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
         * snapshot events.
         */    docChanges(t = {}) {
            const e = !!t.includeMetadataChanges;
            if (e && this._snapshot.excludesMetadataChanges) throw new Q(j.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
            return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === e || (this._cachedChanges = 
            /** Calculates the array of `DocumentChange`s for a given `ViewSnapshot`. */
            function(t, e) {
                if (t._snapshot.oldDocs.isEmpty()) {
                    let e = 0;
                    return t._snapshot.docChanges.map((n => ({
                        type: "added",
                        doc: new Mu(t._firestore, t._userDataWriter, n.doc.key, n.doc, new $u(t._snapshot.mutatedKeys.has(n.doc.key), t._snapshot.fromCache), t.query.converter),
                        oldIndex: -1,
                        newIndex: e++
                    })));
                }
                {
                    // A `DocumentSet` that is updated incrementally as changes are applied to use
                    // to lookup the index of a document.
                    let n = t._snapshot.oldDocs;
                    return t._snapshot.docChanges.filter((t => e || 3 /* Metadata */ !== t.type)).map((e => {
                        const s = new Mu(t._firestore, t._userDataWriter, e.doc.key, e.doc, new $u(t._snapshot.mutatedKeys.has(e.doc.key), t._snapshot.fromCache), t.query.converter);
                        let i = -1, r = -1;
                        return 0 /* Added */ !== e.type && (i = n.indexOf(e.doc.key), n = n.delete(e.doc.key)), 
                        1 /* Removed */ !== e.type && (n = n.add(e.doc), r = n.indexOf(e.doc.key)), {
                            type: Lu(e.type),
                            doc: s,
                            oldIndex: i,
                            newIndex: r
                        };
                    }));
                }
            }(this, e), this._cachedChangesIncludeMetadataChanges = e), this._cachedChanges;
        }
    }

    function Lu(t) {
        switch (t) {
          case 0 /* Added */ :
            return "added";

          case 2 /* Modified */ :
          case 3 /* Metadata */ :
            return "modified";

          case 1 /* Removed */ :
            return "removed";

          default:
            return B();
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function Uu(t) {
        if (Te(t) && 0 === t.explicitOrderBy.length) throw new Q(j.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
    }

    /**
     * A `QueryConstraint` is used to narrow the set of documents returned by a
     * Firestore query. `QueryConstraint`s are created by invoking {@link where},
     * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link
     * endBefore:1}, {@link (endAt:1)}, {@link limit} or {@link limitToLast} and
     * can then be passed to {@link query} to create a new query instance that
     * also contains this `QueryConstraint`.
     */ class qu {}

    /**
     * Creates a new immutable instance of {@link Query} that is extended to also include
     * additional query constraints.
     *
     * @param query - The {@link Query} instance to use as a base for the new constraints.
     * @param queryConstraints - The list of {@link QueryConstraint}s to apply.
     * @throws if any of the provided query constraints cannot be combined with the
     * existing or new constraints.
     */ function Ku(t, ...e) {
        for (const n of e) t = n._apply(t);
        return t;
    }

    class Wu extends qu {
        constructor(t, e) {
            super(), this.zc = t, this.Yc = e, this.type = "orderBy";
        }
        _apply(t) {
            const e = function(t, e, n) {
                if (null !== t.startAt) throw new Q(j.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
                if (null !== t.endAt) throw new Q(j.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
                const s = new fe(e, n);
                return function(t, e) {
                    if (null === Ee(t)) {
                        // This is the first order by. It must match any inequality.
                        const n = Ie(t);
                        null !== n && oh(t, n, e.field);
                    }
                }(t, s), s;
            }
            /**
     * Create a `Bound` from a query and a document.
     *
     * Note that the `Bound` will always include the key of the document
     * and so only the provided document will compare equal to the returned
     * position.
     *
     * Will throw if the document does not contain all fields of the order by
     * of the query or if any of the fields in the order by are an uncommitted
     * server timestamp.
     */ (t._query, this.zc, this.Yc);
            return new Va(t.firestore, t.converter, function(t, e) {
                // TODO(dimond): validate that orderBy does not list the same key twice.
                const n = t.explicitOrderBy.concat([ e ]);
                return new me(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
            }(t._query, e));
        }
    }

    /**
     * Creates a {@link QueryConstraint} that sorts the query result by the
     * specified field, optionally in descending order instead of ascending.
     *
     * @param fieldPath - The field to sort by.
     * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If
     * not specified, order will be ascending.
     * @returns The created {@link Query}.
     */ function Gu(t, e = "asc") {
        const n = e, s = xu("orderBy", t);
        return new Wu(s, n);
    }

    class zu extends qu {
        constructor(t, e, n) {
            super(), this.type = t, this.Xc = e, this.Zc = n;
        }
        _apply(t) {
            return new Va(t.firestore, t.converter, Pe(t._query, this.Xc, this.Zc));
        }
    }

    /**
     * Creates a {@link QueryConstraint} that only returns the first matching documents.
     *
     * @param limit - The maximum number of items to return.
     * @returns The created {@link Query}.
     */ function Hu(t) {
        return Aa("limit", t), new zu("limit", t, "F" /* First */);
    }

    function oh(t, e, n) {
        if (!n.isEqual(e)) throw new Q(j.INVALID_ARGUMENT, `Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '${e.toString()}' and so you must also use '${e.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${n.toString()}' instead.`);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Converts Firestore's internal types to the JavaScript types that we expose
     * to the user.
     *
     * @internal
     */ class ch {
        convertValue(t, e = "none") {
            switch (Ct(t)) {
              case 0 /* NullValue */ :
                return null;

              case 1 /* BooleanValue */ :
                return t.booleanValue;

              case 2 /* NumberValue */ :
                return It(t.integerValue || t.doubleValue);

              case 3 /* TimestampValue */ :
                return this.convertTimestamp(t.timestampValue);

              case 4 /* ServerTimestampValue */ :
                return this.convertServerTimestamp(t, e);

              case 5 /* StringValue */ :
                return t.stringValue;

              case 6 /* BlobValue */ :
                return this.convertBytes(At(t.bytesValue));

              case 7 /* RefValue */ :
                return this.convertReference(t.referenceValue);

              case 8 /* GeoPointValue */ :
                return this.convertGeoPoint(t.geoPointValue);

              case 9 /* ArrayValue */ :
                return this.convertArray(t.arrayValue, e);

              case 10 /* ObjectValue */ :
                return this.convertObject(t.mapValue, e);

              default:
                throw B();
            }
        }
        convertObject(t, e) {
            const n = {};
            return lt(t.fields, ((t, s) => {
                n[t] = this.convertValue(s, e);
            })), n;
        }
        convertGeoPoint(t) {
            return new ru(It(t.latitude), It(t.longitude));
        }
        convertArray(t, e) {
            return (t.values || []).map((t => this.convertValue(t, e)));
        }
        convertServerTimestamp(t, e) {
            switch (e) {
              case "previous":
                const n = bt(t);
                return null == n ? null : this.convertValue(n, e);

              case "estimate":
                return this.convertTimestamp(Pt(t));

              default:
                return null;
            }
        }
        convertTimestamp(t) {
            const e = Et(t);
            return new at(e.seconds, e.nanos);
        }
        convertDocumentKey(t, e) {
            const n = wt.fromString(t);
            U(Rs(n));
            const s = new _a(n.get(1), n.get(3)), i = new Dt(n.popFirst(5));
            return s.isEqual(e) || 
            // TODO(b/64130202): Somehow support foreign references.
            M(`Document ${i} contains a document reference within a different database (${s.projectId}/${s.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), 
            i;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Converts custom model object of type T into `DocumentData` by applying the
     * converter if it exists.
     *
     * This function is used when converting user objects to `DocumentData`
     * because we want to provide the user with a more specific error message if
     * their `set()` or fails due to invalid data originating from a `toFirestore()`
     * call.
     */ function ah(t, e, n) {
        let s;
        // Cast to `any` in order to satisfy the union type constraint on
        // toFirestore().
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return s = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, 
        s;
    }

    class dh extends ch {
        constructor(t) {
            super(), this.firestore = t;
        }
        convertBytes(t) {
            return new su(t);
        }
        convertReference(t) {
            const e = this.convertDocumentKey(t, this.firestore._databaseId);
            return new va(this.firestore, /* converter= */ null, e);
        }
    }

    /**
     * Executes the query and returns the results as a `QuerySnapshot`.
     *
     * Note: `getDocs()` attempts to provide up-to-date data when possible by
     * waiting for data from the server, but it may return cached data or fail if
     * you are offline and the server cannot be reached. To specify this behavior,
     * invoke {@link getDocsFromCache} or {@link getDocsFromServer}.
     *
     * @returns A `Promise` that will be resolved with the results of the query.
     */ function mh(t) {
        t = Ia(t, Va);
        const e = Ia(t.firestore, La), n = qa(e), s = new dh(e);
        return Uu(t._query), ua(n, t._query).then((n => new Fu(e, s, t, n)));
    }

    function ph(t, e, n) {
        t = Ia(t, va);
        const s = Ia(t.firestore, La), i = ah(t.converter, e, n);
        return bh(s, [ du(fu(s), "setDoc", t._key, i, null !== t.converter, n).toMutation(t._key, Ye.none()) ]);
    }

    function Th(t, e, n, ...s) {
        t = Ia(t, va);
        const i = Ia(t.firestore, La), r = fu(i);
        let o;
        o = "string" == typeof (
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        e = getModularInstance(e)) || e instanceof eu ? Eu(r, "updateDoc", t._key, e, n, s) : Tu(r, "updateDoc", t._key, e);
        return bh(i, [ o.toMutation(t._key, Ye.exists(!0)) ]);
    }

    /**
     * Add a new document to specified `CollectionReference` with the given data,
     * assigning it a document ID automatically.
     *
     * @param reference - A reference to the collection to add this document to.
     * @param data - An Object containing the data for the new document.
     * @returns A `Promise` resolved with a `DocumentReference` pointing to the
     * newly created document after it has been written to the backend (Note that it
     * won't resolve while you're offline).
     */ function Ih(t, e) {
        const n = Ia(t.firestore, La), s = Na(t), i = ah(t.converter, e);
        return bh(n, [ du(fu(t.firestore), "addDoc", s._key, i, null !== t.converter, {}).toMutation(s._key, Ye.exists(!1)) ]).then((() => s));
    }

    function Ah(t, ...e) {
        var n, s, i;
        t = getModularInstance(t);
        let r = {
            includeMetadataChanges: !1
        }, o = 0;
        "object" != typeof e[o] || Oa(e[o]) || (r = e[o], o++);
        const c = {
            includeMetadataChanges: r.includeMetadataChanges
        };
        if (Oa(e[o])) {
            const t = e[o];
            e[o] = null === (n = t.next) || void 0 === n ? void 0 : n.bind(t), e[o + 1] = null === (s = t.error) || void 0 === s ? void 0 : s.bind(t), 
            e[o + 2] = null === (i = t.complete) || void 0 === i ? void 0 : i.bind(t);
        }
        let a, u, h;
        if (t instanceof va) u = Ia(t.firestore, La), h = ye(t._key.path), a = {
            next: n => {
                e[o] && e[o](Ph(u, t, n));
            },
            error: e[o + 1],
            complete: e[o + 2]
        }; else {
            const n = Ia(t, Va);
            u = Ia(n.firestore, La), h = n._query;
            const s = new dh(u);
            a = {
                next: t => {
                    e[o] && e[o](new Fu(u, s, n, t));
                },
                error: e[o + 1],
                complete: e[o + 2]
            }, Uu(t._query);
        }
        return function(t, e, n, s) {
            const i = new jc(s), r = new Jo(e, i, n);
            return t.asyncQueue.enqueueAndForget((async () => Qo(await sa(t), r))), () => {
                i.nc(), t.asyncQueue.enqueueAndForget((async () => Wo(await sa(t), r)));
            };
        }(qa(u), h, c, a);
    }

    /**
     * Locally writes `mutations` on the async queue.
     * @internal
     */ function bh(t, e) {
        return function(t, e) {
            const n = new W;
            return t.asyncQueue.enqueueAndForget((async () => hc(await na(t), e, n))), n.promise;
        }(qa(t), e);
    }

    /**
     * Converts a {@link ViewSnapshot} that contains the single document specified by `ref`
     * to a {@link DocumentSnapshot}.
     */ function Ph(t, e, n) {
        const s = n.docs.get(e._key), i = new dh(t);
        return new Ou(t, i, e._key, s, new $u(n.hasPendingWrites, n.fromCache), e.converter);
    }

    /**
     * Cloud Firestore
     *
     * @packageDocumentation
     */ !function(t, e = !0) {
        !function(t) {
            N = t;
        }(SDK_VERSION), _registerComponent(new Component("firestore", ((t, {options: n}) => {
            const s = t.getProvider("app").getImmediate(), i = new La(s, new J(t.getProvider("auth-internal")), new tt(t.getProvider("app-check-internal")));
            return n = Object.assign({
                useFetchStreams: e
            }, n), i._setSettings(n), i;
        }), "PUBLIC")), registerVersion(D, "3.4.4", t), 
        // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
        registerVersion(D, "3.4.4", "esm2017");
    }();

    const firebaseConfig = {
      apiKey: "AIzaSyB8KpNHJILsB2erTcBgMuhTHWGJd_rSttk",
      authDomain: "flylinkers-login.firebaseapp.com",
      databaseURL: "https://flylinkers-login-default-rtdb.firebaseio.com",
      projectId: "flylinkers-login",
      storageBucket: "flylinkers-login.appspot.com",
      messagingSenderId: "628867348595",
      appId: "1:628867348595:web:95815a4959b5b5d0fe5206"
    };

    const app$1 = initializeApp(firebaseConfig);

    const db = Ua(app$1); 

    let user;
    let user2;
    let groupId;

    async function getUserToFirestore(data) {
      const userRef = Da(db, 'user');
      const getDoc = await mh(userRef);
      const users = getDoc.docs.map(doc => doc.data());

      let flag = false;

      users.forEach(el => {
        if (el.email === data.email) {
          flag = true;
          user = el;
        }
      });

      if (flag === false) {
        saveUserToFirestore(data);
      }
      return user
    }

    async function getUser(uid){
      const userRef = Da(db, 'user');
      const getDoc = await mh(userRef);
      const users = getDoc.docs.map(doc => doc.data());

      users.forEach(user =>{
        if (user.uid === uid) {
          user2 = user;
        }
      });
      return user2
    }

    async function saveUserToFirestore(data) {

      const collectionId = data.id.toString();

      await ph(Na(db, 'user', collectionId), {
        uid: data.id,
        name: `${data.name} ${data.last_name}`,
        email: data.email,
        groups: []
      });
    }
    const validateGroup = (user, user2) =>{
      groupId = null;
      for (let i = 0; i < user.groups.length; i++) {
        for (let j = 0; j < user2.groups.length; j++) {
          if (user2.groups[j] === user.groups[i] && user.groups[i].length > 0) {
            // console.log(user.groups[i]);
            // console.log(user2.groups[j]);
            groupId = user.groups[i];
          }
        }
      }
      // handleMessage(groupId, flagGroups, user, user2)
      return groupId
    };

    async function newGroup(user1, user2, messageText){

      const groupRef = await Ih(Da(db, "group"), {
        created_by : user1.name,
        users: [user1.uid, user2.uid]
      });
      
      // console.log(groupRef.id);
      // groupId = groupRef.id
      await updateUser(groupRef.id, user1);
      await updateUser(groupRef.id, user2);


      await newMessage(groupRef.id, user1.name, messageText);

    }

    const updateUser = async(groupId, user)=>{
      // console.log(user);
      const collectionId = user.uid.toString();

      let aux = user.groups;
      aux.push(groupId);

      const userDoc = Na(db, 'user', collectionId);
      // console.log(userDoc);
      await Th(userDoc, {
        groups: aux
      });
    };



    const newMessage = async (groupId, sentBy, messageText) =>{
      const date = new Date();
      await Ih(Da(db, `message/${groupId}/messages`), {
        messageText : messageText,
        sentBy: sentBy,
        sentAt: date
      });
    };

    const getMessages = async (groupId) =>{
      const messageRef = Da(db, `message/${groupId}/messages`);
      const orderMessages = Ku(messageRef, Gu('sentAt'));
      const getMessages = await mh(orderMessages);
      const messages = getMessages.docs.map(doc => doc.data());
      return messages
    };

    const getMessage = async (groupId) =>{
      const messageRef = Da(db, `message/${groupId}/messages`);
      const orderMessages = Ku(messageRef, Gu('sentAt', 'desc'), Hu(1));
      const getMessages = await mh(orderMessages);
      const message = getMessages.docs.map(doc => doc.data());
      return message
    };

    // export const getMessages = async(groupId) =>{
    //   const messageRef = collection(db, `message/${groupId}/messages`)
    //   const orderMessages = query(messageRef, orderBy('sentAt'))
    //   let messages =[];

    //   onSnapshot(orderMessages, (doc)=>{

    //     const ref = doc.docs.map(ms => {
    //       return messages.push(ms.data())
    //     })
    //     return messages
    //   })
    //   console.log(messages);
    //   return messages
    // }

    // getMessages('Iry2GjhPNPQivekdHfnq')



    const getGroupUser = async (groupId)=>{
      let chatWhith;
      const groupRef = Da(db, 'group');
      const groupRefId = await mh(groupRef);
      groupRefId.docs.forEach(el => {
        if (el.id === groupId) {
          const members = el._document.data.value.mapValue.fields.users.arrayValue.values;
          members.forEach(id => {
            if (id.integerValue !== user.uid.toString()) {
              chatWhith = id.integerValue;
            }
          });
        }
      });
      return parseInt(chatWhith)
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function isFunction(value) {
        return typeof value === 'function';
    }

    function createErrorClass(createImpl) {
        var _super = function (instance) {
            Error.call(instance);
            instance.stack = new Error().stack;
        };
        var ctorFunc = createImpl(_super);
        ctorFunc.prototype = Object.create(Error.prototype);
        ctorFunc.prototype.constructor = ctorFunc;
        return ctorFunc;
    }

    var UnsubscriptionError = createErrorClass(function (_super) {
        return function UnsubscriptionErrorImpl(errors) {
            _super(this);
            this.message = errors
                ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ')
                : '';
            this.name = 'UnsubscriptionError';
            this.errors = errors;
        };
    });

    function arrRemove(arr, item) {
        if (arr) {
            var index = arr.indexOf(item);
            0 <= index && arr.splice(index, 1);
        }
    }

    var Subscription = (function () {
        function Subscription(initialTeardown) {
            this.initialTeardown = initialTeardown;
            this.closed = false;
            this._parentage = null;
            this._teardowns = null;
        }
        Subscription.prototype.unsubscribe = function () {
            var e_1, _a, e_2, _b;
            var errors;
            if (!this.closed) {
                this.closed = true;
                var _parentage = this._parentage;
                if (_parentage) {
                    this._parentage = null;
                    if (Array.isArray(_parentage)) {
                        try {
                            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                                var parent_1 = _parentage_1_1.value;
                                parent_1.remove(this);
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    }
                    else {
                        _parentage.remove(this);
                    }
                }
                var initialTeardown = this.initialTeardown;
                if (isFunction(initialTeardown)) {
                    try {
                        initialTeardown();
                    }
                    catch (e) {
                        errors = e instanceof UnsubscriptionError ? e.errors : [e];
                    }
                }
                var _teardowns = this._teardowns;
                if (_teardowns) {
                    this._teardowns = null;
                    try {
                        for (var _teardowns_1 = __values(_teardowns), _teardowns_1_1 = _teardowns_1.next(); !_teardowns_1_1.done; _teardowns_1_1 = _teardowns_1.next()) {
                            var teardown_1 = _teardowns_1_1.value;
                            try {
                                execTeardown(teardown_1);
                            }
                            catch (err) {
                                errors = errors !== null && errors !== void 0 ? errors : [];
                                if (err instanceof UnsubscriptionError) {
                                    errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
                                }
                                else {
                                    errors.push(err);
                                }
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_teardowns_1_1 && !_teardowns_1_1.done && (_b = _teardowns_1.return)) _b.call(_teardowns_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                if (errors) {
                    throw new UnsubscriptionError(errors);
                }
            }
        };
        Subscription.prototype.add = function (teardown) {
            var _a;
            if (teardown && teardown !== this) {
                if (this.closed) {
                    execTeardown(teardown);
                }
                else {
                    if (teardown instanceof Subscription) {
                        if (teardown.closed || teardown._hasParent(this)) {
                            return;
                        }
                        teardown._addParent(this);
                    }
                    (this._teardowns = (_a = this._teardowns) !== null && _a !== void 0 ? _a : []).push(teardown);
                }
            }
        };
        Subscription.prototype._hasParent = function (parent) {
            var _parentage = this._parentage;
            return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));
        };
        Subscription.prototype._addParent = function (parent) {
            var _parentage = this._parentage;
            this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
        };
        Subscription.prototype._removeParent = function (parent) {
            var _parentage = this._parentage;
            if (_parentage === parent) {
                this._parentage = null;
            }
            else if (Array.isArray(_parentage)) {
                arrRemove(_parentage, parent);
            }
        };
        Subscription.prototype.remove = function (teardown) {
            var _teardowns = this._teardowns;
            _teardowns && arrRemove(_teardowns, teardown);
            if (teardown instanceof Subscription) {
                teardown._removeParent(this);
            }
        };
        Subscription.EMPTY = (function () {
            var empty = new Subscription();
            empty.closed = true;
            return empty;
        })();
        return Subscription;
    }());
    function isSubscription(value) {
        return (value instanceof Subscription ||
            (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe)));
    }
    function execTeardown(teardown) {
        if (isFunction(teardown)) {
            teardown();
        }
        else {
            teardown.unsubscribe();
        }
    }

    var config = {
        onUnhandledError: null,
        onStoppedNotification: null,
        Promise: undefined,
        useDeprecatedSynchronousErrorHandling: false,
        useDeprecatedNextContext: false,
    };

    var timeoutProvider = {
        setTimeout: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var delegate = timeoutProvider.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) || setTimeout).apply(void 0, __spreadArray([], __read(args)));
        },
        clearTimeout: function (handle) {
            var delegate = timeoutProvider.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
        },
        delegate: undefined,
    };

    function reportUnhandledError(err) {
        timeoutProvider.setTimeout(function () {
            {
                throw err;
            }
        });
    }

    function noop() { }

    var COMPLETE_NOTIFICATION = (function () { return createNotification('C', undefined, undefined); })();
    function errorNotification(error) {
        return createNotification('E', undefined, error);
    }
    function nextNotification(value) {
        return createNotification('N', value, undefined);
    }
    function createNotification(kind, value, error) {
        return {
            kind: kind,
            value: value,
            error: error,
        };
    }

    var context = null;
    function errorContext(cb) {
        if (config.useDeprecatedSynchronousErrorHandling) {
            var isRoot = !context;
            if (isRoot) {
                context = { errorThrown: false, error: null };
            }
            cb();
            if (isRoot) {
                var _a = context, errorThrown = _a.errorThrown, error = _a.error;
                context = null;
                if (errorThrown) {
                    throw error;
                }
            }
        }
        else {
            cb();
        }
    }

    var Subscriber = (function (_super) {
        __extends(Subscriber, _super);
        function Subscriber(destination) {
            var _this = _super.call(this) || this;
            _this.isStopped = false;
            if (destination) {
                _this.destination = destination;
                if (isSubscription(destination)) {
                    destination.add(_this);
                }
            }
            else {
                _this.destination = EMPTY_OBSERVER;
            }
            return _this;
        }
        Subscriber.create = function (next, error, complete) {
            return new SafeSubscriber(next, error, complete);
        };
        Subscriber.prototype.next = function (value) {
            if (this.isStopped) {
                handleStoppedNotification(nextNotification(value), this);
            }
            else {
                this._next(value);
            }
        };
        Subscriber.prototype.error = function (err) {
            if (this.isStopped) {
                handleStoppedNotification(errorNotification(err), this);
            }
            else {
                this.isStopped = true;
                this._error(err);
            }
        };
        Subscriber.prototype.complete = function () {
            if (this.isStopped) {
                handleStoppedNotification(COMPLETE_NOTIFICATION, this);
            }
            else {
                this.isStopped = true;
                this._complete();
            }
        };
        Subscriber.prototype.unsubscribe = function () {
            if (!this.closed) {
                this.isStopped = true;
                _super.prototype.unsubscribe.call(this);
                this.destination = null;
            }
        };
        Subscriber.prototype._next = function (value) {
            this.destination.next(value);
        };
        Subscriber.prototype._error = function (err) {
            try {
                this.destination.error(err);
            }
            finally {
                this.unsubscribe();
            }
        };
        Subscriber.prototype._complete = function () {
            try {
                this.destination.complete();
            }
            finally {
                this.unsubscribe();
            }
        };
        return Subscriber;
    }(Subscription));
    var _bind = Function.prototype.bind;
    function bind(fn, thisArg) {
        return _bind.call(fn, thisArg);
    }
    var ConsumerObserver = (function () {
        function ConsumerObserver(partialObserver) {
            this.partialObserver = partialObserver;
        }
        ConsumerObserver.prototype.next = function (value) {
            var partialObserver = this.partialObserver;
            if (partialObserver.next) {
                try {
                    partialObserver.next(value);
                }
                catch (error) {
                    handleUnhandledError(error);
                }
            }
        };
        ConsumerObserver.prototype.error = function (err) {
            var partialObserver = this.partialObserver;
            if (partialObserver.error) {
                try {
                    partialObserver.error(err);
                }
                catch (error) {
                    handleUnhandledError(error);
                }
            }
            else {
                handleUnhandledError(err);
            }
        };
        ConsumerObserver.prototype.complete = function () {
            var partialObserver = this.partialObserver;
            if (partialObserver.complete) {
                try {
                    partialObserver.complete();
                }
                catch (error) {
                    handleUnhandledError(error);
                }
            }
        };
        return ConsumerObserver;
    }());
    var SafeSubscriber = (function (_super) {
        __extends(SafeSubscriber, _super);
        function SafeSubscriber(observerOrNext, error, complete) {
            var _this = _super.call(this) || this;
            var partialObserver;
            if (isFunction(observerOrNext) || !observerOrNext) {
                partialObserver = {
                    next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined,
                    error: error !== null && error !== void 0 ? error : undefined,
                    complete: complete !== null && complete !== void 0 ? complete : undefined,
                };
            }
            else {
                var context_1;
                if (_this && config.useDeprecatedNextContext) {
                    context_1 = Object.create(observerOrNext);
                    context_1.unsubscribe = function () { return _this.unsubscribe(); };
                    partialObserver = {
                        next: observerOrNext.next && bind(observerOrNext.next, context_1),
                        error: observerOrNext.error && bind(observerOrNext.error, context_1),
                        complete: observerOrNext.complete && bind(observerOrNext.complete, context_1),
                    };
                }
                else {
                    partialObserver = observerOrNext;
                }
            }
            _this.destination = new ConsumerObserver(partialObserver);
            return _this;
        }
        return SafeSubscriber;
    }(Subscriber));
    function handleUnhandledError(error) {
        {
            reportUnhandledError(error);
        }
    }
    function defaultErrorHandler(err) {
        throw err;
    }
    function handleStoppedNotification(notification, subscriber) {
        var onStoppedNotification = config.onStoppedNotification;
        onStoppedNotification && timeoutProvider.setTimeout(function () { return onStoppedNotification(notification, subscriber); });
    }
    var EMPTY_OBSERVER = {
        closed: true,
        next: noop,
        error: defaultErrorHandler,
        complete: noop,
    };

    var observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();

    function identity(x) {
        return x;
    }

    function pipeFromArray(fns) {
        if (fns.length === 0) {
            return identity;
        }
        if (fns.length === 1) {
            return fns[0];
        }
        return function piped(input) {
            return fns.reduce(function (prev, fn) { return fn(prev); }, input);
        };
    }

    var Observable = (function () {
        function Observable(subscribe) {
            if (subscribe) {
                this._subscribe = subscribe;
            }
        }
        Observable.prototype.lift = function (operator) {
            var observable = new Observable();
            observable.source = this;
            observable.operator = operator;
            return observable;
        };
        Observable.prototype.subscribe = function (observerOrNext, error, complete) {
            var _this = this;
            var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
            errorContext(function () {
                var _a = _this, operator = _a.operator, source = _a.source;
                subscriber.add(operator
                    ?
                        operator.call(subscriber, source)
                    : source
                        ?
                            _this._subscribe(subscriber)
                        :
                            _this._trySubscribe(subscriber));
            });
            return subscriber;
        };
        Observable.prototype._trySubscribe = function (sink) {
            try {
                return this._subscribe(sink);
            }
            catch (err) {
                sink.error(err);
            }
        };
        Observable.prototype.forEach = function (next, promiseCtor) {
            var _this = this;
            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
                var subscriber = new SafeSubscriber({
                    next: function (value) {
                        try {
                            next(value);
                        }
                        catch (err) {
                            reject(err);
                            subscriber.unsubscribe();
                        }
                    },
                    error: reject,
                    complete: resolve,
                });
                _this.subscribe(subscriber);
            });
        };
        Observable.prototype._subscribe = function (subscriber) {
            var _a;
            return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
        };
        Observable.prototype[observable] = function () {
            return this;
        };
        Observable.prototype.pipe = function () {
            var operations = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                operations[_i] = arguments[_i];
            }
            return pipeFromArray(operations)(this);
        };
        Observable.prototype.toPromise = function (promiseCtor) {
            var _this = this;
            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
                var value;
                _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });
            });
        };
        Observable.create = function (subscribe) {
            return new Observable(subscribe);
        };
        return Observable;
    }());
    function getPromiseCtor(promiseCtor) {
        var _a;
        return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
    }
    function isObserver(value) {
        return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
    }
    function isSubscriber(value) {
        return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));
    }

    function hasLift(source) {
        return isFunction(source === null || source === void 0 ? void 0 : source.lift);
    }
    function operate(init) {
        return function (source) {
            if (hasLift(source)) {
                return source.lift(function (liftedSource) {
                    try {
                        return init(liftedSource, this);
                    }
                    catch (err) {
                        this.error(err);
                    }
                });
            }
            throw new TypeError('Unable to lift unknown Observable type');
        };
    }

    function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
        return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
    }
    var OperatorSubscriber = (function (_super) {
        __extends(OperatorSubscriber, _super);
        function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
            var _this = _super.call(this, destination) || this;
            _this.onFinalize = onFinalize;
            _this.shouldUnsubscribe = shouldUnsubscribe;
            _this._next = onNext
                ? function (value) {
                    try {
                        onNext(value);
                    }
                    catch (err) {
                        destination.error(err);
                    }
                }
                : _super.prototype._next;
            _this._error = onError
                ? function (err) {
                    try {
                        onError(err);
                    }
                    catch (err) {
                        destination.error(err);
                    }
                    finally {
                        this.unsubscribe();
                    }
                }
                : _super.prototype._error;
            _this._complete = onComplete
                ? function () {
                    try {
                        onComplete();
                    }
                    catch (err) {
                        destination.error(err);
                    }
                    finally {
                        this.unsubscribe();
                    }
                }
                : _super.prototype._complete;
            return _this;
        }
        OperatorSubscriber.prototype.unsubscribe = function () {
            var _a;
            if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
                var closed_1 = this.closed;
                _super.prototype.unsubscribe.call(this);
                !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
            }
        };
        return OperatorSubscriber;
    }(Subscriber));

    function isScheduler(value) {
        return value && isFunction(value.schedule);
    }

    function last(arr) {
        return arr[arr.length - 1];
    }
    function popScheduler(args) {
        return isScheduler(last(args)) ? args.pop() : undefined;
    }

    var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

    function isPromise(value) {
        return isFunction(value === null || value === void 0 ? void 0 : value.then);
    }

    function isInteropObservable(input) {
        return isFunction(input[observable]);
    }

    function isAsyncIterable(obj) {
        return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
    }

    function createInvalidObservableTypeError(input) {
        return new TypeError("You provided " + (input !== null && typeof input === 'object' ? 'an invalid object' : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
    }

    function getSymbolIterator() {
        if (typeof Symbol !== 'function' || !Symbol.iterator) {
            return '@@iterator';
        }
        return Symbol.iterator;
    }
    var iterator = getSymbolIterator();

    function isIterable(input) {
        return isFunction(input === null || input === void 0 ? void 0 : input[iterator]);
    }

    function readableStreamLikeToAsyncGenerator(readableStream) {
        return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
            var reader, _a, value, done;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        reader = readableStream.getReader();
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, , 9, 10]);
                        _b.label = 2;
                    case 2:
                        return [4, __await(reader.read())];
                    case 3:
                        _a = _b.sent(), value = _a.value, done = _a.done;
                        if (!done) return [3, 5];
                        return [4, __await(void 0)];
                    case 4: return [2, _b.sent()];
                    case 5: return [4, __await(value)];
                    case 6: return [4, _b.sent()];
                    case 7:
                        _b.sent();
                        return [3, 2];
                    case 8: return [3, 10];
                    case 9:
                        reader.releaseLock();
                        return [7];
                    case 10: return [2];
                }
            });
        });
    }
    function isReadableStreamLike(obj) {
        return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
    }

    function innerFrom(input) {
        if (input instanceof Observable) {
            return input;
        }
        if (input != null) {
            if (isInteropObservable(input)) {
                return fromInteropObservable(input);
            }
            if (isArrayLike(input)) {
                return fromArrayLike(input);
            }
            if (isPromise(input)) {
                return fromPromise(input);
            }
            if (isAsyncIterable(input)) {
                return fromAsyncIterable(input);
            }
            if (isIterable(input)) {
                return fromIterable(input);
            }
            if (isReadableStreamLike(input)) {
                return fromReadableStreamLike(input);
            }
        }
        throw createInvalidObservableTypeError(input);
    }
    function fromInteropObservable(obj) {
        return new Observable(function (subscriber) {
            var obs = obj[observable]();
            if (isFunction(obs.subscribe)) {
                return obs.subscribe(subscriber);
            }
            throw new TypeError('Provided object does not correctly implement Symbol.observable');
        });
    }
    function fromArrayLike(array) {
        return new Observable(function (subscriber) {
            for (var i = 0; i < array.length && !subscriber.closed; i++) {
                subscriber.next(array[i]);
            }
            subscriber.complete();
        });
    }
    function fromPromise(promise) {
        return new Observable(function (subscriber) {
            promise
                .then(function (value) {
                if (!subscriber.closed) {
                    subscriber.next(value);
                    subscriber.complete();
                }
            }, function (err) { return subscriber.error(err); })
                .then(null, reportUnhandledError);
        });
    }
    function fromIterable(iterable) {
        return new Observable(function (subscriber) {
            var e_1, _a;
            try {
                for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
                    var value = iterable_1_1.value;
                    subscriber.next(value);
                    if (subscriber.closed) {
                        return;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            subscriber.complete();
        });
    }
    function fromAsyncIterable(asyncIterable) {
        return new Observable(function (subscriber) {
            process(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });
        });
    }
    function fromReadableStreamLike(readableStream) {
        return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
    }
    function process(asyncIterable, subscriber) {
        var asyncIterable_1, asyncIterable_1_1;
        var e_2, _a;
        return __awaiter(this, void 0, void 0, function () {
            var value, e_2_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 5, 6, 11]);
                        asyncIterable_1 = __asyncValues(asyncIterable);
                        _b.label = 1;
                    case 1: return [4, asyncIterable_1.next()];
                    case 2:
                        if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
                        value = asyncIterable_1_1.value;
                        subscriber.next(value);
                        if (subscriber.closed) {
                            return [2];
                        }
                        _b.label = 3;
                    case 3: return [3, 1];
                    case 4: return [3, 11];
                    case 5:
                        e_2_1 = _b.sent();
                        e_2 = { error: e_2_1 };
                        return [3, 11];
                    case 6:
                        _b.trys.push([6, , 9, 10]);
                        if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
                        return [4, _a.call(asyncIterable_1)];
                    case 7:
                        _b.sent();
                        _b.label = 8;
                    case 8: return [3, 10];
                    case 9:
                        if (e_2) throw e_2.error;
                        return [7];
                    case 10: return [7];
                    case 11:
                        subscriber.complete();
                        return [2];
                }
            });
        });
    }

    function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
        if (delay === void 0) { delay = 0; }
        if (repeat === void 0) { repeat = false; }
        var scheduleSubscription = scheduler.schedule(function () {
            work();
            if (repeat) {
                parentSubscription.add(this.schedule(null, delay));
            }
            else {
                this.unsubscribe();
            }
        }, delay);
        parentSubscription.add(scheduleSubscription);
        if (!repeat) {
            return scheduleSubscription;
        }
    }

    function observeOn(scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        return operate(function (source, subscriber) {
            source.subscribe(createOperatorSubscriber(subscriber, function (value) { return executeSchedule(subscriber, scheduler, function () { return subscriber.next(value); }, delay); }, function () { return executeSchedule(subscriber, scheduler, function () { return subscriber.complete(); }, delay); }, function (err) { return executeSchedule(subscriber, scheduler, function () { return subscriber.error(err); }, delay); }));
        });
    }

    function subscribeOn(scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        return operate(function (source, subscriber) {
            subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));
        });
    }

    function scheduleObservable(input, scheduler) {
        return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
    }

    function schedulePromise(input, scheduler) {
        return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
    }

    function scheduleArray(input, scheduler) {
        return new Observable(function (subscriber) {
            var i = 0;
            return scheduler.schedule(function () {
                if (i === input.length) {
                    subscriber.complete();
                }
                else {
                    subscriber.next(input[i++]);
                    if (!subscriber.closed) {
                        this.schedule();
                    }
                }
            });
        });
    }

    function scheduleIterable(input, scheduler) {
        return new Observable(function (subscriber) {
            var iterator$1;
            executeSchedule(subscriber, scheduler, function () {
                iterator$1 = input[iterator]();
                executeSchedule(subscriber, scheduler, function () {
                    var _a;
                    var value;
                    var done;
                    try {
                        (_a = iterator$1.next(), value = _a.value, done = _a.done);
                    }
                    catch (err) {
                        subscriber.error(err);
                        return;
                    }
                    if (done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(value);
                    }
                }, 0, true);
            });
            return function () { return isFunction(iterator$1 === null || iterator$1 === void 0 ? void 0 : iterator$1.return) && iterator$1.return(); };
        });
    }

    function scheduleAsyncIterable(input, scheduler) {
        if (!input) {
            throw new Error('Iterable cannot be null');
        }
        return new Observable(function (subscriber) {
            executeSchedule(subscriber, scheduler, function () {
                var iterator = input[Symbol.asyncIterator]();
                executeSchedule(subscriber, scheduler, function () {
                    iterator.next().then(function (result) {
                        if (result.done) {
                            subscriber.complete();
                        }
                        else {
                            subscriber.next(result.value);
                        }
                    });
                }, 0, true);
            });
        });
    }

    function scheduleReadableStreamLike(input, scheduler) {
        return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
    }

    function scheduled(input, scheduler) {
        if (input != null) {
            if (isInteropObservable(input)) {
                return scheduleObservable(input, scheduler);
            }
            if (isArrayLike(input)) {
                return scheduleArray(input, scheduler);
            }
            if (isPromise(input)) {
                return schedulePromise(input, scheduler);
            }
            if (isAsyncIterable(input)) {
                return scheduleAsyncIterable(input, scheduler);
            }
            if (isIterable(input)) {
                return scheduleIterable(input, scheduler);
            }
            if (isReadableStreamLike(input)) {
                return scheduleReadableStreamLike(input, scheduler);
            }
        }
        throw createInvalidObservableTypeError(input);
    }

    function from(input, scheduler) {
        return scheduler ? scheduled(input, scheduler) : innerFrom(input);
    }

    function map(project, thisArg) {
        return operate(function (source, subscriber) {
            var index = 0;
            source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                subscriber.next(project.call(thisArg, value, index++));
            }));
        });
    }

    function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalTeardown) {
        var buffer = [];
        var active = 0;
        var index = 0;
        var isComplete = false;
        var checkComplete = function () {
            if (isComplete && !buffer.length && !active) {
                subscriber.complete();
            }
        };
        var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };
        var doInnerSub = function (value) {
            expand && subscriber.next(value);
            active++;
            var innerComplete = false;
            innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function (innerValue) {
                onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
                if (expand) {
                    outerNext(innerValue);
                }
                else {
                    subscriber.next(innerValue);
                }
            }, function () {
                innerComplete = true;
            }, undefined, function () {
                if (innerComplete) {
                    try {
                        active--;
                        var _loop_1 = function () {
                            var bufferedValue = buffer.shift();
                            if (innerSubScheduler) {
                                executeSchedule(subscriber, innerSubScheduler, function () { return doInnerSub(bufferedValue); });
                            }
                            else {
                                doInnerSub(bufferedValue);
                            }
                        };
                        while (buffer.length && active < concurrent) {
                            _loop_1();
                        }
                        checkComplete();
                    }
                    catch (err) {
                        subscriber.error(err);
                    }
                }
            }));
        };
        source.subscribe(createOperatorSubscriber(subscriber, outerNext, function () {
            isComplete = true;
            checkComplete();
        }));
        return function () {
            additionalTeardown === null || additionalTeardown === void 0 ? void 0 : additionalTeardown();
        };
    }

    function mergeMap(project, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Infinity; }
        if (isFunction(resultSelector)) {
            return mergeMap(function (a, i) { return map(function (b, ii) { return resultSelector(a, b, i, ii); })(innerFrom(project(a, i))); }, concurrent);
        }
        else if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
        }
        return operate(function (source, subscriber) { return mergeInternals(source, subscriber, project, concurrent); });
    }

    function mergeAll(concurrent) {
        if (concurrent === void 0) { concurrent = Infinity; }
        return mergeMap(identity, concurrent);
    }

    function concatAll() {
        return mergeAll(1);
    }

    function concat() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return concatAll()(from(args, popScheduler(args)));
    }

    function startWith() {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        var scheduler = popScheduler(values);
        return operate(function (source, subscriber) {
            (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);
        });
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_OPTIONS = { includeMetadataChanges: false };
    function fromRef(ref, options) {
        if (options === void 0) { options = DEFAULT_OPTIONS; }
        /* eslint-enable @typescript-eslint/no-explicit-any */
        return new Observable(function (subscriber) {
            var unsubscribe = Ah(ref, options, {
                next: subscriber.next.bind(subscriber),
                error: subscriber.error.bind(subscriber),
                complete: subscriber.complete.bind(subscriber),
            });
            return { unsubscribe: unsubscribe };
        });
    }
    function snapToData(snapshot, options) {
        if (options === void 0) { options = {}; }
        // TODO clean up the typings
        var data = snapshot.data();
        // match the behavior of the JS SDK when the snapshot doesn't exist
        // it's possible with data converters too that the user didn't return an object
        if (!snapshot.exists() || typeof data !== 'object' || data === null) {
            return data;
        }
        if (options.idField) {
            data[options.idField] = snapshot.id;
        }
        return data;
    }
    /**
     * Return a stream of document snapshots on a query. These results are in sort order.
     * @param query
     */
    function collection(query) {
        return fromRef(query, { includeMetadataChanges: true }).pipe(map(function (changes) { return changes.docs; }));
    }
    /**
     * Returns a stream of documents mapped to their data payload, and optionally the document ID
     * @param query
     */
    function collectionData(query, options) {
        if (options === void 0) { options = {}; }
        return collection(query).pipe(map(function (arr) {
            return arr.map(function (snap) { return snapToData(snap, options); });
        }));
    }

    /* src/views/Chat.svelte generated by Svelte v3.46.4 */
    const file$o = "src/views/Chat.svelte";

    function get_each_context$a(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	return child_ctx;
    }

    // (174:6) {#if user2}
    function create_if_block_2$4(ctx) {
    	let h6;
    	let t_value = /*user2*/ ctx[1].name + "";
    	let t;

    	const block = {
    		c: function create() {
    			h6 = element("h6");
    			t = text(t_value);
    			set_style(h6, "color", "#fff");
    			attr_dev(h6, "class", "svelte-18rr0de");
    			add_location(h6, file$o, 174, 8, 4042);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h6, anchor);
    			append_dev(h6, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*user2*/ 2 && t_value !== (t_value = /*user2*/ ctx[1].name + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(174:6) {#if user2}",
    		ctx
    	});

    	return block;
    }

    // (192:6) {:else}
    function create_else_block_1$5(ctx) {
    	const block = { c: noop$1, m: noop$1, p: noop$1, d: noop$1 };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$5.name,
    		type: "else",
    		source: "(192:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (184:6) {#if groupId}
    function create_if_block$f(ctx) {
    	let each_1_anchor;
    	let each_value = /*$chats*/ ctx[4];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$a(get_each_context$a(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$chats, user1*/ 17) {
    				each_value = /*$chats*/ ctx[4];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$a(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$a(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(184:6) {#if groupId}",
    		ctx
    	});

    	return block;
    }

    // (188:12) {:else}
    function create_else_block$a(ctx) {
    	let p;
    	let t_value = /*message*/ ctx[12].messageText + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "me svelte-18rr0de");
    			add_location(p, file$o, 188, 14, 4565);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$chats*/ 16 && t_value !== (t_value = /*message*/ ctx[12].messageText + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$a.name,
    		type: "else",
    		source: "(188:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (186:12) {#if message.sentBy !== user1.name}
    function create_if_block_1$7(ctx) {
    	let p;
    	let t_value = /*message*/ ctx[12].messageText + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "friend svelte-18rr0de");
    			add_location(p, file$o, 186, 14, 4487);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$chats*/ 16 && t_value !== (t_value = /*message*/ ctx[12].messageText + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(186:12) {#if message.sentBy !== user1.name}",
    		ctx
    	});

    	return block;
    }

    // (185:10) {#each $chats as message}
    function create_each_block$a(ctx) {
    	let if_block_anchor;

    	function select_block_type_1(ctx, dirty) {
    		if (/*message*/ ctx[12].sentBy !== /*user1*/ ctx[0].name) return create_if_block_1$7;
    		return create_else_block$a;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$a.name,
    		type: "each",
    		source: "(185:10) {#each $chats as message}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$o(ctx) {
    	let div5;
    	let div4;
    	let div1;
    	let t0;
    	let div0;
    	let i0;
    	let t1;
    	let i1;
    	let t2;
    	let div2;
    	let t3;
    	let div3;
    	let input;
    	let t4;
    	let button;
    	let i2;
    	let mounted;
    	let dispose;
    	let if_block0 = /*user2*/ ctx[1] && create_if_block_2$4(ctx);

    	function select_block_type(ctx, dirty) {
    		if (/*groupId*/ ctx[2]) return create_if_block$f;
    		return create_else_block_1$5;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block1 = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div5 = element("div");
    			div4 = element("div");
    			div1 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			div0 = element("div");
    			i0 = element("i");
    			t1 = space();
    			i1 = element("i");
    			t2 = space();
    			div2 = element("div");
    			if_block1.c();
    			t3 = space();
    			div3 = element("div");
    			input = element("input");
    			t4 = space();
    			button = element("button");
    			i2 = element("i");
    			attr_dev(i0, "id", "arrow");
    			attr_dev(i0, "class", "fas fa-arrow-up px-1 rotate svelte-18rr0de");
    			add_location(i0, file$o, 177, 8, 4141);
    			attr_dev(i1, "id", "closeChat");
    			attr_dev(i1, "class", "fas fa-times  svelte-18rr0de");
    			add_location(i1, file$o, 178, 8, 4225);
    			attr_dev(div0, "class", "chat-controller");
    			add_location(div0, file$o, 176, 6, 4103);
    			attr_dev(div1, "class", "header-chat d-flex justify-content-between align-items-center svelte-18rr0de");
    			add_location(div1, file$o, 172, 4, 3940);
    			attr_dev(div2, "id", "messagesContainer");
    			attr_dev(div2, "class", "messages p-3 d-flex flex-column svelte-18rr0de");
    			add_location(div2, file$o, 182, 4, 4299);
    			attr_dev(input, "id", "inputMessage");
    			attr_dev(input, "type", "text");
    			attr_dev(input, "placeholder", "write a message");
    			attr_dev(input, "class", "svelte-18rr0de");
    			add_location(input, file$o, 199, 6, 4945);
    			attr_dev(i2, "class", "fas fa-paper-plane svelte-18rr0de");
    			add_location(i2, file$o, 201, 8, 5126);
    			attr_dev(button, "id", "btnSentMessage");
    			attr_dev(button, "class", "btn-sendMessage svelte-18rr0de");
    			add_location(button, file$o, 200, 6, 5042);
    			attr_dev(div3, "class", "messageText d-flex svelte-18rr0de");
    			add_location(div3, file$o, 198, 4, 4906);
    			attr_dev(div4, "class", "chat col-3 svelte-18rr0de");
    			add_location(div4, file$o, 170, 2, 3910);
    			attr_dev(div5, "id", "chatContainer");
    			attr_dev(div5, "class", "row chat-container minimize-chat svelte-18rr0de");
    			add_location(div5, file$o, 169, 0, 3842);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div4);
    			append_dev(div4, div1);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, i0);
    			append_dev(div0, t1);
    			append_dev(div0, i1);
    			append_dev(div4, t2);
    			append_dev(div4, div2);
    			if_block1.m(div2, null);
    			append_dev(div4, t3);
    			append_dev(div4, div3);
    			append_dev(div3, input);
    			append_dev(div3, t4);
    			append_dev(div3, button);
    			append_dev(button, i2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(i0, "click", /*pickUpTab*/ ctx[5], false, false, false),
    					listen_dev(input, "keyup", /*sendMessage*/ ctx[6], false, false, false),
    					listen_dev(button, "click", /*sendMessage*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*user2*/ ctx[1]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$4(ctx);
    					if_block0.c();
    					if_block0.m(div1, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div2, null);
    				}
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div5);
    			if (if_block0) if_block0.d();
    			if_block1.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let $chats,
    		$$unsubscribe_chats = noop$1,
    		$$subscribe_chats = () => ($$unsubscribe_chats(), $$unsubscribe_chats = subscribe(chats, $$value => $$invalidate(4, $chats = $$value)), chats);

    	$$self.$$.on_destroy.push(() => $$unsubscribe_chats());
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Chat', slots, []);
    	let { id, userMain } = $$props;

    	const pickUpTab = () => {
    		chatContainer.classList.toggle('minimize-chat');

    		if (chatContainer.className.includes('minimize-chat')) {
    			arrow.classList.add('rotate');
    		} else {
    			arrow.classList.remove('rotate');
    		}
    	};

    	let user1;
    	let user2;
    	let groupId;

    	const getUserChat = async () => {
    		$$invalidate(0, user1 = await getUser(userMain));
    		$$invalidate(1, user2 = await getUser(id));
    		$$invalidate(2, groupId = validateGroup(user1, user2));

    		// console.log(groupId);
    		if (groupId) {
    			// console.log('entré al grupo:', groupId);
    			getContainerMessages();
    		} // console.log('group not found');
    	};

    	const scrollChat = () => {
    		const scrollWindow = document.getElementById('messagesContainer');
    		scrollWindow.scrollTop = scrollWindow.scrollHeight - scrollWindow.clientHeight;
    	};

    	const sendMessage = async e => {
    		if (e.key === 'Enter' || e.type === 'click') {
    			if (inputMessage.value !== '') {
    				// console.log(groupId);
    				if (groupId) {
    					newMessage(groupId, user1.name, inputMessage.value);
    				} else {
    					inputMessage.setAttribute('disabled', '');
    					await newGroup(user1, user2, inputMessage.value);
    					await getUserChat();
    					inputMessage.removeAttribute('disabled');
    				}

    				inputMessage.value = '';

    				setTimeout(
    					() => {
    						scrollChat();
    					},
    					50
    				);
    			}
    		}
    	};

    	let chats = writable([]);
    	validate_store(chats, 'chats');
    	$$subscribe_chats();

    	const getContainerMessages = () => {
    		const messageRef = Da(db, `message/${groupId}/messages`);
    		const q = Ku(messageRef, Gu('sentAt'));
    		$$subscribe_chats($$invalidate(3, chats = collectionData(q, 'id').pipe(startWith([]))));
    	};

    	onMount(async () => {
    		await getUserChat();
    		getContainerMessages();

    		setTimeout(
    			() => {
    				scrollChat();
    			},
    			300
    		);
    	});

    	const writable_props = ['id', 'userMain'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Chat> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(7, id = $$props.id);
    		if ('userMain' in $$props) $$invalidate(8, userMain = $$props.userMain);
    	};

    	$$self.$capture_state = () => ({
    		db,
    		getUser,
    		validateGroup,
    		getMessages,
    		getMessage,
    		newMessage,
    		newGroup,
    		collectionData,
    		startWith,
    		collection: Da,
    		orderBy: Gu,
    		query: Ku,
    		writable,
    		onMount,
    		Loader,
    		id,
    		userMain,
    		pickUpTab,
    		user1,
    		user2,
    		groupId,
    		getUserChat,
    		scrollChat,
    		sendMessage,
    		chats,
    		getContainerMessages,
    		$chats
    	});

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(7, id = $$props.id);
    		if ('userMain' in $$props) $$invalidate(8, userMain = $$props.userMain);
    		if ('user1' in $$props) $$invalidate(0, user1 = $$props.user1);
    		if ('user2' in $$props) $$invalidate(1, user2 = $$props.user2);
    		if ('groupId' in $$props) $$invalidate(2, groupId = $$props.groupId);
    		if ('chats' in $$props) $$subscribe_chats($$invalidate(3, chats = $$props.chats));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [user1, user2, groupId, chats, $chats, pickUpTab, sendMessage, id, userMain];
    }

    class Chat extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$o, create_fragment$o, safe_not_equal, { id: 7, userMain: 8 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Chat",
    			options,
    			id: create_fragment$o.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[7] === undefined && !('id' in props)) {
    			console.warn("<Chat> was created without expected prop 'id'");
    		}

    		if (/*userMain*/ ctx[8] === undefined && !('userMain' in props)) {
    			console.warn("<Chat> was created without expected prop 'userMain'");
    		}
    	}

    	get id() {
    		throw new Error("<Chat>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Chat>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get userMain() {
    		throw new Error("<Chat>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userMain(value) {
    		throw new Error("<Chat>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/events-card/Events.svelte generated by Svelte v3.46.4 */
    const file$n = "src/components/events-card/Events.svelte";

    function get_each_context$9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[1] = list[i];
    	return child_ctx;
    }

    // (53:8) {#each data as event}
    function create_each_block$9(ctx) {
    	let event;
    	let current;
    	const event_spread_levels = [/*event*/ ctx[1]];
    	let event_props = {};

    	for (let i = 0; i < event_spread_levels.length; i += 1) {
    		event_props = assign(event_props, event_spread_levels[i]);
    	}

    	event = new Event$2({ props: event_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(event.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(event, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const event_changes = (dirty & /*data*/ 1)
    			? get_spread_update(event_spread_levels, [get_spread_object(/*event*/ ctx[1])])
    			: {};

    			event.$set(event_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(event.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(event.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(event, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$9.name,
    		type: "each",
    		source: "(53:8) {#each data as event}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$n(ctx) {
    	let div3;
    	let div0;
    	let h4;
    	let t1;
    	let div2;
    	let div1;
    	let current;
    	let each_value = /*data*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			h4 = element("h4");
    			h4.textContent = "Upcoming events";
    			t1 = space();
    			div2 = element("div");
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h4, "class", "svelte-1f1lox1");
    			add_location(h4, file$n, 47, 6, 1087);
    			attr_dev(div0, "class", "Events-title mb-3 text-center");
    			add_location(div0, file$n, 46, 4, 1037);
    			attr_dev(div1, "class", "Event");
    			add_location(div1, file$n, 51, 6, 1162);
    			attr_dev(div2, "class", "Events-column");
    			add_location(div2, file$n, 50, 4, 1128);
    			attr_dev(div3, "class", "Events Default-containers d-none d-lg-block px-2 svelte-1f1lox1");
    			add_location(div3, file$n, 45, 0, 970);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div0, h4);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			append_dev(div2, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*data*/ 1) {
    				each_value = /*data*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$9(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$9(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div1, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Events', slots, []);

    	const data = [
    		{
    			title: 'Flight Operation Conferences',
    			eventLogo: '../img/airplane.jpg',
    			date: '10/12/2021',
    			start: '9:00am',
    			end: '11:00pm',
    			place: 'virtual',
    			href: '/',
    			linkName: 'linkedin.com/in/flylinkers.com'
    		},
    		{
    			title: 'Comercial Avitaion Conferences',
    			eventLogo: '../img/airplane.jpg',
    			date: '10/12/2021',
    			start: '9:00am',
    			end: '11:00pm',
    			place: 'virtual',
    			href: '/',
    			linkName: 'linkedin.com/in/flylinkers.com'
    		},
    		{
    			title: 'Comercial Aviation Safety',
    			eventLogo: '../img/airplane.jpg',
    			date: '10/12/2021',
    			start: '9:00am',
    			end: '11:00pm',
    			place: 'virtual',
    			href: '/',
    			linkName: 'linkedin.com/in/flylinkers.com'
    		}
    	];

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Events> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Event: Event$2, Chat, data });
    	return [data];
    }

    class Events extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$n, create_fragment$n, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Events",
    			options,
    			id: create_fragment$n.name
    		});
    	}
    }

    /* src/components/sponsors-card/Sponsor.svelte generated by Svelte v3.46.4 */

    const file$m = "src/components/sponsors-card/Sponsor.svelte";

    function create_fragment$m(ctx) {
    	let div2;
    	let div0;
    	let h6;
    	let t0;
    	let t1;
    	let div1;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			h6 = element("h6");
    			t0 = text(/*sponsorName*/ ctx[0]);
    			t1 = space();
    			div1 = element("div");
    			img = element("img");
    			add_location(h6, file$m, 20, 4, 329);
    			attr_dev(div0, "class", "Sponsor-title svelte-15vjfvm");
    			add_location(div0, file$m, 19, 2, 297);
    			if (!src_url_equal(img.src, img_src_value = /*sponsorlogo*/ ctx[1])) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			attr_dev(img, "class", "svelte-15vjfvm");
    			add_location(img, file$m, 23, 4, 394);
    			attr_dev(div1, "class", "Sponsor-logo svelte-15vjfvm");
    			add_location(div1, file$m, 22, 2, 363);
    			attr_dev(div2, "class", "Sponsor text-center mb-4 svelte-15vjfvm");
    			add_location(div2, file$m, 18, 0, 256);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, h6);
    			append_dev(h6, t0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, img);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*sponsorName*/ 1) set_data_dev(t0, /*sponsorName*/ ctx[0]);

    			if (dirty & /*sponsorlogo*/ 2 && !src_url_equal(img.src, img_src_value = /*sponsorlogo*/ ctx[1])) {
    				attr_dev(img, "src", img_src_value);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Sponsor', slots, []);
    	let { sponsorName, sponsorlogo } = $$props;
    	const writable_props = ['sponsorName', 'sponsorlogo'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Sponsor> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('sponsorName' in $$props) $$invalidate(0, sponsorName = $$props.sponsorName);
    		if ('sponsorlogo' in $$props) $$invalidate(1, sponsorlogo = $$props.sponsorlogo);
    	};

    	$$self.$capture_state = () => ({ sponsorName, sponsorlogo });

    	$$self.$inject_state = $$props => {
    		if ('sponsorName' in $$props) $$invalidate(0, sponsorName = $$props.sponsorName);
    		if ('sponsorlogo' in $$props) $$invalidate(1, sponsorlogo = $$props.sponsorlogo);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [sponsorName, sponsorlogo];
    }

    class Sponsor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$m, create_fragment$m, safe_not_equal, { sponsorName: 0, sponsorlogo: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Sponsor",
    			options,
    			id: create_fragment$m.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*sponsorName*/ ctx[0] === undefined && !('sponsorName' in props)) {
    			console.warn("<Sponsor> was created without expected prop 'sponsorName'");
    		}

    		if (/*sponsorlogo*/ ctx[1] === undefined && !('sponsorlogo' in props)) {
    			console.warn("<Sponsor> was created without expected prop 'sponsorlogo'");
    		}
    	}

    	get sponsorName() {
    		throw new Error("<Sponsor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sponsorName(value) {
    		throw new Error("<Sponsor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sponsorlogo() {
    		throw new Error("<Sponsor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sponsorlogo(value) {
    		throw new Error("<Sponsor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/sponsors-card/Sponsors.svelte generated by Svelte v3.46.4 */
    const file$l = "src/components/sponsors-card/Sponsors.svelte";

    function get_each_context$8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[1] = list[i];
    	return child_ctx;
    }

    // (37:6) {#each data as sponsor}
    function create_each_block$8(ctx) {
    	let sponsor;
    	let current;
    	const sponsor_spread_levels = [/*sponsor*/ ctx[1]];
    	let sponsor_props = {};

    	for (let i = 0; i < sponsor_spread_levels.length; i += 1) {
    		sponsor_props = assign(sponsor_props, sponsor_spread_levels[i]);
    	}

    	sponsor = new Sponsor({ props: sponsor_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(sponsor.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(sponsor, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const sponsor_changes = (dirty & /*data*/ 1)
    			? get_spread_update(sponsor_spread_levels, [get_spread_object(/*sponsor*/ ctx[1])])
    			: {};

    			sponsor.$set(sponsor_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(sponsor.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(sponsor.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(sponsor, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$8.name,
    		type: "each",
    		source: "(37:6) {#each data as sponsor}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let div3;
    	let div0;
    	let h4;
    	let t1;
    	let div2;
    	let div1;
    	let current;
    	let each_value = /*data*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			h4 = element("h4");
    			h4.textContent = "Sponsors";
    			t1 = space();
    			div2 = element("div");
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h4, "class", "svelte-nykxab");
    			add_location(h4, file$l, 32, 4, 654);
    			attr_dev(div0, "class", "Events-title mb-3 text-center");
    			add_location(div0, file$l, 31, 2, 606);
    			attr_dev(div1, "class", "Sponsor");
    			add_location(div1, file$l, 35, 4, 717);
    			attr_dev(div2, "class", "Sponsors-column");
    			add_location(div2, file$l, 34, 2, 683);
    			attr_dev(div3, "class", "Sponsors d-none d-lg-block Default-containers px-3 svelte-nykxab");
    			add_location(div3, file$l, 30, 0, 539);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div0, h4);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			append_dev(div2, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*data*/ 1) {
    				each_value = /*data*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$8(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$8(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div1, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Sponsors', slots, []);

    	const data = [
    		{
    			sponsorName: 'Aeronex Cargo',
    			sponsorlogo: '../img/aeronex-logo.png'
    		},
    		{
    			sponsorName: 'Jet Blue Airways',
    			sponsorlogo: '../img/JetBlue-logo.png'
    		},
    		{
    			sponsorName: 'FlyKargo',
    			sponsorlogo: '../img/FlyKargo-logo.png'
    		},
    		{
    			sponsorName: 'Air Bridge Cargo',
    			sponsorlogo: '../img/AirBridgeCargo-logo.png'
    		}
    	];

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Sponsors> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Sponsor, data });
    	return [data];
    }

    class Sponsors extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$l, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Sponsors",
    			options,
    			id: create_fragment$l.name
    		});
    	}
    }

    /* src/components/people/User.svelte generated by Svelte v3.46.4 */
    const file$k = "src/components/people/User.svelte";

    function create_fragment$k(ctx) {
    	let div2;
    	let a;
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let div1;
    	let p;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let span0;
    	let t5;
    	let t6;
    	let span1;
    	let t7;
    	let a_href_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			a = element("a");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			div1 = element("div");
    			p = element("p");
    			t1 = text(/*name*/ ctx[0]);
    			t2 = space();
    			t3 = text(/*last_name*/ ctx[1]);
    			t4 = space();
    			span0 = element("span");
    			t5 = text(/*title*/ ctx[2]);
    			t6 = space();
    			span1 = element("span");
    			t7 = text(/*email*/ ctx[4]);
    			if (!src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[5] + /*photo*/ ctx[3]))) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			attr_dev(img, "class", "svelte-2pwqh");
    			add_location(img, file$k, 62, 6, 1394);
    			attr_dev(div0, "class", "User-photo svelte-2pwqh");
    			add_location(div0, file$k, 61, 4, 1363);
    			add_location(p, file$k, 65, 6, 1495);
    			attr_dev(span0, "class", "svelte-2pwqh");
    			add_location(span0, file$k, 66, 6, 1527);
    			attr_dev(span1, "class", "svelte-2pwqh");
    			add_location(span1, file$k, 67, 6, 1554);
    			attr_dev(div1, "class", "User-detail d-flex flex-column svelte-2pwqh");
    			add_location(div1, file$k, 64, 4, 1444);
    			attr_dev(a, "href", a_href_value = "/profile/" + /*email*/ ctx[4]);
    			attr_dev(a, "class", "d-flex");
    			add_location(a, file$k, 60, 2, 1296);
    			attr_dev(div2, "class", "User my-3 pb-3 d-flex align-items-center svelte-2pwqh");
    			add_location(div2, file$k, 59, 0, 1215);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, a);
    			append_dev(a, div0);
    			append_dev(div0, img);
    			append_dev(a, t0);
    			append_dev(a, div1);
    			append_dev(div1, p);
    			append_dev(p, t1);
    			append_dev(p, t2);
    			append_dev(p, t3);
    			append_dev(div1, t4);
    			append_dev(div1, span0);
    			append_dev(span0, t5);
    			append_dev(div1, t6);
    			append_dev(div1, span1);
    			append_dev(span1, t7);

    			if (!mounted) {
    				dispose = [
    					action_destroyer(link.call(null, a)),
    					action_destroyer(active.call(null, a)),
    					listen_dev(div2, "click", /*visitProfile*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*urlAPI, photo*/ 40 && !src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[5] + /*photo*/ ctx[3]))) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*name*/ 1) set_data_dev(t1, /*name*/ ctx[0]);
    			if (dirty & /*last_name*/ 2) set_data_dev(t3, /*last_name*/ ctx[1]);
    			if (dirty & /*title*/ 4) set_data_dev(t5, /*title*/ ctx[2]);
    			if (dirty & /*email*/ 16) set_data_dev(t7, /*email*/ ctx[4]);

    			if (dirty & /*email*/ 16 && a_href_value !== (a_href_value = "/profile/" + /*email*/ ctx[4])) {
    				attr_dev(a, "href", a_href_value);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('User', slots, []);
    	let { name, middle_name, last_name, title, photo, email, id, urlAPI } = $$props;

    	const viewUserProfile = email => {
    		window.location.pathname = `profile/${email}`;
    	};

    	const visitProfile = () => {
    		localStorage.setItem('visitProfile', email);
    		window.location.reload();
    	};

    	const writable_props = ['name', 'middle_name', 'last_name', 'title', 'photo', 'email', 'id', 'urlAPI'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<User> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('middle_name' in $$props) $$invalidate(7, middle_name = $$props.middle_name);
    		if ('last_name' in $$props) $$invalidate(1, last_name = $$props.last_name);
    		if ('title' in $$props) $$invalidate(2, title = $$props.title);
    		if ('photo' in $$props) $$invalidate(3, photo = $$props.photo);
    		if ('email' in $$props) $$invalidate(4, email = $$props.email);
    		if ('id' in $$props) $$invalidate(8, id = $$props.id);
    		if ('urlAPI' in $$props) $$invalidate(5, urlAPI = $$props.urlAPI);
    	};

    	$$self.$capture_state = () => ({
    		link,
    		active,
    		name,
    		middle_name,
    		last_name,
    		title,
    		photo,
    		email,
    		id,
    		urlAPI,
    		viewUserProfile,
    		visitProfile
    	});

    	$$self.$inject_state = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('middle_name' in $$props) $$invalidate(7, middle_name = $$props.middle_name);
    		if ('last_name' in $$props) $$invalidate(1, last_name = $$props.last_name);
    		if ('title' in $$props) $$invalidate(2, title = $$props.title);
    		if ('photo' in $$props) $$invalidate(3, photo = $$props.photo);
    		if ('email' in $$props) $$invalidate(4, email = $$props.email);
    		if ('id' in $$props) $$invalidate(8, id = $$props.id);
    		if ('urlAPI' in $$props) $$invalidate(5, urlAPI = $$props.urlAPI);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [name, last_name, title, photo, email, urlAPI, visitProfile, middle_name, id];
    }

    class User extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$k, create_fragment$k, safe_not_equal, {
    			name: 0,
    			middle_name: 7,
    			last_name: 1,
    			title: 2,
    			photo: 3,
    			email: 4,
    			id: 8,
    			urlAPI: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "User",
    			options,
    			id: create_fragment$k.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*name*/ ctx[0] === undefined && !('name' in props)) {
    			console.warn("<User> was created without expected prop 'name'");
    		}

    		if (/*middle_name*/ ctx[7] === undefined && !('middle_name' in props)) {
    			console.warn("<User> was created without expected prop 'middle_name'");
    		}

    		if (/*last_name*/ ctx[1] === undefined && !('last_name' in props)) {
    			console.warn("<User> was created without expected prop 'last_name'");
    		}

    		if (/*title*/ ctx[2] === undefined && !('title' in props)) {
    			console.warn("<User> was created without expected prop 'title'");
    		}

    		if (/*photo*/ ctx[3] === undefined && !('photo' in props)) {
    			console.warn("<User> was created without expected prop 'photo'");
    		}

    		if (/*email*/ ctx[4] === undefined && !('email' in props)) {
    			console.warn("<User> was created without expected prop 'email'");
    		}

    		if (/*id*/ ctx[8] === undefined && !('id' in props)) {
    			console.warn("<User> was created without expected prop 'id'");
    		}

    		if (/*urlAPI*/ ctx[5] === undefined && !('urlAPI' in props)) {
    			console.warn("<User> was created without expected prop 'urlAPI'");
    		}
    	}

    	get name() {
    		throw new Error("<User>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<User>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get middle_name() {
    		throw new Error("<User>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set middle_name(value) {
    		throw new Error("<User>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get last_name() {
    		throw new Error("<User>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set last_name(value) {
    		throw new Error("<User>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<User>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<User>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get photo() {
    		throw new Error("<User>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set photo(value) {
    		throw new Error("<User>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get email() {
    		throw new Error("<User>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set email(value) {
    		throw new Error("<User>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<User>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<User>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlAPI() {
    		throw new Error("<User>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error("<User>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/people/People.svelte generated by Svelte v3.46.4 */
    const file$j = "src/components/people/People.svelte";

    function get_each_context$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i];
    	return child_ctx;
    }

    // (26:6) {#if data}
    function create_if_block$e(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*data*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*data, urlAPI*/ 3) {
    				each_value = /*data*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$7(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$7(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(26:6) {#if data}",
    		ctx
    	});

    	return block;
    }

    // (27:9) {#each data as UserDetails}
    function create_each_block$7(ctx) {
    	let user;
    	let current;
    	const user_spread_levels = [/*UserDetails*/ ctx[4], { urlAPI: /*urlAPI*/ ctx[0] }];
    	let user_props = {};

    	for (let i = 0; i < user_spread_levels.length; i += 1) {
    		user_props = assign(user_props, user_spread_levels[i]);
    	}

    	user = new User({ props: user_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(user.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(user, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const user_changes = (dirty & /*data, urlAPI*/ 3)
    			? get_spread_update(user_spread_levels, [
    					dirty & /*data*/ 2 && get_spread_object(/*UserDetails*/ ctx[4]),
    					dirty & /*urlAPI*/ 1 && { urlAPI: /*urlAPI*/ ctx[0] }
    				])
    			: {};

    			user.$set(user_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(user.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(user.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(user, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$7.name,
    		type: "each",
    		source: "(27:9) {#each data as UserDetails}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let div3;
    	let div0;
    	let h4;
    	let t1;
    	let div2;
    	let div1;
    	let current;
    	let if_block = /*data*/ ctx[1] && create_if_block$e(ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			h4 = element("h4");
    			h4.textContent = "People";
    			t1 = space();
    			div2 = element("div");
    			div1 = element("div");
    			if (if_block) if_block.c();
    			attr_dev(h4, "class", "svelte-12bpm6z");
    			add_location(h4, file$j, 21, 4, 439);
    			attr_dev(div0, "class", "People-Ttitle mb-3 text-center");
    			add_location(div0, file$j, 20, 2, 390);
    			attr_dev(div1, "class", "User");
    			add_location(div1, file$j, 24, 4, 498);
    			attr_dev(div2, "class", "People-column");
    			add_location(div2, file$j, 23, 2, 466);
    			attr_dev(div3, "class", "People Default-containers px-3 svelte-12bpm6z");
    			add_location(div3, file$j, 19, 0, 343);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div0, h4);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			if (if_block) if_block.m(div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*data*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*data*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$e(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('People', slots, []);
    	let { id, urlAPI } = $$props;
    	let data;

    	const getFriends = async () => {
    		const response = await fetch(`${urlAPI}/friend/user/?user=${id}`);
    		const content = await response.json();
    		$$invalidate(1, data = content);
    	};

    	getFriends();
    	const writable_props = ['id', 'urlAPI'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<People> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(2, id = $$props.id);
    		if ('urlAPI' in $$props) $$invalidate(0, urlAPI = $$props.urlAPI);
    	};

    	$$self.$capture_state = () => ({ User, id, urlAPI, data, getFriends });

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(2, id = $$props.id);
    		if ('urlAPI' in $$props) $$invalidate(0, urlAPI = $$props.urlAPI);
    		if ('data' in $$props) $$invalidate(1, data = $$props.data);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [urlAPI, data, id];
    }

    class People extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, { id: 2, urlAPI: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "People",
    			options,
    			id: create_fragment$j.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[2] === undefined && !('id' in props)) {
    			console.warn("<People> was created without expected prop 'id'");
    		}

    		if (/*urlAPI*/ ctx[0] === undefined && !('urlAPI' in props)) {
    			console.warn("<People> was created without expected prop 'urlAPI'");
    		}
    	}

    	get id() {
    		throw new Error("<People>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<People>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlAPI() {
    		throw new Error("<People>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error("<People>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/SidebarRight.svelte generated by Svelte v3.46.4 */
    const file$i = "src/components/SidebarRight.svelte";

    // (21:4) {#if window.location.href.includes('profile')}
    function create_if_block$d(ctx) {
    	let people;
    	let current;

    	people = new People({
    			props: {
    				id: /*id*/ ctx[0],
    				urlAPI: /*urlAPI*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(people.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(people, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const people_changes = {};
    			if (dirty & /*id*/ 1) people_changes.id = /*id*/ ctx[0];
    			if (dirty & /*urlAPI*/ 2) people_changes.urlAPI = /*urlAPI*/ ctx[1];
    			people.$set(people_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(people.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(people.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(people, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(21:4) {#if window.location.href.includes('profile')}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let div1;
    	let div0;
    	let events;
    	let t0;
    	let sponsors;
    	let t1;
    	let show_if = window.location.href.includes('profile');
    	let current;
    	events = new Events({ $$inline: true });
    	sponsors = new Sponsors({ $$inline: true });
    	let if_block = show_if && create_if_block$d(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			create_component(events.$$.fragment);
    			t0 = space();
    			create_component(sponsors.$$.fragment);
    			t1 = space();
    			if (if_block) if_block.c();
    			attr_dev(div0, "class", "Sidebar-container");
    			add_location(div0, file$i, 17, 2, 343);
    			attr_dev(div1, "class", "Sidebar d-none d-lg-block col-3");
    			add_location(div1, file$i, 16, 0, 295);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			mount_component(events, div0, null);
    			append_dev(div0, t0);
    			mount_component(sponsors, div0, null);
    			append_dev(div0, t1);
    			if (if_block) if_block.m(div0, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (show_if) if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(events.$$.fragment, local);
    			transition_in(sponsors.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(events.$$.fragment, local);
    			transition_out(sponsors.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(events);
    			destroy_component(sponsors);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SidebarRight', slots, []);
    	let { id = '', urlAPI } = $$props;
    	const writable_props = ['id', 'urlAPI'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SidebarRight> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    		if ('urlAPI' in $$props) $$invalidate(1, urlAPI = $$props.urlAPI);
    	};

    	$$self.$capture_state = () => ({ Events, Sponsors, People, id, urlAPI });

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    		if ('urlAPI' in $$props) $$invalidate(1, urlAPI = $$props.urlAPI);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [id, urlAPI];
    }

    class SidebarRight extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, { id: 0, urlAPI: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SidebarRight",
    			options,
    			id: create_fragment$i.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*urlAPI*/ ctx[1] === undefined && !('urlAPI' in props)) {
    			console.warn("<SidebarRight> was created without expected prop 'urlAPI'");
    		}
    	}

    	get id() {
    		throw new Error("<SidebarRight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<SidebarRight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlAPI() {
    		throw new Error("<SidebarRight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error("<SidebarRight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/views/Home.svelte generated by Svelte v3.46.4 */
    const file$h = "src/views/Home.svelte";

    // (60:4) {:else}
    function create_else_block$9(ctx) {
    	let loader;
    	let current;
    	loader = new Loader({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(loader.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(loader, target, anchor);
    			current = true;
    		},
    		p: noop$1,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loader.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loader.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(loader, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$9.name,
    		type: "else",
    		source: "(60:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (56:4) {#if id && getUserMainToFirestore}
    function create_if_block$c(ctx) {
    	let sidebarleft;
    	let t0;
    	let timelineh;
    	let t1;
    	let sidebarright;
    	let current;

    	sidebarleft = new SidebarLeft({
    			props: {
    				name: /*name*/ ctx[0],
    				last_name: /*last_name*/ ctx[1],
    				title: /*title*/ ctx[2],
    				photo: /*photo*/ ctx[3],
    				urlAPI: urlAPI$3
    			},
    			$$inline: true
    		});

    	timelineh = new TimelineH({
    			props: { id: /*id*/ ctx[4], urlAPI: urlAPI$3 },
    			$$inline: true
    		});

    	sidebarright = new SidebarRight({ props: { urlAPI: urlAPI$3 }, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(sidebarleft.$$.fragment);
    			t0 = space();
    			create_component(timelineh.$$.fragment);
    			t1 = space();
    			create_component(sidebarright.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(sidebarleft, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(timelineh, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(sidebarright, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const sidebarleft_changes = {};
    			if (dirty & /*name*/ 1) sidebarleft_changes.name = /*name*/ ctx[0];
    			if (dirty & /*last_name*/ 2) sidebarleft_changes.last_name = /*last_name*/ ctx[1];
    			if (dirty & /*title*/ 4) sidebarleft_changes.title = /*title*/ ctx[2];
    			if (dirty & /*photo*/ 8) sidebarleft_changes.photo = /*photo*/ ctx[3];
    			sidebarleft.$set(sidebarleft_changes);
    			const timelineh_changes = {};
    			if (dirty & /*id*/ 16) timelineh_changes.id = /*id*/ ctx[4];
    			timelineh.$set(timelineh_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(sidebarleft.$$.fragment, local);
    			transition_in(timelineh.$$.fragment, local);
    			transition_in(sidebarright.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(sidebarleft.$$.fragment, local);
    			transition_out(timelineh.$$.fragment, local);
    			transition_out(sidebarright.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(sidebarleft, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(timelineh, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(sidebarright, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(56:4) {#if id && getUserMainToFirestore}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block$c, create_else_block$9];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*id*/ ctx[4] && /*getUserMainToFirestore*/ ctx[5]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", "row");
    			add_location(div, file$h, 54, 0, 1538);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_blocks[current_block_type_index].m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const urlAPI$3 = 'https://api.flylinkers.com';

    function instance$h($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Home', slots, []);
    	let name, middle_name, last_name, email, title, photo, id;
    	let userMain;
    	let getUserMainToFirestore;
    	let data;

    	if (!localStorage.getItem('user') || localStorage.getItem('user') === 'null') {
    		const param = window.location.search;
    		const urlParams = new URLSearchParams(param);
    		const user = urlParams.get('user');
    		localStorage.setItem('user', user);
    	}

    	// 
    	const getData = async () => {
    		if (localStorage.getItem('user')) {
    			const response = await fetch(`${urlAPI$3}/user/create/?email=${localStorage.getItem('user')}`, { method: 'GET' });
    			const content = await response.json();
    			data = content[0];
    			await getUserToFirestore(data);
    			$$invalidate(5, getUserMainToFirestore = await getUserToFirestore(data));

    			if (!localStorage.getItem('profilePhoto')) {
    				localStorage.setItem('profilePhoto', data.photo);
    			}

    			userMain = data.id;
    			$$invalidate(0, name = data.name);
    			middle_name = data.middle_name;
    			$$invalidate(1, last_name = data.last_name);
    			email = data.email;
    			$$invalidate(2, title = data.title);
    			$$invalidate(3, photo = data.photo);
    			$$invalidate(4, id = data.id);
    		}
    	};

    	onMount(() => {
    		getData();
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Home> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		SidebarLeft,
    		TimelineH,
    		SidebarRight,
    		Loader,
    		onMount,
    		getUserToFirestore,
    		urlAPI: urlAPI$3,
    		name,
    		middle_name,
    		last_name,
    		email,
    		title,
    		photo,
    		id,
    		userMain,
    		getUserMainToFirestore,
    		data,
    		getData
    	});

    	$$self.$inject_state = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('middle_name' in $$props) middle_name = $$props.middle_name;
    		if ('last_name' in $$props) $$invalidate(1, last_name = $$props.last_name);
    		if ('email' in $$props) email = $$props.email;
    		if ('title' in $$props) $$invalidate(2, title = $$props.title);
    		if ('photo' in $$props) $$invalidate(3, photo = $$props.photo);
    		if ('id' in $$props) $$invalidate(4, id = $$props.id);
    		if ('userMain' in $$props) userMain = $$props.userMain;
    		if ('getUserMainToFirestore' in $$props) $$invalidate(5, getUserMainToFirestore = $$props.getUserMainToFirestore);
    		if ('data' in $$props) data = $$props.data;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [name, last_name, title, photo, id, getUserMainToFirestore];
    }

    class Home extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Home",
    			options,
    			id: create_fragment$h.name
    		});
    	}
    }

    /* src/components/profile/CoverPhoto.svelte generated by Svelte v3.46.4 */

    const file$g = "src/components/profile/CoverPhoto.svelte";

    // (35:2) {#if userId === parseInt(localStorage.getItem('userId'))}
    function create_if_block$b(ctx) {
    	let button;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "Edit cover photo";
    			attr_dev(button, "class", "editCoverPhoto svelte-8ip6o5");
    			attr_dev(button, "data-bs-toggle", "modal");
    			attr_dev(button, "data-bs-target", "#editProfile");
    			attr_dev(button, "aria-hidden", "true");
    			add_location(button, file$g, 35, 4, 701);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(35:2) {#if userId === parseInt(localStorage.getItem('userId'))}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let div;
    	let img;
    	let img_src_value;
    	let t;
    	let show_if = /*userId*/ ctx[1] === parseInt(localStorage.getItem('userId'));
    	let if_block = show_if && create_if_block$b(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			t = space();
    			if (if_block) if_block.c();
    			attr_dev(img, "id", "coverPhotoProfile");
    			if (!src_url_equal(img.src, img_src_value = /*coverPhoto*/ ctx[0])) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			attr_dev(img, "class", "svelte-8ip6o5");
    			add_location(img, file$g, 33, 2, 584);
    			attr_dev(div, "class", "CoverPhoto dropdown svelte-8ip6o5");
    			add_location(div, file$g, 32, 0, 548);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    			append_dev(div, t);
    			if (if_block) if_block.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*coverPhoto*/ 1 && !src_url_equal(img.src, img_src_value = /*coverPhoto*/ ctx[0])) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*userId*/ 2) show_if = /*userId*/ ctx[1] === parseInt(localStorage.getItem('userId'));

    			if (show_if) {
    				if (if_block) ; else {
    					if_block = create_if_block$b(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CoverPhoto', slots, []);
    	let { coverPhoto, userId } = $$props;
    	const urlUser = window.location.pathname;
    	const urluserProfile = urlUser.slice(9);
    	const writable_props = ['coverPhoto', 'userId'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CoverPhoto> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('coverPhoto' in $$props) $$invalidate(0, coverPhoto = $$props.coverPhoto);
    		if ('userId' in $$props) $$invalidate(1, userId = $$props.userId);
    	};

    	$$self.$capture_state = () => ({
    		coverPhoto,
    		userId,
    		urlUser,
    		urluserProfile
    	});

    	$$self.$inject_state = $$props => {
    		if ('coverPhoto' in $$props) $$invalidate(0, coverPhoto = $$props.coverPhoto);
    		if ('userId' in $$props) $$invalidate(1, userId = $$props.userId);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [coverPhoto, userId];
    }

    class CoverPhoto extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, { coverPhoto: 0, userId: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CoverPhoto",
    			options,
    			id: create_fragment$g.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*coverPhoto*/ ctx[0] === undefined && !('coverPhoto' in props)) {
    			console.warn("<CoverPhoto> was created without expected prop 'coverPhoto'");
    		}

    		if (/*userId*/ ctx[1] === undefined && !('userId' in props)) {
    			console.warn("<CoverPhoto> was created without expected prop 'userId'");
    		}
    	}

    	get coverPhoto() {
    		throw new Error("<CoverPhoto>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set coverPhoto(value) {
    		throw new Error("<CoverPhoto>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get userId() {
    		throw new Error("<CoverPhoto>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userId(value) {
    		throw new Error("<CoverPhoto>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Modals/CoverPhotoModal.svelte generated by Svelte v3.46.4 */

    const file$f = "src/components/Modals/CoverPhotoModal.svelte";

    function create_fragment$f(ctx) {
    	let div6;
    	let div5;
    	let div4;
    	let div0;
    	let h5;
    	let t1;
    	let button0;
    	let t2;
    	let div2;
    	let div1;
    	let label;
    	let t4;
    	let input;
    	let t5;
    	let img;
    	let img_src_value;
    	let t6;
    	let div3;
    	let button1;
    	let t8;
    	let button2;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			div5 = element("div");
    			div4 = element("div");
    			div0 = element("div");
    			h5 = element("h5");
    			h5.textContent = "Edit Profile";
    			t1 = space();
    			button0 = element("button");
    			t2 = space();
    			div2 = element("div");
    			div1 = element("div");
    			label = element("label");
    			label.textContent = "Cover photo";
    			t4 = space();
    			input = element("input");
    			t5 = space();
    			img = element("img");
    			t6 = space();
    			div3 = element("div");
    			button1 = element("button");
    			button1.textContent = "Close";
    			t8 = space();
    			button2 = element("button");
    			button2.textContent = "Save cover photo";
    			attr_dev(h5, "class", "modal-title");
    			attr_dev(h5, "id", "editProfileLabel");
    			add_location(h5, file$f, 114, 8, 2852);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "btn-close");
    			attr_dev(button0, "data-bs-dismiss", "modal");
    			attr_dev(button0, "aria-label", "Close");
    			add_location(button0, file$f, 115, 8, 2924);
    			attr_dev(div0, "class", "modal-header");
    			add_location(div0, file$f, 113, 6, 2817);
    			attr_dev(label, "for", "coverPhoto");
    			add_location(label, file$f, 124, 10, 3316);
    			attr_dev(input, "type", "file");
    			attr_dev(input, "name", "coverPhoto");
    			attr_dev(input, "id", "coverPhoto");
    			attr_dev(input, "accept", ".png, .jpg, .jpeg");
    			add_location(input, file$f, 125, 10, 3370);
    			if (!src_url_equal(img.src, img_src_value = "")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			attr_dev(img, "id", "showImage");
    			attr_dev(img, "class", "coverPhotoLoaded svelte-1ulbmgd");
    			add_location(img, file$f, 126, 10, 3486);
    			attr_dev(div1, "class", "cover-photo");
    			add_location(div1, file$f, 123, 8, 3280);
    			attr_dev(div2, "class", "modal-body text-start");
    			add_location(div2, file$f, 118, 6, 3037);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "btn btn-secondary");
    			attr_dev(button1, "data-bs-dismiss", "modal");
    			add_location(button1, file$f, 131, 8, 3616);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "btn btn-outline-primary btn-flylinkers");
    			attr_dev(button2, "data-bs-dismiss", "modal");
    			add_location(button2, file$f, 132, 8, 3711);
    			attr_dev(div3, "class", "modal-footer");
    			add_location(div3, file$f, 130, 6, 3581);
    			attr_dev(div4, "class", "modal-content");
    			add_location(div4, file$f, 111, 4, 2782);
    			attr_dev(div5, "class", "modal-dialog modal-dialog-centered modal-lg");
    			add_location(div5, file$f, 109, 2, 2719);
    			attr_dev(div6, "class", "modal fade");
    			attr_dev(div6, "id", "editProfile");
    			attr_dev(div6, "tabindex", "-1");
    			attr_dev(div6, "aria-labelledby", "editProfileLabel");
    			attr_dev(div6, "aria-hidden", "true");
    			add_location(div6, file$f, 108, 0, 2607);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div0);
    			append_dev(div0, h5);
    			append_dev(div0, t1);
    			append_dev(div0, button0);
    			append_dev(div4, t2);
    			append_dev(div4, div2);
    			append_dev(div2, div1);
    			append_dev(div1, label);
    			append_dev(div1, t4);
    			append_dev(div1, input);
    			append_dev(div1, t5);
    			append_dev(div1, img);
    			append_dev(div4, t6);
    			append_dev(div4, div3);
    			append_dev(div3, button1);
    			append_dev(div3, t8);
    			append_dev(div3, button2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "change", /*showCoverImg*/ ctx[1], false, false, false),
    					listen_dev(
    						button2,
    						"click",
    						function () {
    							if (is_function(/*getProfile*/ ctx[2](/*id*/ ctx[0]))) /*getProfile*/ ctx[2](/*id*/ ctx[0]).apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CoverPhotoModal', slots, []);
    	let coverPhotoB64;
    	let urlCoverPhoto;
    	let idCoverPhoto;
    	let { id, urlAPI } = $$props;

    	const showCoverImg = () => {
    		const render = new FileReader();
    		render.readAsDataURL(coverPhoto.files[0]);

    		render.onloadend = () => {
    			showImage.style.display = 'flex';
    			showImage.src = render.result;
    			coverPhotoB64 = render.result;
    		};
    	};

    	const convertCoverB64 = async () => {
    		const response = await fetch(`${urlAPI}/resources/img/`, {
    			method: 'POST',
    			headers: { 'Content-Type': 'application/json' },
    			body: JSON.stringify({ img: coverPhotoB64 })
    		});

    		const content = await response.json();
    		urlCoverPhoto = content.img;
    		idCoverPhoto = content.id;
    	};

    	const getProfile = async id => {
    		const response = await fetch(`${urlAPI}/user/profile/?user_id=${id}`);
    		const content = await response.json();

    		if (content.Detail === 'User does not exist') {
    			createDataDescription();
    		} else {
    			upDateDataDescription();
    		}
    	};

    	const createDataDescription = async () => {
    		await convertCoverB64();

    		await fetch('${urlAPI}/user/profile/', {
    			method: 'POST',
    			headers: { 'Content-Type': 'application/json' },
    			body: JSON.stringify({
    				user: id,
    				resource_id: idCoverPhoto,
    				about: description.value,
    				cover_img: urlCoverPhoto
    			})
    		});
    	};

    	const upDateDataDescription = async () => {
    		await convertCoverB64();

    		document.getElementById('userDescription').textContent;

    		if (description.value === '') ; else {
    			description.value;
    		}

    		const sendData = await fetch(`${urlAPI}/user/profile/?user=${id}`, {
    			method: 'PUT',
    			headers: { 'Content-Type': 'application/json' },
    			body: JSON.stringify({
    				// about: dataDescription,
    				// resource_id : idCoverPhoto,
    				cover_img: urlCoverPhoto
    			})
    		});

    		const content = await sendData.json();

    		if (content) {
    			localStorage.removeItem('coverPhoto');
    			const cover = document.getElementById('coverPhotoProfile');
    			cover.setAttribute('src', `${urlAPI}${urlCoverPhoto}`);
    		}
    	};

    	const writable_props = ['id', 'urlAPI'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CoverPhotoModal> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    		if ('urlAPI' in $$props) $$invalidate(3, urlAPI = $$props.urlAPI);
    	};

    	$$self.$capture_state = () => ({
    		coverPhotoB64,
    		urlCoverPhoto,
    		idCoverPhoto,
    		id,
    		urlAPI,
    		showCoverImg,
    		convertCoverB64,
    		getProfile,
    		createDataDescription,
    		upDateDataDescription
    	});

    	$$self.$inject_state = $$props => {
    		if ('coverPhotoB64' in $$props) coverPhotoB64 = $$props.coverPhotoB64;
    		if ('urlCoverPhoto' in $$props) urlCoverPhoto = $$props.urlCoverPhoto;
    		if ('idCoverPhoto' in $$props) idCoverPhoto = $$props.idCoverPhoto;
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    		if ('urlAPI' in $$props) $$invalidate(3, urlAPI = $$props.urlAPI);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [id, showCoverImg, getProfile, urlAPI];
    }

    class CoverPhotoModal extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, { id: 0, urlAPI: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CoverPhotoModal",
    			options,
    			id: create_fragment$f.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[0] === undefined && !('id' in props)) {
    			console.warn("<CoverPhotoModal> was created without expected prop 'id'");
    		}

    		if (/*urlAPI*/ ctx[3] === undefined && !('urlAPI' in props)) {
    			console.warn("<CoverPhotoModal> was created without expected prop 'urlAPI'");
    		}
    	}

    	get id() {
    		throw new Error("<CoverPhotoModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<CoverPhotoModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlAPI() {
    		throw new Error("<CoverPhotoModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error("<CoverPhotoModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/profile/UserDetails.svelte generated by Svelte v3.46.4 */

    const { console: console_1$4 } = globals;
    const file$e = "src/components/profile/UserDetails.svelte";

    // (143:14) {#if email === localStorage.getItem('user')}
    function create_if_block_4$2(ctx) {
    	let p;
    	let i;
    	let t;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			p = element("p");
    			i = element("i");
    			t = text("\n                  About me...");
    			attr_dev(i, "class", "fas fa-pen svelte-lxt76k");
    			add_location(i, file$e, 144, 18, 3552);
    			attr_dev(p, "class", "edit-description svelte-lxt76k");
    			add_location(p, file$e, 143, 16, 3478);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, i);
    			append_dev(p, t);

    			if (!mounted) {
    				dispose = listen_dev(p, "click", /*editDescription*/ ctx[10], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$2.name,
    		type: "if",
    		source: "(143:14) {#if email === localStorage.getItem('user')}",
    		ctx
    	});

    	return block;
    }

    // (150:16) {#if aboutMe}
    function create_if_block_3$3(ctx) {
    	let p;
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(/*aboutMe*/ ctx[6]);
    			attr_dev(p, "id", "userDescription");
    			attr_dev(p, "class", "svelte-lxt76k");
    			add_location(p, file$e, 150, 18, 3756);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*aboutMe*/ 64) set_data_dev(t, /*aboutMe*/ ctx[6]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$3.name,
    		type: "if",
    		source: "(150:16) {#if aboutMe}",
    		ctx
    	});

    	return block;
    }

    // (182:8) {:else}
    function create_else_block$8(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let button;
    	let t2;
    	let mounted;
    	let dispose;

    	function select_block_type_1(ctx, dirty) {
    		if (!/*friend*/ ctx[8]) return create_if_block_1$6;
    		return create_else_block_2;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = space();
    			if_block.c();
    			t1 = space();
    			button = element("button");
    			t2 = text("Send a message");
    			attr_dev(div, "class", "d-none");
    			add_location(div, file$e, 182, 10, 5435);
    			attr_dev(button, "id", "btInitChat");
    			attr_dev(button, "data-chat", /*id*/ ctx[5]);
    			attr_dev(button, "class", "btn btn-outline-primary btn-flylinkers align-self-end mt-1 svelte-lxt76k");
    			add_location(button, file$e, 192, 10, 6060);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t0, anchor);
    			if_block.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, button, anchor);
    			append_dev(button, t2);

    			if (!mounted) {
    				dispose = listen_dev(div, "load", /*searchFriends*/ ctx[13](), false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(t1.parentNode, t1);
    				}
    			}

    			if (dirty & /*id*/ 32) {
    				attr_dev(button, "data-chat", /*id*/ ctx[5]);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t0);
    			if_block.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$8.name,
    		type: "else",
    		source: "(182:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (169:8) {#if email === localStorage.getItem('user')}
    function create_if_block$a(ctx) {
    	let p0;
    	let i0;
    	let t0;
    	let t1;
    	let coverphotomodal;
    	let t2;
    	let profilephotomodal;
    	let t3;
    	let div0;
    	let p1;
    	let t4;
    	let span0;
    	let t6;
    	let p2;
    	let t7;
    	let span1;
    	let t9;
    	let div1;
    	let button0;
    	let i1;
    	let t10;
    	let t11;
    	let button1;
    	let current;

    	coverphotomodal = new CoverPhotoModal({
    			props: {
    				id: /*id*/ ctx[5],
    				urlAPI: /*urlAPI*/ ctx[7]
    			},
    			$$inline: true
    		});

    	profilephotomodal = new ProfilePhotoModal({
    			props: {
    				id: /*id*/ ctx[5],
    				urlAPI: /*urlAPI*/ ctx[7]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			p0 = element("p");
    			i0 = element("i");
    			t0 = text(" Edit profile");
    			t1 = space();
    			create_component(coverphotomodal.$$.fragment);
    			t2 = space();
    			create_component(profilephotomodal.$$.fragment);
    			t3 = space();
    			div0 = element("div");
    			p1 = element("p");
    			t4 = text("Who viewed your profile-card ");
    			span0 = element("span");
    			span0.textContent = "3.8K";
    			t6 = space();
    			p2 = element("p");
    			t7 = text("Views of your post ");
    			span1 = element("span");
    			span1.textContent = "3.8K";
    			t9 = space();
    			div1 = element("div");
    			button0 = element("button");
    			i1 = element("i");
    			t10 = text(" I have interest in...");
    			t11 = space();
    			button1 = element("button");
    			button1.textContent = "Add selection";
    			attr_dev(i0, "class", "fas fa-pen svelte-lxt76k");
    			add_location(i0, file$e, 169, 93, 4769);
    			attr_dev(p0, "type", "button");
    			attr_dev(p0, "class", "mb-3");
    			attr_dev(p0, "data-bs-toggle", "modal");
    			attr_dev(p0, "data-bs-target", "#editProfile");
    			add_location(p0, file$e, 169, 10, 4686);
    			attr_dev(span0, "class", "svelte-lxt76k");
    			add_location(span0, file$e, 174, 44, 4994);
    			attr_dev(p1, "class", "svelte-lxt76k");
    			add_location(p1, file$e, 174, 12, 4962);
    			attr_dev(span1, "class", "svelte-lxt76k");
    			add_location(span1, file$e, 175, 34, 5051);
    			attr_dev(p2, "class", "svelte-lxt76k");
    			add_location(p2, file$e, 175, 12, 5029);
    			attr_dev(div0, "class", "Profile-card-statistics");
    			add_location(div0, file$e, 173, 10, 4912);
    			attr_dev(i1, "class", "fas fa-pen svelte-lxt76k");
    			add_location(i1, file$e, 178, 85, 5226);
    			attr_dev(button0, "class", "btn btn-outline-primary btn-flylinkers disabled svelte-lxt76k");
    			button0.disabled = true;
    			add_location(button0, file$e, 178, 12, 5153);
    			attr_dev(button1, "class", "btn btn-outline-primary btn-flylinkers disabled svelte-lxt76k");
    			button1.disabled = true;
    			add_location(button1, file$e, 179, 12, 5296);
    			attr_dev(div1, "class", "Profile-card-buttons mt-5");
    			add_location(div1, file$e, 177, 10, 5101);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p0, anchor);
    			append_dev(p0, i0);
    			append_dev(p0, t0);
    			insert_dev(target, t1, anchor);
    			mount_component(coverphotomodal, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(profilephotomodal, target, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div0, anchor);
    			append_dev(div0, p1);
    			append_dev(p1, t4);
    			append_dev(p1, span0);
    			append_dev(div0, t6);
    			append_dev(div0, p2);
    			append_dev(p2, t7);
    			append_dev(p2, span1);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, button0);
    			append_dev(button0, i1);
    			append_dev(button0, t10);
    			append_dev(div1, t11);
    			append_dev(div1, button1);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const coverphotomodal_changes = {};
    			if (dirty & /*id*/ 32) coverphotomodal_changes.id = /*id*/ ctx[5];
    			if (dirty & /*urlAPI*/ 128) coverphotomodal_changes.urlAPI = /*urlAPI*/ ctx[7];
    			coverphotomodal.$set(coverphotomodal_changes);
    			const profilephotomodal_changes = {};
    			if (dirty & /*id*/ 32) profilephotomodal_changes.id = /*id*/ ctx[5];
    			if (dirty & /*urlAPI*/ 128) profilephotomodal_changes.urlAPI = /*urlAPI*/ ctx[7];
    			profilephotomodal.$set(profilephotomodal_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(coverphotomodal.$$.fragment, local);
    			transition_in(profilephotomodal.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(coverphotomodal.$$.fragment, local);
    			transition_out(profilephotomodal.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t1);
    			destroy_component(coverphotomodal, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(profilephotomodal, detaching);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(169:8) {#if email === localStorage.getItem('user')}",
    		ctx
    	});

    	return block;
    }

    // (190:10) {:else}
    function create_else_block_2(ctx) {
    	let button;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "Friends";
    			attr_dev(button, "class", "btn btn-outline-primary btn-flylinkers align-self-end mt-1 svelte-lxt76k");
    			add_location(button, file$e, 190, 12, 5942);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(190:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (184:10) {#if !friend}
    function create_if_block_1$6(ctx) {
    	let if_block_anchor;

    	function select_block_type_2(ctx, dirty) {
    		if (/*friendRequest*/ ctx[9]) return create_if_block_2$3;
    		return create_else_block_1$4;
    	}

    	let current_block_type = select_block_type_2(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(184:10) {#if !friend}",
    		ctx
    	});

    	return block;
    }

    // (187:14) {:else}
    function create_else_block_1$4(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "Send friend request";
    			attr_dev(button, "id", "btnSendFriendRequest");
    			attr_dev(button, "class", "btn btn-outline-primary btn-flylinkers align-self-end mt-1 svelte-lxt76k");
    			add_location(button, file$e, 187, 16, 5735);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*sendFriendRequest*/ ctx[14], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$4.name,
    		type: "else",
    		source: "(187:14) {:else}",
    		ctx
    	});

    	return block;
    }

    // (185:12) {#if friendRequest}
    function create_if_block_2$3(ctx) {
    	let button;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "Send friend request";
    			attr_dev(button, "id", "btnSendFriendRequest");
    			attr_dev(button, "class", "btn btn-outline-primary btn-flylinkers align-self-end mt-1 svelte-lxt76k");
    			button.disabled = true;
    			add_location(button, file$e, 185, 14, 5558);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(185:12) {#if friendRequest}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let div12;
    	let div11;
    	let div8;
    	let div7;
    	let div6;
    	let userpotho;
    	let t0;
    	let div5;
    	let div0;
    	let h2;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let span;
    	let t5;
    	let t6;
    	let div4;
    	let show_if_1 = /*email*/ ctx[3] === localStorage.getItem('user');
    	let t7;
    	let div2;
    	let t8;
    	let div1;
    	let textarea;
    	let t9;
    	let button;
    	let t11;
    	let div3;
    	let p0;
    	let t13;
    	let p1;
    	let t14;
    	let t15;
    	let div10;
    	let div9;
    	let show_if;
    	let current_block_type_index;
    	let if_block2;
    	let current;
    	let mounted;
    	let dispose;

    	userpotho = new UserPhoto({
    			props: {
    				photo: /*photo*/ ctx[4],
    				urlAPI: /*urlAPI*/ ctx[7],
    				id: /*id*/ ctx[5]
    			},
    			$$inline: true
    		});

    	let if_block0 = show_if_1 && create_if_block_4$2(ctx);
    	let if_block1 = /*aboutMe*/ ctx[6] && create_if_block_3$3(ctx);
    	const if_block_creators = [create_if_block$a, create_else_block$8];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (dirty & /*email*/ 8) show_if = null;
    		if (show_if == null) show_if = !!(/*email*/ ctx[3] === localStorage.getItem('user'));
    		if (show_if) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx, -1);
    	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div12 = element("div");
    			div11 = element("div");
    			div8 = element("div");
    			div7 = element("div");
    			div6 = element("div");
    			create_component(userpotho.$$.fragment);
    			t0 = space();
    			div5 = element("div");
    			div0 = element("div");
    			h2 = element("h2");
    			t1 = text(/*name*/ ctx[0]);
    			t2 = space();
    			t3 = text(/*last_name*/ ctx[1]);
    			t4 = space();
    			span = element("span");
    			t5 = text(/*title*/ ctx[2]);
    			t6 = space();
    			div4 = element("div");
    			if (if_block0) if_block0.c();
    			t7 = space();
    			div2 = element("div");
    			if (if_block1) if_block1.c();
    			t8 = space();
    			div1 = element("div");
    			textarea = element("textarea");
    			t9 = space();
    			button = element("button");
    			button.textContent = "Update";
    			t11 = space();
    			div3 = element("div");
    			p0 = element("p");
    			p0.textContent = "Email";
    			t13 = space();
    			p1 = element("p");
    			t14 = text(/*email*/ ctx[3]);
    			t15 = space();
    			div10 = element("div");
    			div9 = element("div");
    			if_block2.c();
    			attr_dev(h2, "class", "svelte-lxt76k");
    			add_location(h2, file$e, 137, 14, 3218);
    			attr_dev(span, "class", "svelte-lxt76k");
    			add_location(span, file$e, 138, 14, 3260);
    			attr_dev(div0, "class", "Profile-card-user p-3 p-md-0 svelte-lxt76k");
    			add_location(div0, file$e, 136, 12, 3161);
    			attr_dev(textarea, "name", "");
    			attr_dev(textarea, "id", "textArea");
    			attr_dev(textarea, "cols", "30");
    			attr_dev(textarea, "rows", "3");
    			set_style(textarea, "width", "100%");
    			textarea.value = /*aboutMe*/ ctx[6];
    			add_location(textarea, file$e, 153, 18, 3907);
    			attr_dev(button, "class", "btn btn-outline-primary btn-flylinkers m-0 d-flex align-self-end svelte-lxt76k");
    			add_location(button, file$e, 154, 18, 4050);
    			attr_dev(div1, "id", "editAboutMe");
    			attr_dev(div1, "class", "d-none d-flex flex-column");
    			add_location(div1, file$e, 152, 16, 3832);
    			attr_dev(div2, "class", "Profile-description-text my-2");
    			add_location(div2, file$e, 148, 14, 3664);
    			attr_dev(p0, "class", "svelte-lxt76k");
    			add_location(p0, file$e, 158, 16, 4292);
    			set_style(p1, "color", "var(--main-color)");
    			set_style(p1, "cursor", "pointer");
    			attr_dev(p1, "class", "svelte-lxt76k");
    			add_location(p1, file$e, 159, 16, 4321);
    			attr_dev(div3, "class", "Profile-description-contact");
    			add_location(div3, file$e, 157, 14, 4234);
    			attr_dev(div4, "class", "Profile-description px-3 px-md-0 my-3 svelte-lxt76k");
    			add_location(div4, file$e, 141, 12, 3351);
    			attr_dev(div5, "class", "Profile-card-info mt-2 svelte-lxt76k");
    			add_location(div5, file$e, 135, 10, 3112);
    			attr_dev(div6, "class", "Profile-card-content d-flex flex-column");
    			add_location(div6, file$e, 133, 8, 3003);
    			attr_dev(div7, "class", "Profile-card svelte-lxt76k");
    			add_location(div7, file$e, 132, 6, 2968);
    			attr_dev(div8, "class", "col-12 col-lg-6");
    			add_location(div8, file$e, 130, 4, 2931);
    			attr_dev(div9, "class", "Profile-card-text text-end d-flex flex-column align-items-end mt-0 mt-md-3 px-3 px-md-0 svelte-lxt76k");
    			add_location(div9, file$e, 167, 6, 4521);
    			attr_dev(div10, "class", "col-12 col-lg-6");
    			add_location(div10, file$e, 166, 4, 4485);
    			attr_dev(div11, "class", "row");
    			add_location(div11, file$e, 129, 2, 2909);
    			attr_dev(div12, "class", "UserDetails Default-containers mt-3");
    			add_location(div12, file$e, 128, 0, 2857);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div12, anchor);
    			append_dev(div12, div11);
    			append_dev(div11, div8);
    			append_dev(div8, div7);
    			append_dev(div7, div6);
    			mount_component(userpotho, div6, null);
    			append_dev(div6, t0);
    			append_dev(div6, div5);
    			append_dev(div5, div0);
    			append_dev(div0, h2);
    			append_dev(h2, t1);
    			append_dev(h2, t2);
    			append_dev(h2, t3);
    			append_dev(div0, t4);
    			append_dev(div0, span);
    			append_dev(span, t5);
    			append_dev(div5, t6);
    			append_dev(div5, div4);
    			if (if_block0) if_block0.m(div4, null);
    			append_dev(div4, t7);
    			append_dev(div4, div2);
    			if (if_block1) if_block1.m(div2, null);
    			append_dev(div2, t8);
    			append_dev(div2, div1);
    			append_dev(div1, textarea);
    			append_dev(div1, t9);
    			append_dev(div1, button);
    			append_dev(div4, t11);
    			append_dev(div4, div3);
    			append_dev(div3, p0);
    			append_dev(div3, t13);
    			append_dev(div3, p1);
    			append_dev(p1, t14);
    			append_dev(div11, t15);
    			append_dev(div11, div10);
    			append_dev(div10, div9);
    			if_blocks[current_block_type_index].m(div9, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(textarea, "keyup", /*valueTextArea*/ ctx[11], false, false, false),
    					listen_dev(button, "click", /*updateDescription*/ ctx[12], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const userpotho_changes = {};
    			if (dirty & /*photo*/ 16) userpotho_changes.photo = /*photo*/ ctx[4];
    			if (dirty & /*urlAPI*/ 128) userpotho_changes.urlAPI = /*urlAPI*/ ctx[7];
    			if (dirty & /*id*/ 32) userpotho_changes.id = /*id*/ ctx[5];
    			userpotho.$set(userpotho_changes);
    			if (!current || dirty & /*name*/ 1) set_data_dev(t1, /*name*/ ctx[0]);
    			if (!current || dirty & /*last_name*/ 2) set_data_dev(t3, /*last_name*/ ctx[1]);
    			if (!current || dirty & /*title*/ 4) set_data_dev(t5, /*title*/ ctx[2]);
    			if (dirty & /*email*/ 8) show_if_1 = /*email*/ ctx[3] === localStorage.getItem('user');

    			if (show_if_1) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_4$2(ctx);
    					if_block0.c();
    					if_block0.m(div4, t7);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*aboutMe*/ ctx[6]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_3$3(ctx);
    					if_block1.c();
    					if_block1.m(div2, t8);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (!current || dirty & /*aboutMe*/ 64) {
    				prop_dev(textarea, "value", /*aboutMe*/ ctx[6]);
    			}

    			if (!current || dirty & /*email*/ 8) set_data_dev(t14, /*email*/ ctx[3]);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx, dirty);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block2 = if_blocks[current_block_type_index];

    				if (!if_block2) {
    					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block2.c();
    				} else {
    					if_block2.p(ctx, dirty);
    				}

    				transition_in(if_block2, 1);
    				if_block2.m(div9, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(userpotho.$$.fragment, local);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(userpotho.$$.fragment, local);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div12);
    			destroy_component(userpotho);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('UserDetails', slots, []);
    	let { name, last_name, title, email, photo, id, aboutMe, urlAPI } = $$props;
    	let { userMain } = $$props;

    	const editDescription = () => {
    		editAboutMe.classList.toggle('d-none');
    	};

    	let dataDescription;

    	const valueTextArea = e => {
    		dataDescription = e.target.value;
    	};

    	const updateDescription = async () => {
    		const response = await fetch(`${urlAPI}/user/profile/?user=${id}`, {
    			method: 'PUT',
    			headers: { 'Content-Type': 'application/json' },
    			body: JSON.stringify({ about: dataDescription })
    		});

    		const content = response.json();

    		if (content) {
    			userDescription.textContent = dataDescription;
    			editAboutMe.classList.toggle('d-none');
    		}
    	};

    	let friend = false;
    	let friendRequest = false;

    	const searchFriends = async () => {
    		const response = await fetch(`${urlAPI}/friend/user/?user=${userMain}`);
    		const content = await response.json();

    		content.forEach(el => {
    			if (el.id === id) {
    				$$invalidate(8, friend = true);
    			}
    		});

    		const getfriendRequest = await fetch(`${urlAPI}/friend/request/?user_id=${id}`);
    		const requests = await getfriendRequest.json();

    		requests.forEach(el => {
    			if (el.id === userMain) {
    				$$invalidate(9, friendRequest = true);
    			}
    		});
    	};

    	const sendFriendRequest = async () => {
    		const response = await fetch(`${urlAPI}/friend/request/`, {
    			method: 'POST',
    			headers: { 'Content-Type': 'application/json' },
    			body: JSON.stringify({ sender_id: userMain, receptor_id: id })
    		});

    		const content = await response.json();
    		console.log(content);

    		if (content.Detail === 'OK') {
    			btnSendFriendRequest.textContent = "request sent";
    			btnSendFriendRequest.setAttribute('disabled', '');
    		}
    	};

    	const writable_props = [
    		'name',
    		'last_name',
    		'title',
    		'email',
    		'photo',
    		'id',
    		'aboutMe',
    		'urlAPI',
    		'userMain'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$4.warn(`<UserDetails> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('last_name' in $$props) $$invalidate(1, last_name = $$props.last_name);
    		if ('title' in $$props) $$invalidate(2, title = $$props.title);
    		if ('email' in $$props) $$invalidate(3, email = $$props.email);
    		if ('photo' in $$props) $$invalidate(4, photo = $$props.photo);
    		if ('id' in $$props) $$invalidate(5, id = $$props.id);
    		if ('aboutMe' in $$props) $$invalidate(6, aboutMe = $$props.aboutMe);
    		if ('urlAPI' in $$props) $$invalidate(7, urlAPI = $$props.urlAPI);
    		if ('userMain' in $$props) $$invalidate(15, userMain = $$props.userMain);
    	};

    	$$self.$capture_state = () => ({
    		UserPotho: UserPhoto,
    		CoverPhotoModal,
    		ProfilePhotoModal,
    		name,
    		last_name,
    		title,
    		email,
    		photo,
    		id,
    		aboutMe,
    		urlAPI,
    		userMain,
    		editDescription,
    		dataDescription,
    		valueTextArea,
    		updateDescription,
    		friend,
    		friendRequest,
    		searchFriends,
    		sendFriendRequest
    	});

    	$$self.$inject_state = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('last_name' in $$props) $$invalidate(1, last_name = $$props.last_name);
    		if ('title' in $$props) $$invalidate(2, title = $$props.title);
    		if ('email' in $$props) $$invalidate(3, email = $$props.email);
    		if ('photo' in $$props) $$invalidate(4, photo = $$props.photo);
    		if ('id' in $$props) $$invalidate(5, id = $$props.id);
    		if ('aboutMe' in $$props) $$invalidate(6, aboutMe = $$props.aboutMe);
    		if ('urlAPI' in $$props) $$invalidate(7, urlAPI = $$props.urlAPI);
    		if ('userMain' in $$props) $$invalidate(15, userMain = $$props.userMain);
    		if ('dataDescription' in $$props) dataDescription = $$props.dataDescription;
    		if ('friend' in $$props) $$invalidate(8, friend = $$props.friend);
    		if ('friendRequest' in $$props) $$invalidate(9, friendRequest = $$props.friendRequest);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		name,
    		last_name,
    		title,
    		email,
    		photo,
    		id,
    		aboutMe,
    		urlAPI,
    		friend,
    		friendRequest,
    		editDescription,
    		valueTextArea,
    		updateDescription,
    		searchFriends,
    		sendFriendRequest,
    		userMain
    	];
    }

    class UserDetails extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {
    			name: 0,
    			last_name: 1,
    			title: 2,
    			email: 3,
    			photo: 4,
    			id: 5,
    			aboutMe: 6,
    			urlAPI: 7,
    			userMain: 15
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UserDetails",
    			options,
    			id: create_fragment$e.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*name*/ ctx[0] === undefined && !('name' in props)) {
    			console_1$4.warn("<UserDetails> was created without expected prop 'name'");
    		}

    		if (/*last_name*/ ctx[1] === undefined && !('last_name' in props)) {
    			console_1$4.warn("<UserDetails> was created without expected prop 'last_name'");
    		}

    		if (/*title*/ ctx[2] === undefined && !('title' in props)) {
    			console_1$4.warn("<UserDetails> was created without expected prop 'title'");
    		}

    		if (/*email*/ ctx[3] === undefined && !('email' in props)) {
    			console_1$4.warn("<UserDetails> was created without expected prop 'email'");
    		}

    		if (/*photo*/ ctx[4] === undefined && !('photo' in props)) {
    			console_1$4.warn("<UserDetails> was created without expected prop 'photo'");
    		}

    		if (/*id*/ ctx[5] === undefined && !('id' in props)) {
    			console_1$4.warn("<UserDetails> was created without expected prop 'id'");
    		}

    		if (/*aboutMe*/ ctx[6] === undefined && !('aboutMe' in props)) {
    			console_1$4.warn("<UserDetails> was created without expected prop 'aboutMe'");
    		}

    		if (/*urlAPI*/ ctx[7] === undefined && !('urlAPI' in props)) {
    			console_1$4.warn("<UserDetails> was created without expected prop 'urlAPI'");
    		}

    		if (/*userMain*/ ctx[15] === undefined && !('userMain' in props)) {
    			console_1$4.warn("<UserDetails> was created without expected prop 'userMain'");
    		}
    	}

    	get name() {
    		throw new Error("<UserDetails>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<UserDetails>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get last_name() {
    		throw new Error("<UserDetails>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set last_name(value) {
    		throw new Error("<UserDetails>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<UserDetails>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<UserDetails>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get email() {
    		throw new Error("<UserDetails>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set email(value) {
    		throw new Error("<UserDetails>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get photo() {
    		throw new Error("<UserDetails>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set photo(value) {
    		throw new Error("<UserDetails>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<UserDetails>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<UserDetails>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get aboutMe() {
    		throw new Error("<UserDetails>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set aboutMe(value) {
    		throw new Error("<UserDetails>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlAPI() {
    		throw new Error("<UserDetails>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error("<UserDetails>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get userMain() {
    		throw new Error("<UserDetails>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userMain(value) {
    		throw new Error("<UserDetails>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Modals/ExperiencesModal.svelte generated by Svelte v3.46.4 */

    const { console: console_1$3 } = globals;
    const file$d = "src/components/Modals/ExperiencesModal.svelte";

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	return child_ctx;
    }

    function get_each_context_3$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i];
    	return child_ctx;
    }

    function get_each_context_4$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	return child_ctx;
    }

    // (178:20) {#each months as month}
    function create_each_block_4$1(ctx) {
    	let option;
    	let t_value = /*month*/ ctx[16].month + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = /*month*/ ctx[16].value;
    			option.value = option.__value;
    			add_location(option, file$d, 178, 23, 5303);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4$1.name,
    		type: "each",
    		source: "(178:20) {#each months as month}",
    		ctx
    	});

    	return block;
    }

    // (184:20) {#each yearList as year}
    function create_each_block_3$2(ctx) {
    	let option;
    	let t_value = /*year*/ ctx[13] + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = /*year*/ ctx[13];
    			option.value = option.__value;
    			add_location(option, file$d, 184, 22, 5599);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3$2.name,
    		type: "each",
    		source: "(184:20) {#each yearList as year}",
    		ctx
    	});

    	return block;
    }

    // (195:20) {#each months as month}
    function create_each_block_2$2(ctx) {
    	let option;
    	let t_value = /*month*/ ctx[16].month + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = /*month*/ ctx[16].value;
    			option.value = option.__value;
    			add_location(option, file$d, 195, 23, 6043);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$2.name,
    		type: "each",
    		source: "(195:20) {#each months as month}",
    		ctx
    	});

    	return block;
    }

    // (201:20) {#each yearList as year}
    function create_each_block_1$2(ctx) {
    	let option;
    	let t_value = /*year*/ ctx[13] + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = /*year*/ ctx[13];
    			option.value = option.__value;
    			add_location(option, file$d, 201, 22, 6335);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(201:20) {#each yearList as year}",
    		ctx
    	});

    	return block;
    }

    // (225:14) {#each employmentTypeList as employment}
    function create_each_block$6(ctx) {
    	let option;
    	let t_value = /*employment*/ ctx[10] + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = /*employment*/ ctx[10];
    			option.value = option.__value;
    			add_location(option, file$d, 225, 16, 7307);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(225:14) {#each employmentTypeList as employment}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let div14;
    	let div13;
    	let div12;
    	let div0;
    	let h50;
    	let t1;
    	let button0;
    	let t2;
    	let div10;
    	let div1;
    	let h51;
    	let t4;
    	let p;
    	let t6;
    	let div9;
    	let form;
    	let div2;
    	let label0;
    	let t8;
    	let input0;
    	let t9;
    	let div7;
    	let div4;
    	let label1;
    	let t11;
    	let div3;
    	let select0;
    	let t12;
    	let select1;
    	let option0;
    	let t14;
    	let div6;
    	let label2;
    	let t16;
    	let div5;
    	let select2;
    	let t17;
    	let select3;
    	let option1;
    	let t19;
    	let div8;
    	let input1;
    	let t20;
    	let label3;
    	let t22;
    	let label4;
    	let t24;
    	let input2;
    	let t25;
    	let label5;
    	let t27;
    	let input3;
    	let t28;
    	let label6;
    	let t30;
    	let select4;
    	let option2;
    	let t32;
    	let label7;
    	let t34;
    	let textarea;
    	let t35;
    	let div11;
    	let button1;
    	let t37;
    	let button2;
    	let mounted;
    	let dispose;
    	let each_value_4 = /*months*/ ctx[0];
    	validate_each_argument(each_value_4);
    	let each_blocks_4 = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks_4[i] = create_each_block_4$1(get_each_context_4$1(ctx, each_value_4, i));
    	}

    	let each_value_3 = /*yearList*/ ctx[2];
    	validate_each_argument(each_value_3);
    	let each_blocks_3 = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks_3[i] = create_each_block_3$2(get_each_context_3$2(ctx, each_value_3, i));
    	}

    	let each_value_2 = /*months*/ ctx[0];
    	validate_each_argument(each_value_2);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_2[i] = create_each_block_2$2(get_each_context_2$2(ctx, each_value_2, i));
    	}

    	let each_value_1 = /*yearList*/ ctx[2];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	let each_value = /*employmentTypeList*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div14 = element("div");
    			div13 = element("div");
    			div12 = element("div");
    			div0 = element("div");
    			h50 = element("h5");
    			h50.textContent = "Add Experience";
    			t1 = space();
    			button0 = element("button");
    			t2 = space();
    			div10 = element("div");
    			div1 = element("div");
    			h51 = element("h5");
    			h51.textContent = "Where do you currently work?";
    			t4 = space();
    			p = element("p");
    			p.textContent = "* Indicates required";
    			t6 = space();
    			div9 = element("div");
    			form = element("form");
    			div2 = element("div");
    			label0 = element("label");
    			label0.textContent = "Company Name*";
    			t8 = space();
    			input0 = element("input");
    			t9 = space();
    			div7 = element("div");
    			div4 = element("div");
    			label1 = element("label");
    			label1.textContent = "Start date*";
    			t11 = space();
    			div3 = element("div");
    			select0 = element("select");

    			for (let i = 0; i < each_blocks_4.length; i += 1) {
    				each_blocks_4[i].c();
    			}

    			t12 = space();
    			select1 = element("select");
    			option0 = element("option");
    			option0.textContent = "Year";

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].c();
    			}

    			t14 = space();
    			div6 = element("div");
    			label2 = element("label");
    			label2.textContent = "end date*";
    			t16 = space();
    			div5 = element("div");
    			select2 = element("select");

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t17 = space();
    			select3 = element("select");
    			option1 = element("option");
    			option1.textContent = "Year";

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t19 = space();
    			div8 = element("div");
    			input1 = element("input");
    			t20 = space();
    			label3 = element("label");
    			label3.textContent = "I am currently working in this role";
    			t22 = space();
    			label4 = element("label");
    			label4.textContent = "Location*";
    			t24 = space();
    			input2 = element("input");
    			t25 = space();
    			label5 = element("label");
    			label5.textContent = "Title*";
    			t27 = space();
    			input3 = element("input");
    			t28 = space();
    			label6 = element("label");
    			label6.textContent = "Employment type*";
    			t30 = space();
    			select4 = element("select");
    			option2 = element("option");
    			option2.textContent = "Please select";

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t32 = space();
    			label7 = element("label");
    			label7.textContent = "Description*";
    			t34 = space();
    			textarea = element("textarea");
    			t35 = space();
    			div11 = element("div");
    			button1 = element("button");
    			button1.textContent = "Close";
    			t37 = space();
    			button2 = element("button");
    			button2.textContent = "Add experience";
    			attr_dev(h50, "class", "modal-title");
    			attr_dev(h50, "id", "modalExperienceLabel");
    			add_location(h50, file$d, 155, 8, 4287);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "btn-close");
    			attr_dev(button0, "data-bs-dismiss", "modal");
    			attr_dev(button0, "aria-label", "Close");
    			add_location(button0, file$d, 156, 8, 4365);
    			attr_dev(div0, "class", "modal-header");
    			add_location(div0, file$d, 154, 6, 4252);
    			add_location(h51, file$d, 161, 10, 4556);
    			attr_dev(p, "class", "my-3");
    			add_location(p, file$d, 162, 10, 4604);
    			attr_dev(div1, "class", "headModal");
    			add_location(div1, file$d, 160, 8, 4522);
    			attr_dev(label0, "for", "companyName");
    			add_location(label0, file$d, 168, 14, 4777);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "name", "companyName");
    			attr_dev(input0, "id", "companyName");
    			attr_dev(input0, "placeholder", "Ex: FlyLinkers");
    			attr_dev(input0, "class", "svelte-1r8fjdo");
    			add_location(input0, file$d, 169, 16, 4840);
    			attr_dev(div2, "class", "companyName");
    			add_location(div2, file$d, 167, 12, 4737);
    			attr_dev(label1, "for", "startDate");
    			add_location(label1, file$d, 174, 16, 5035);
    			attr_dev(select0, "name", "startDate");
    			attr_dev(select0, "id", "startDate");
    			attr_dev(select0, "class", "me-md-1 mb-3 svelte-1r8fjdo");
    			add_location(select0, file$d, 176, 18, 5174);
    			option0.__value = "0";
    			option0.value = option0.__value;
    			add_location(option0, file$d, 182, 20, 5502);
    			attr_dev(select1, "name", "startYear");
    			attr_dev(select1, "id", "startYear");
    			attr_dev(select1, "class", "mb-3 svelte-1r8fjdo");
    			add_location(select1, file$d, 181, 18, 5428);
    			attr_dev(div3, "class", "workStartDate d-md-flex justify-content-between");
    			add_location(div3, file$d, 175, 16, 5094);
    			attr_dev(div4, "class", "start me-md-1 svelte-1r8fjdo");
    			add_location(div4, file$d, 173, 14, 4991);
    			attr_dev(label2, "for", "endDate");
    			add_location(label2, file$d, 191, 16, 5785);
    			attr_dev(select2, "name", "endDate");
    			attr_dev(select2, "id", "endDate");
    			attr_dev(select2, "class", "me-md-1 mb-3 svelte-1r8fjdo");
    			add_location(select2, file$d, 193, 18, 5918);
    			option1.__value = "0";
    			option1.value = option1.__value;
    			add_location(option1, file$d, 199, 20, 6238);
    			attr_dev(select3, "name", "endYear");
    			attr_dev(select3, "id", "endYear");
    			attr_dev(select3, "class", "mb-3 svelte-1r8fjdo");
    			add_location(select3, file$d, 198, 18, 6168);
    			attr_dev(div5, "class", "workEndDate d-md-flex justify-content-between");
    			add_location(div5, file$d, 192, 16, 5840);
    			attr_dev(div6, "class", "end svelte-1r8fjdo");
    			add_location(div6, file$d, 190, 14, 5751);
    			attr_dev(div7, "class", "dates svelte-1r8fjdo");
    			add_location(div7, file$d, 172, 12, 4957);
    			attr_dev(input1, "type", "checkbox");
    			attr_dev(input1, "name", "working");
    			attr_dev(input1, "id", "working");
    			attr_dev(input1, "class", "svelte-1r8fjdo");
    			add_location(input1, file$d, 209, 14, 6566);
    			attr_dev(label3, "for", "working");
    			add_location(label3, file$d, 210, 14, 6657);
    			attr_dev(div8, "class", "working d-flex align-items-center");
    			add_location(div8, file$d, 208, 12, 6504);
    			attr_dev(label4, "for", "country");
    			add_location(label4, file$d, 215, 12, 6786);
    			attr_dev(input2, "type", "text");
    			attr_dev(input2, "name", "country");
    			attr_dev(input2, "id", "country");
    			attr_dev(input2, "placeholder", "Ex: Colombia");
    			attr_dev(input2, "class", "svelte-1r8fjdo");
    			add_location(input2, file$d, 216, 12, 6837);
    			attr_dev(label5, "for", "title");
    			add_location(label5, file$d, 218, 12, 6925);
    			attr_dev(input3, "type", "text");
    			attr_dev(input3, "name", "title");
    			attr_dev(input3, "id", "title");
    			attr_dev(input3, "placeholder", "Ex: Manager");
    			attr_dev(input3, "class", "svelte-1r8fjdo");
    			add_location(input3, file$d, 219, 12, 6971);
    			attr_dev(label6, "for", "employmentType");
    			add_location(label6, file$d, 221, 12, 7054);
    			option2.__value = "pleaseSelect";
    			option2.value = option2.__value;
    			add_location(option2, file$d, 223, 14, 7184);
    			attr_dev(select4, "name", "employmentType");
    			attr_dev(select4, "id", "employmentType");
    			attr_dev(select4, "class", "svelte-1r8fjdo");
    			add_location(select4, file$d, 222, 12, 7119);
    			attr_dev(label7, "for", "description");
    			add_location(label7, file$d, 229, 12, 7413);
    			attr_dev(textarea, "name", "description");
    			attr_dev(textarea, "id", "description");
    			attr_dev(textarea, "cols", "30");
    			attr_dev(textarea, "rows", "5");
    			attr_dev(textarea, "class", "svelte-1r8fjdo");
    			add_location(textarea, file$d, 230, 12, 7471);
    			attr_dev(form, "action", "");
    			attr_dev(form, "class", "svelte-1r8fjdo");
    			add_location(form, file$d, 166, 10, 4708);
    			attr_dev(div9, "class", "formExperience");
    			add_location(div9, file$d, 165, 8, 4669);
    			attr_dev(div10, "class", "modal-body text-start");
    			add_location(div10, file$d, 158, 6, 4477);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "btn btn-secondary");
    			attr_dev(button1, "data-bs-dismiss", "modal");
    			add_location(button1, file$d, 236, 8, 7636);
    			attr_dev(button2, "id", "btnAddExperience");
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "btn btn-primary");
    			add_location(button2, file$d, 237, 8, 7731);
    			attr_dev(div11, "class", "modal-footer");
    			add_location(div11, file$d, 235, 6, 7601);
    			attr_dev(div12, "class", "modal-content svelte-1r8fjdo");
    			add_location(div12, file$d, 153, 4, 4218);
    			attr_dev(div13, "class", "modal-dialog modal-dialog-centered modal-lg");
    			add_location(div13, file$d, 152, 2, 4156);
    			attr_dev(div14, "class", "modal fade");
    			attr_dev(div14, "id", "modalExperience");
    			attr_dev(div14, "tabindex", "-1");
    			attr_dev(div14, "aria-labelledby", "modalExperienceLabel");
    			attr_dev(div14, "aria-hidden", "true");
    			add_location(div14, file$d, 151, 0, 4036);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div14, anchor);
    			append_dev(div14, div13);
    			append_dev(div13, div12);
    			append_dev(div12, div0);
    			append_dev(div0, h50);
    			append_dev(div0, t1);
    			append_dev(div0, button0);
    			append_dev(div12, t2);
    			append_dev(div12, div10);
    			append_dev(div10, div1);
    			append_dev(div1, h51);
    			append_dev(div1, t4);
    			append_dev(div1, p);
    			append_dev(div10, t6);
    			append_dev(div10, div9);
    			append_dev(div9, form);
    			append_dev(form, div2);
    			append_dev(div2, label0);
    			append_dev(div2, t8);
    			append_dev(div2, input0);
    			append_dev(form, t9);
    			append_dev(form, div7);
    			append_dev(div7, div4);
    			append_dev(div4, label1);
    			append_dev(div4, t11);
    			append_dev(div4, div3);
    			append_dev(div3, select0);

    			for (let i = 0; i < each_blocks_4.length; i += 1) {
    				each_blocks_4[i].m(select0, null);
    			}

    			append_dev(div3, t12);
    			append_dev(div3, select1);
    			append_dev(select1, option0);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].m(select1, null);
    			}

    			append_dev(div7, t14);
    			append_dev(div7, div6);
    			append_dev(div6, label2);
    			append_dev(div6, t16);
    			append_dev(div6, div5);
    			append_dev(div5, select2);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(select2, null);
    			}

    			append_dev(div5, t17);
    			append_dev(div5, select3);
    			append_dev(select3, option1);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(select3, null);
    			}

    			append_dev(form, t19);
    			append_dev(form, div8);
    			append_dev(div8, input1);
    			append_dev(div8, t20);
    			append_dev(div8, label3);
    			append_dev(form, t22);
    			append_dev(form, label4);
    			append_dev(form, t24);
    			append_dev(form, input2);
    			append_dev(form, t25);
    			append_dev(form, label5);
    			append_dev(form, t27);
    			append_dev(form, input3);
    			append_dev(form, t28);
    			append_dev(form, label6);
    			append_dev(form, t30);
    			append_dev(form, select4);
    			append_dev(select4, option2);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select4, null);
    			}

    			append_dev(form, t32);
    			append_dev(form, label7);
    			append_dev(form, t34);
    			append_dev(form, textarea);
    			append_dev(div12, t35);
    			append_dev(div12, div11);
    			append_dev(div11, button1);
    			append_dev(div11, t37);
    			append_dev(div11, button2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input1, "click", /*toggleEndDate*/ ctx[4], false, false, false),
    					listen_dev(button2, "click", /*addExpreience*/ ctx[3], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*months*/ 1) {
    				each_value_4 = /*months*/ ctx[0];
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4$1(ctx, each_value_4, i);

    					if (each_blocks_4[i]) {
    						each_blocks_4[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_4[i] = create_each_block_4$1(child_ctx);
    						each_blocks_4[i].c();
    						each_blocks_4[i].m(select0, null);
    					}
    				}

    				for (; i < each_blocks_4.length; i += 1) {
    					each_blocks_4[i].d(1);
    				}

    				each_blocks_4.length = each_value_4.length;
    			}

    			if (dirty & /*yearList*/ 4) {
    				each_value_3 = /*yearList*/ ctx[2];
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3$2(ctx, each_value_3, i);

    					if (each_blocks_3[i]) {
    						each_blocks_3[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_3[i] = create_each_block_3$2(child_ctx);
    						each_blocks_3[i].c();
    						each_blocks_3[i].m(select1, null);
    					}
    				}

    				for (; i < each_blocks_3.length; i += 1) {
    					each_blocks_3[i].d(1);
    				}

    				each_blocks_3.length = each_value_3.length;
    			}

    			if (dirty & /*months*/ 1) {
    				each_value_2 = /*months*/ ctx[0];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$2(ctx, each_value_2, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_2[i] = create_each_block_2$2(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(select2, null);
    					}
    				}

    				for (; i < each_blocks_2.length; i += 1) {
    					each_blocks_2[i].d(1);
    				}

    				each_blocks_2.length = each_value_2.length;
    			}

    			if (dirty & /*yearList*/ 4) {
    				each_value_1 = /*yearList*/ ctx[2];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$2(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(select3, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*employmentTypeList*/ 2) {
    				each_value = /*employmentTypeList*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select4, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div14);
    			destroy_each(each_blocks_4, detaching);
    			destroy_each(each_blocks_3, detaching);
    			destroy_each(each_blocks_2, detaching);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const yearStart$1 = 1922;

    function instance$d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ExperiencesModal', slots, []);
    	let { userProfile, urlAPI } = $$props;

    	const months = [
    		{ value: '0', month: 'Please select' },
    		{ value: '1', month: 'January' },
    		{ value: '2', month: 'February' },
    		{ value: '3', month: 'March' },
    		{ value: '4', month: 'April' },
    		{ value: '5', month: 'May' },
    		{ value: '6', month: 'June' },
    		{ value: '7', month: 'July' },
    		{ value: '8', month: 'August' },
    		{ value: '9', month: 'September' },
    		{ value: '10', month: 'October' },
    		{ value: '11', month: 'November' },
    		{ value: '12', month: 'December' }
    	];

    	const employmentTypeList = [
    		'Full-time',
    		'Part-time',
    		'Self-employed',
    		'Freelance',
    		'Contract',
    		'InternShip',
    		'Apprenticeship',
    		'Seasonal'
    	];

    	const today = new Date();
    	const yearCurrent = today.getFullYear();
    	const yearList = [];

    	for (let i = yearCurrent; i >= yearStart$1; i--) {
    		yearList.push(i);
    	}

    	const addExpreience = () => {
    		const company_name = companyName.value;
    		let start_date = '';

    		startYear.value !== "0" && startDate.value !== "0"
    		? start_date = [parseInt(startYear.value), parseInt(startDate.value)]
    		: start_date = '';

    		let workingCheck = 0;
    		working.checked ? workingCheck = 1 : workingCheck = 0;
    		let end_date = '';

    		endYear.value !== '0' && endDate.value !== '0'
    		? end_date = [parseInt(endYear.value), parseInt(endDate.value)]
    		: end_date = '';

    		const location = country.value;
    		const titleJob = title.value;
    		let employment_type = '';

    		employmentType.value === 'pleaseSelect'
    		? employment_type = ''
    		: employment_type = employmentType.value;

    		const descriptionJob = description.value;

    		// console.log(
    		//   userProfile,
    		//   company_name,
    		//   start_date,
    		//   workingCheck,
    		//   end_date,
    		//   location,
    		//   titleJob,
    		//   employment_type,
    		//   descriptionJob
    		// );
    		if (userProfile !== '' && company_name !== '' && start_date !== '' && workingCheck !== '' && end_date !== '' && location !== '' && titleJob !== '' && employment_type !== '' && descriptionJob) {
    			let templateExperience;

    			if (workingCheck === 0) {
    				templateExperience = {
    					"profile": userProfile,
    					company_name,
    					start_date,
    					"working": 0,
    					end_date,
    					location,
    					"title": titleJob,
    					employment_type,
    					"description": descriptionJob
    				};
    			}

    			if (workingCheck === 1) {
    				templateExperience = {
    					"profile": userProfile,
    					company_name,
    					start_date,
    					"working": 1,
    					location,
    					"title": titleJob,
    					employment_type,
    					"description": descriptionJob
    				};
    			}

    			console.log(templateExperience);
    			addNewExperience(templateExperience);
    		} else {
    			console.log('please complete all the fields');
    		}
    	};

    	const toggleEndDate = () => {
    		if (working.checked) {
    			endYear.setAttribute('disabled', '');
    			endDate.setAttribute('disabled', '');
    		} else {
    			endYear.removeAttribute('disabled', '');
    			endDate.removeAttribute('disabled', '');
    		}
    	};

    	async function addNewExperience(templateExperience) {
    		console.log(templateExperience);

    		const postExperience = await fetch(`${urlAPI}/user/experience/`, {
    			method: 'POST',
    			headers: { "Content-Type": "application/json" },
    			body: JSON.stringify({ templateExperience })
    		});

    		const content = await postExperience.json();
    		console.log(content);
    	}

    	const writable_props = ['userProfile', 'urlAPI'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$3.warn(`<ExperiencesModal> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('userProfile' in $$props) $$invalidate(5, userProfile = $$props.userProfile);
    		if ('urlAPI' in $$props) $$invalidate(6, urlAPI = $$props.urlAPI);
    	};

    	$$self.$capture_state = () => ({
    		userProfile,
    		urlAPI,
    		months,
    		employmentTypeList,
    		yearStart: yearStart$1,
    		today,
    		yearCurrent,
    		yearList,
    		addExpreience,
    		toggleEndDate,
    		addNewExperience
    	});

    	$$self.$inject_state = $$props => {
    		if ('userProfile' in $$props) $$invalidate(5, userProfile = $$props.userProfile);
    		if ('urlAPI' in $$props) $$invalidate(6, urlAPI = $$props.urlAPI);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		months,
    		employmentTypeList,
    		yearList,
    		addExpreience,
    		toggleEndDate,
    		userProfile,
    		urlAPI
    	];
    }

    class ExperiencesModal extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, { userProfile: 5, urlAPI: 6 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ExperiencesModal",
    			options,
    			id: create_fragment$d.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*userProfile*/ ctx[5] === undefined && !('userProfile' in props)) {
    			console_1$3.warn("<ExperiencesModal> was created without expected prop 'userProfile'");
    		}

    		if (/*urlAPI*/ ctx[6] === undefined && !('urlAPI' in props)) {
    			console_1$3.warn("<ExperiencesModal> was created without expected prop 'urlAPI'");
    		}
    	}

    	get userProfile() {
    		throw new Error("<ExperiencesModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userProfile(value) {
    		throw new Error("<ExperiencesModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlAPI() {
    		throw new Error("<ExperiencesModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error("<ExperiencesModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Modals/UpdateExperienceModal.svelte generated by Svelte v3.46.4 */

    const { console: console_1$2 } = globals;
    const file$c = "src/components/Modals/UpdateExperienceModal.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	return child_ctx;
    }

    function get_each_context_3$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[18] = list[i];
    	return child_ctx;
    }

    function get_each_context_4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[18] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	return child_ctx;
    }

    function get_each_context_5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[18] = list[i];
    	return child_ctx;
    }

    function get_each_context_6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	return child_ctx;
    }

    // (203:22) {#if monthData === month.value}
    function create_if_block_3$2(ctx) {
    	let option;
    	let t_value = /*month*/ ctx[21].month + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.selected = true;
    			option.__value = /*month*/ ctx[21].value;
    			option.value = option.__value;
    			add_location(option, file$c, 203, 24, 6546);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(203:22) {#if monthData === month.value}",
    		ctx
    	});

    	return block;
    }

    // (202:20) {#each months as month}
    function create_each_block_6(ctx) {
    	let option;
    	let t_value = /*month*/ ctx[21].month + "";
    	let t;
    	let if_block = /*monthData*/ ctx[3] === /*month*/ ctx[21].value && create_if_block_3$2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			option = element("option");
    			t = text(t_value);
    			option.__value = /*month*/ ctx[21].value;
    			option.value = option.__value;
    			add_location(option, file$c, 205, 22, 6656);
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (/*monthData*/ ctx[3] === /*month*/ ctx[21].value) if_block.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_6.name,
    		type: "each",
    		source: "(202:20) {#each months as month}",
    		ctx
    	});

    	return block;
    }

    // (212:22) {#if parseInt(yearData) === year}
    function create_if_block_2$2(ctx) {
    	let option;
    	let t_value = /*year*/ ctx[18] + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.selected = true;
    			option.__value = /*year*/ ctx[18];
    			option.value = option.__value;
    			add_location(option, file$c, 212, 24, 7010);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(212:22) {#if parseInt(yearData) === year}",
    		ctx
    	});

    	return block;
    }

    // (211:20) {#each yearList as year}
    function create_each_block_5(ctx) {
    	let show_if = parseInt(/*yearData*/ ctx[2]) === /*year*/ ctx[18];
    	let option;
    	let t_value = /*year*/ ctx[18] + "";
    	let t;
    	let if_block = show_if && create_if_block_2$2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			option = element("option");
    			t = text(t_value);
    			option.__value = /*year*/ ctx[18];
    			option.value = option.__value;
    			add_location(option, file$c, 214, 22, 7106);
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (show_if) if_block.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_5.name,
    		type: "each",
    		source: "(211:20) {#each yearList as year}",
    		ctx
    	});

    	return block;
    }

    // (236:18) {:else}
    function create_else_block$7(ctx) {
    	let select0;
    	let select0_name_value;
    	let select0_id_value;
    	let t0;
    	let select1;
    	let option;
    	let t2_value = console.log(parseInt(/*yearEndData*/ ctx[1])) + "";
    	let t2;
    	let select1_name_value;
    	let select1_id_value;
    	let each_value_4 = /*months*/ ctx[4];
    	validate_each_argument(each_value_4);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks_1[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
    	}

    	let each_value_3 = /*yearList*/ ctx[6];
    	validate_each_argument(each_value_3);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks[i] = create_each_block_3$1(get_each_context_3$1(ctx, each_value_3, i));
    	}

    	const block = {
    		c: function create() {
    			select0 = element("select");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t0 = space();
    			select1 = element("select");
    			option = element("option");
    			option.textContent = "Year";
    			t2 = text(t2_value);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(select0, "name", select0_name_value = "endDate" + /*experience*/ ctx[0].id);
    			attr_dev(select0, "id", select0_id_value = "endDate" + /*experience*/ ctx[0].id);
    			attr_dev(select0, "class", "me-md-1 mb-3 svelte-1r8fjdo");
    			add_location(select0, file$c, 236, 21, 8135);
    			option.__value = "0";
    			option.value = option.__value;
    			add_location(option, file$c, 242, 22, 8532);
    			attr_dev(select1, "name", select1_name_value = "endYear" + /*experience*/ ctx[0].id);
    			attr_dev(select1, "id", select1_id_value = "endYear" + /*experience*/ ctx[0].id);
    			attr_dev(select1, "class", "mb-3 svelte-1r8fjdo");
    			add_location(select1, file$c, 241, 21, 8430);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, select0, anchor);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(select0, null);
    			}

    			insert_dev(target, t0, anchor);
    			insert_dev(target, select1, anchor);
    			append_dev(select1, option);
    			append_dev(select1, t2);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select1, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*months*/ 16) {
    				each_value_4 = /*months*/ ctx[4];
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4(ctx, each_value_4, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_4(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(select0, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_4.length;
    			}

    			if (dirty[0] & /*experience*/ 1 && select0_name_value !== (select0_name_value = "endDate" + /*experience*/ ctx[0].id)) {
    				attr_dev(select0, "name", select0_name_value);
    			}

    			if (dirty[0] & /*experience*/ 1 && select0_id_value !== (select0_id_value = "endDate" + /*experience*/ ctx[0].id)) {
    				attr_dev(select0, "id", select0_id_value);
    			}

    			if (dirty[0] & /*yearEndData*/ 2 && t2_value !== (t2_value = console.log(parseInt(/*yearEndData*/ ctx[1])) + "")) set_data_dev(t2, t2_value);

    			if (dirty[0] & /*yearList, yearEndData*/ 66) {
    				each_value_3 = /*yearList*/ ctx[6];
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3$1(ctx, each_value_3, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_3$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_3.length;
    			}

    			if (dirty[0] & /*experience*/ 1 && select1_name_value !== (select1_name_value = "endYear" + /*experience*/ ctx[0].id)) {
    				attr_dev(select1, "name", select1_name_value);
    			}

    			if (dirty[0] & /*experience*/ 1 && select1_id_value !== (select1_id_value = "endYear" + /*experience*/ ctx[0].id)) {
    				attr_dev(select1, "id", select1_id_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(select0);
    			destroy_each(each_blocks_1, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(select1);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$7.name,
    		type: "else",
    		source: "(236:18) {:else}",
    		ctx
    	});

    	return block;
    }

    // (224:18) {#if experience.working === true}
    function create_if_block$9(ctx) {
    	let select0;
    	let select0_name_value;
    	let select0_id_value;
    	let t0;
    	let select1;
    	let option;
    	let select1_name_value;
    	let select1_id_value;
    	let each_value_2 = /*months*/ ctx[4];
    	validate_each_argument(each_value_2);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_1[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
    	}

    	let each_value_1 = /*yearList*/ ctx[6];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			select0 = element("select");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t0 = space();
    			select1 = element("select");
    			option = element("option");
    			option.textContent = "Year";

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(select0, "name", select0_name_value = "endDate" + /*experience*/ ctx[0].id);
    			attr_dev(select0, "id", select0_id_value = "endDate" + /*experience*/ ctx[0].id);
    			attr_dev(select0, "class", "me-md-1 mb-3 svelte-1r8fjdo");
    			select0.disabled = true;
    			add_location(select0, file$c, 224, 21, 7480);
    			option.__value = "0";
    			option.value = option.__value;
    			add_location(option, file$c, 230, 22, 7890);
    			attr_dev(select1, "name", select1_name_value = "endYear" + /*experience*/ ctx[0].id);
    			attr_dev(select1, "id", select1_id_value = "endYear" + /*experience*/ ctx[0].id);
    			attr_dev(select1, "class", "mb-3 svelte-1r8fjdo");
    			select1.disabled = true;
    			add_location(select1, file$c, 229, 20, 7779);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, select0, anchor);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(select0, null);
    			}

    			insert_dev(target, t0, anchor);
    			insert_dev(target, select1, anchor);
    			append_dev(select1, option);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select1, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*months*/ 16) {
    				each_value_2 = /*months*/ ctx[4];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$1(ctx, each_value_2, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_2$1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(select0, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_2.length;
    			}

    			if (dirty[0] & /*experience*/ 1 && select0_name_value !== (select0_name_value = "endDate" + /*experience*/ ctx[0].id)) {
    				attr_dev(select0, "name", select0_name_value);
    			}

    			if (dirty[0] & /*experience*/ 1 && select0_id_value !== (select0_id_value = "endDate" + /*experience*/ ctx[0].id)) {
    				attr_dev(select0, "id", select0_id_value);
    			}

    			if (dirty[0] & /*yearList*/ 64) {
    				each_value_1 = /*yearList*/ ctx[6];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			if (dirty[0] & /*experience*/ 1 && select1_name_value !== (select1_name_value = "endYear" + /*experience*/ ctx[0].id)) {
    				attr_dev(select1, "name", select1_name_value);
    			}

    			if (dirty[0] & /*experience*/ 1 && select1_id_value !== (select1_id_value = "endYear" + /*experience*/ ctx[0].id)) {
    				attr_dev(select1, "id", select1_id_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(select0);
    			destroy_each(each_blocks_1, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(select1);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(224:18) {#if experience.working === true}",
    		ctx
    	});

    	return block;
    }

    // (238:23) {#each months as month}
    function create_each_block_4(ctx) {
    	let option;
    	let t_value = /*month*/ ctx[21].month + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = /*month*/ ctx[21].value;
    			option.value = option.__value;
    			add_location(option, file$c, 238, 26, 8296);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4.name,
    		type: "each",
    		source: "(238:23) {#each months as month}",
    		ctx
    	});

    	return block;
    }

    // (246:24) {#if parseInt(yearEndData) === year}
    function create_if_block_1$5(ctx) {
    	let option;
    	let t_value = /*year*/ ctx[18] + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.selected = true;
    			option.__value = /*year*/ ctx[18];
    			option.value = option.__value;
    			add_location(option, file$c, 246, 26, 8755);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(246:24) {#if parseInt(yearEndData) === year}",
    		ctx
    	});

    	return block;
    }

    // (245:22) {#each yearList as year}
    function create_each_block_3$1(ctx) {
    	let show_if = parseInt(/*yearEndData*/ ctx[1]) === /*year*/ ctx[18];
    	let option;
    	let t_value = /*year*/ ctx[18] + "";
    	let t;
    	let if_block = show_if && create_if_block_1$5(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			option = element("option");
    			t = text(t_value);
    			option.__value = /*year*/ ctx[18];
    			option.value = option.__value;
    			add_location(option, file$c, 248, 24, 8855);
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*yearEndData*/ 2) show_if = parseInt(/*yearEndData*/ ctx[1]) === /*year*/ ctx[18];

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$5(ctx);
    					if_block.c();
    					if_block.m(option.parentNode, option);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3$1.name,
    		type: "each",
    		source: "(245:22) {#each yearList as year}",
    		ctx
    	});

    	return block;
    }

    // (226:22) {#each months as month}
    function create_each_block_2$1(ctx) {
    	let option;
    	let t_value = /*month*/ ctx[21].month + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = /*month*/ ctx[21].value;
    			option.value = option.__value;
    			add_location(option, file$c, 226, 25, 7648);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$1.name,
    		type: "each",
    		source: "(226:22) {#each months as month}",
    		ctx
    	});

    	return block;
    }

    // (232:22) {#each yearList as year}
    function create_each_block_1$1(ctx) {
    	let option;
    	let t_value = /*year*/ ctx[18] + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = /*year*/ ctx[18];
    			option.value = option.__value;
    			add_location(option, file$c, 232, 24, 7991);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(232:22) {#each yearList as year}",
    		ctx
    	});

    	return block;
    }

    // (273:14) {#each employmentTypeList as employment}
    function create_each_block$5(ctx) {
    	let option;
    	let t_value = /*employment*/ ctx[15] + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = /*employment*/ ctx[15];
    			option.value = option.__value;
    			add_location(option, file$c, 273, 16, 9983);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(273:14) {#each employmentTypeList as employment}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let div14;
    	let div13;
    	let div12;
    	let div0;
    	let h50;
    	let t1;
    	let button0;
    	let t2;
    	let div10;
    	let div1;
    	let h51;
    	let t4;
    	let p;
    	let t6;
    	let div9;
    	let form;
    	let div2;
    	let label0;
    	let t8;
    	let input0;
    	let input0_value_value;
    	let t9;
    	let div7;
    	let div4;
    	let label1;
    	let t11;
    	let div3;
    	let select0;
    	let select0_id_value;
    	let t12;
    	let select1;
    	let option0;
    	let t14;
    	let div6;
    	let label2;
    	let t16;
    	let div5;
    	let t17;
    	let div8;
    	let input1;
    	let input1_checked_value;
    	let input1_name_value;
    	let input1_id_value;
    	let t18;
    	let label3;
    	let t19;
    	let label3_for_value;
    	let t20;
    	let label4;
    	let t22;
    	let input2;
    	let input2_value_value;
    	let t23;
    	let label5;
    	let t25;
    	let input3;
    	let input3_value_value;
    	let t26;
    	let label6;
    	let t28;
    	let select2;
    	let option1;
    	let t30;
    	let label7;
    	let t32;
    	let textarea;
    	let textarea_value_value;
    	let t33;
    	let div11;
    	let button1;
    	let t35;
    	let button2;
    	let mounted;
    	let dispose;
    	let each_value_6 = /*months*/ ctx[4];
    	validate_each_argument(each_value_6);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_6.length; i += 1) {
    		each_blocks_2[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
    	}

    	let each_value_5 = /*yearList*/ ctx[6];
    	validate_each_argument(each_value_5);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		each_blocks_1[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
    	}

    	function select_block_type(ctx, dirty) {
    		if (/*experience*/ ctx[0].working === true) return create_if_block$9;
    		return create_else_block$7;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);
    	let each_value = /*employmentTypeList*/ ctx[5];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div14 = element("div");
    			div13 = element("div");
    			div12 = element("div");
    			div0 = element("div");
    			h50 = element("h5");
    			h50.textContent = "Set Experience";
    			t1 = space();
    			button0 = element("button");
    			t2 = space();
    			div10 = element("div");
    			div1 = element("div");
    			h51 = element("h5");
    			h51.textContent = "Where do you currently work?";
    			t4 = space();
    			p = element("p");
    			p.textContent = "* Indicates required";
    			t6 = space();
    			div9 = element("div");
    			form = element("form");
    			div2 = element("div");
    			label0 = element("label");
    			label0.textContent = "Company Name*";
    			t8 = space();
    			input0 = element("input");
    			t9 = space();
    			div7 = element("div");
    			div4 = element("div");
    			label1 = element("label");
    			label1.textContent = "Start date*";
    			t11 = space();
    			div3 = element("div");
    			select0 = element("select");

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t12 = space();
    			select1 = element("select");
    			option0 = element("option");
    			option0.textContent = "Year";

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t14 = space();
    			div6 = element("div");
    			label2 = element("label");
    			label2.textContent = "end date*";
    			t16 = space();
    			div5 = element("div");
    			if_block.c();
    			t17 = space();
    			div8 = element("div");
    			input1 = element("input");
    			t18 = space();
    			label3 = element("label");
    			t19 = text("I am currently working in this role");
    			t20 = space();
    			label4 = element("label");
    			label4.textContent = "Location*";
    			t22 = space();
    			input2 = element("input");
    			t23 = space();
    			label5 = element("label");
    			label5.textContent = "Title*";
    			t25 = space();
    			input3 = element("input");
    			t26 = space();
    			label6 = element("label");
    			label6.textContent = "Employment type*";
    			t28 = space();
    			select2 = element("select");
    			option1 = element("option");
    			option1.textContent = "Please select";

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t30 = space();
    			label7 = element("label");
    			label7.textContent = "Description*";
    			t32 = space();
    			textarea = element("textarea");
    			t33 = space();
    			div11 = element("div");
    			button1 = element("button");
    			button1.textContent = "Close";
    			t35 = space();
    			button2 = element("button");
    			button2.textContent = "Add experience";
    			attr_dev(h50, "class", "modal-title");
    			attr_dev(h50, "id", "modalUpdateExperienceLabel");
    			add_location(h50, file$c, 179, 8, 5422);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "btn-close");
    			attr_dev(button0, "data-bs-dismiss", "modal");
    			attr_dev(button0, "aria-label", "Close");
    			add_location(button0, file$c, 180, 8, 5506);
    			attr_dev(div0, "class", "modal-header");
    			add_location(div0, file$c, 178, 6, 5387);
    			add_location(h51, file$c, 185, 10, 5697);
    			attr_dev(p, "class", "my-3");
    			add_location(p, file$c, 186, 10, 5745);
    			attr_dev(div1, "class", "headModal");
    			add_location(div1, file$c, 184, 8, 5663);
    			attr_dev(label0, "for", "companyName");
    			add_location(label0, file$c, 192, 14, 5918);
    			attr_dev(input0, "type", "text");
    			input0.value = input0_value_value = /*experience*/ ctx[0].company_name;
    			attr_dev(input0, "name", "companyName");
    			attr_dev(input0, "id", "companyName");
    			attr_dev(input0, "placeholder", "Ex: FlyLinkers");
    			attr_dev(input0, "class", "svelte-1r8fjdo");
    			add_location(input0, file$c, 193, 16, 5981);
    			attr_dev(div2, "class", "companyName");
    			add_location(div2, file$c, 191, 12, 5878);
    			attr_dev(label1, "for", "startDate");
    			add_location(label1, file$c, 198, 16, 6208);
    			attr_dev(select0, "name", "startDate");
    			attr_dev(select0, "id", select0_id_value = "startDate" + /*experience*/ ctx[0].id);
    			attr_dev(select0, "class", "me-md-1 mb-3 svelte-1r8fjdo");
    			add_location(select0, file$c, 200, 18, 6347);
    			option0.__value = "0";
    			option0.value = option0.__value;
    			add_location(option0, file$c, 209, 20, 6855);
    			attr_dev(select1, "name", "startYear");
    			attr_dev(select1, "id", "startYear");
    			attr_dev(select1, "class", "mb-3 svelte-1r8fjdo");
    			add_location(select1, file$c, 208, 18, 6781);
    			attr_dev(div3, "class", "workStartDate d-md-flex justify-content-between");
    			add_location(div3, file$c, 199, 16, 6267);
    			attr_dev(div4, "class", "start me-md-1 svelte-1r8fjdo");
    			add_location(div4, file$c, 197, 14, 6164);
    			attr_dev(label2, "for", "endDate");
    			add_location(label2, file$c, 221, 16, 7292);
    			attr_dev(div5, "class", "workEndDate d-md-flex justify-content-between");
    			add_location(div5, file$c, 222, 16, 7347);
    			attr_dev(div6, "class", "end svelte-1r8fjdo");
    			add_location(div6, file$c, 220, 14, 7258);
    			attr_dev(div7, "class", "dates svelte-1r8fjdo");
    			add_location(div7, file$c, 196, 12, 6130);
    			attr_dev(input1, "type", "checkbox");
    			input1.checked = input1_checked_value = /*experience*/ ctx[0].working;
    			attr_dev(input1, "name", input1_name_value = "working" + /*experience*/ ctx[0].id);
    			attr_dev(input1, "id", input1_id_value = "working" + /*experience*/ ctx[0].id);
    			attr_dev(input1, "class", "svelte-1r8fjdo");
    			add_location(input1, file$c, 257, 14, 9115);
    			attr_dev(label3, "for", label3_for_value = "working" + /*experience*/ ctx[0].id);
    			add_location(label3, file$c, 258, 14, 9265);
    			attr_dev(div8, "class", "working d-flex align-items-center");
    			add_location(div8, file$c, 256, 12, 9053);
    			attr_dev(label4, "for", "country");
    			add_location(label4, file$c, 263, 12, 9409);
    			attr_dev(input2, "type", "text");
    			attr_dev(input2, "name", "country");
    			attr_dev(input2, "id", "country");
    			input2.value = input2_value_value = /*experience*/ ctx[0].location;
    			attr_dev(input2, "placeholder", "Ex: Colombia");
    			attr_dev(input2, "class", "svelte-1r8fjdo");
    			add_location(input2, file$c, 264, 12, 9460);
    			attr_dev(label5, "for", "title");
    			add_location(label5, file$c, 266, 12, 9576);
    			attr_dev(input3, "type", "text");
    			attr_dev(input3, "name", "title");
    			attr_dev(input3, "id", "title");
    			input3.value = input3_value_value = /*experience*/ ctx[0].title;
    			attr_dev(input3, "placeholder", "Ex: Manager");
    			attr_dev(input3, "class", "svelte-1r8fjdo");
    			add_location(input3, file$c, 267, 12, 9622);
    			attr_dev(label6, "for", "employmentType");
    			add_location(label6, file$c, 269, 12, 9730);
    			option1.__value = "pleaseSelect";
    			option1.value = option1.__value;
    			add_location(option1, file$c, 271, 14, 9860);
    			attr_dev(select2, "name", "employmentType");
    			attr_dev(select2, "id", "employmentType");
    			attr_dev(select2, "class", "svelte-1r8fjdo");
    			add_location(select2, file$c, 270, 12, 9795);
    			attr_dev(label7, "for", "description");
    			add_location(label7, file$c, 277, 12, 10089);
    			attr_dev(textarea, "name", "description");
    			attr_dev(textarea, "id", "description");
    			textarea.value = textarea_value_value = /*experience*/ ctx[0].description;
    			attr_dev(textarea, "cols", "30");
    			attr_dev(textarea, "rows", "5");
    			attr_dev(textarea, "class", "svelte-1r8fjdo");
    			add_location(textarea, file$c, 278, 12, 10147);
    			attr_dev(form, "action", "");
    			attr_dev(form, "class", "svelte-1r8fjdo");
    			add_location(form, file$c, 190, 10, 5849);
    			attr_dev(div9, "class", "formExperience");
    			add_location(div9, file$c, 189, 8, 5810);
    			attr_dev(div10, "class", "modal-body text-start");
    			add_location(div10, file$c, 182, 6, 5618);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "btn btn-secondary");
    			attr_dev(button1, "data-bs-dismiss", "modal");
    			add_location(button1, file$c, 284, 8, 10343);
    			attr_dev(button2, "id", "btnAddExperience");
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "btn btn-primary");
    			add_location(button2, file$c, 285, 8, 10438);
    			attr_dev(div11, "class", "modal-footer");
    			add_location(div11, file$c, 283, 6, 10308);
    			attr_dev(div12, "class", "modal-content svelte-1r8fjdo");
    			add_location(div12, file$c, 177, 4, 5353);
    			attr_dev(div13, "class", "modal-dialog modal-dialog-centered modal-lg");
    			add_location(div13, file$c, 176, 2, 5291);
    			attr_dev(div14, "class", "modal fade");
    			attr_dev(div14, "id", "modalUpdateExperience");
    			attr_dev(div14, "tabindex", "-1");
    			attr_dev(div14, "aria-labelledby", "modalUpdateExperienceLabel");
    			attr_dev(div14, "aria-hidden", "true");
    			add_location(div14, file$c, 175, 0, 5159);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div14, anchor);
    			append_dev(div14, div13);
    			append_dev(div13, div12);
    			append_dev(div12, div0);
    			append_dev(div0, h50);
    			append_dev(div0, t1);
    			append_dev(div0, button0);
    			append_dev(div12, t2);
    			append_dev(div12, div10);
    			append_dev(div10, div1);
    			append_dev(div1, h51);
    			append_dev(div1, t4);
    			append_dev(div1, p);
    			append_dev(div10, t6);
    			append_dev(div10, div9);
    			append_dev(div9, form);
    			append_dev(form, div2);
    			append_dev(div2, label0);
    			append_dev(div2, t8);
    			append_dev(div2, input0);
    			append_dev(form, t9);
    			append_dev(form, div7);
    			append_dev(div7, div4);
    			append_dev(div4, label1);
    			append_dev(div4, t11);
    			append_dev(div4, div3);
    			append_dev(div3, select0);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(select0, null);
    			}

    			append_dev(div3, t12);
    			append_dev(div3, select1);
    			append_dev(select1, option0);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(select1, null);
    			}

    			append_dev(div7, t14);
    			append_dev(div7, div6);
    			append_dev(div6, label2);
    			append_dev(div6, t16);
    			append_dev(div6, div5);
    			if_block.m(div5, null);
    			append_dev(form, t17);
    			append_dev(form, div8);
    			append_dev(div8, input1);
    			append_dev(div8, t18);
    			append_dev(div8, label3);
    			append_dev(label3, t19);
    			append_dev(form, t20);
    			append_dev(form, label4);
    			append_dev(form, t22);
    			append_dev(form, input2);
    			append_dev(form, t23);
    			append_dev(form, label5);
    			append_dev(form, t25);
    			append_dev(form, input3);
    			append_dev(form, t26);
    			append_dev(form, label6);
    			append_dev(form, t28);
    			append_dev(form, select2);
    			append_dev(select2, option1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select2, null);
    			}

    			append_dev(form, t30);
    			append_dev(form, label7);
    			append_dev(form, t32);
    			append_dev(form, textarea);
    			append_dev(div12, t33);
    			append_dev(div12, div11);
    			append_dev(div11, button1);
    			append_dev(div11, t35);
    			append_dev(div11, button2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input1, "click", /*toggleEndDate*/ ctx[8], false, false, false),
    					listen_dev(button2, "click", /*addExpreience*/ ctx[7], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*experience*/ 1 && input0_value_value !== (input0_value_value = /*experience*/ ctx[0].company_name) && input0.value !== input0_value_value) {
    				prop_dev(input0, "value", input0_value_value);
    			}

    			if (dirty[0] & /*months, monthData*/ 24) {
    				each_value_6 = /*months*/ ctx[4];
    				validate_each_argument(each_value_6);
    				let i;

    				for (i = 0; i < each_value_6.length; i += 1) {
    					const child_ctx = get_each_context_6(ctx, each_value_6, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_2[i] = create_each_block_6(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(select0, null);
    					}
    				}

    				for (; i < each_blocks_2.length; i += 1) {
    					each_blocks_2[i].d(1);
    				}

    				each_blocks_2.length = each_value_6.length;
    			}

    			if (dirty[0] & /*experience*/ 1 && select0_id_value !== (select0_id_value = "startDate" + /*experience*/ ctx[0].id)) {
    				attr_dev(select0, "id", select0_id_value);
    			}

    			if (dirty[0] & /*yearList, yearData*/ 68) {
    				each_value_5 = /*yearList*/ ctx[6];
    				validate_each_argument(each_value_5);
    				let i;

    				for (i = 0; i < each_value_5.length; i += 1) {
    					const child_ctx = get_each_context_5(ctx, each_value_5, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_5(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(select1, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_5.length;
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div5, null);
    				}
    			}

    			if (dirty[0] & /*experience*/ 1 && input1_checked_value !== (input1_checked_value = /*experience*/ ctx[0].working)) {
    				prop_dev(input1, "checked", input1_checked_value);
    			}

    			if (dirty[0] & /*experience*/ 1 && input1_name_value !== (input1_name_value = "working" + /*experience*/ ctx[0].id)) {
    				attr_dev(input1, "name", input1_name_value);
    			}

    			if (dirty[0] & /*experience*/ 1 && input1_id_value !== (input1_id_value = "working" + /*experience*/ ctx[0].id)) {
    				attr_dev(input1, "id", input1_id_value);
    			}

    			if (dirty[0] & /*experience*/ 1 && label3_for_value !== (label3_for_value = "working" + /*experience*/ ctx[0].id)) {
    				attr_dev(label3, "for", label3_for_value);
    			}

    			if (dirty[0] & /*experience*/ 1 && input2_value_value !== (input2_value_value = /*experience*/ ctx[0].location) && input2.value !== input2_value_value) {
    				prop_dev(input2, "value", input2_value_value);
    			}

    			if (dirty[0] & /*experience*/ 1 && input3_value_value !== (input3_value_value = /*experience*/ ctx[0].title) && input3.value !== input3_value_value) {
    				prop_dev(input3, "value", input3_value_value);
    			}

    			if (dirty[0] & /*employmentTypeList*/ 32) {
    				each_value = /*employmentTypeList*/ ctx[5];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select2, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty[0] & /*experience*/ 1 && textarea_value_value !== (textarea_value_value = /*experience*/ ctx[0].description)) {
    				prop_dev(textarea, "value", textarea_value_value);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div14);
    			destroy_each(each_blocks_2, detaching);
    			destroy_each(each_blocks_1, detaching);
    			if_block.d();
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const yearStart = 1922;

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('UpdateExperienceModal', slots, []);
    	let { userProfile, urlAPI, experience } = $$props;
    	console.log(experience);
    	const yearData = experience.start_date.split('-')[0];
    	const monthData = experience.start_date.split('-')[1];
    	let yearEndData;
    	let monthEndData;

    	if (experience.end_date) {
    		yearEndData = experience.end_date.split('-')[0];
    		monthEndData = experience.end_date.split('-')[1];
    	}

    	console.log(yearEndData, monthEndData);

    	const months = [
    		{ value: '0', month: 'Please select' },
    		{ value: '01', month: 'January' },
    		{ value: '02', month: 'February' },
    		{ value: '03', month: 'March' },
    		{ value: '04', month: 'April' },
    		{ value: '05', month: 'May' },
    		{ value: '06', month: 'June' },
    		{ value: '07', month: 'July' },
    		{ value: '08', month: 'August' },
    		{ value: '09', month: 'September' },
    		{ value: '10', month: 'October' },
    		{ value: '11', month: 'November' },
    		{ value: '12', month: 'December' }
    	];

    	const employmentTypeList = [
    		'Full-time',
    		'Part-time',
    		'Self-employed',
    		'Freelance',
    		'Contract',
    		'InternShip',
    		'Apprenticeship',
    		'Seasonal'
    	];

    	const today = new Date();
    	const yearCurrent = today.getFullYear();
    	const yearList = [];

    	for (let i = yearCurrent; i >= yearStart; i--) {
    		yearList.push(i);
    	}

    	const addExpreience = () => {
    		const company_name = companyName.value;
    		const startUpdateDate = document.getElementById(`startDate${experience.id}`);
    		const startUpdateYear = document.getElementById(`startYear${experience.id}`);
    		const endUpdateDate = document.getElementById(`endDate${experience.id}`);
    		const endUpdateYear = document.getElementById(`endYear${experience.id}`);
    		const working = document.getElementById(`working${experience.id}`);
    		let start_date = '';

    		startUpdateYear.value !== "0" && startUpdateDate.value !== "0"
    		? start_date = [parseInt(startUpdateYear.value), parseInt(startUpdateDate.value)]
    		: start_date = '';

    		let workingCheck = 0;
    		working.checked ? workingCheck = 1 : workingCheck = 0;
    		let end_date = '';

    		endUpdateYear.value !== '0' && endUpdateDate.value !== '0'
    		? end_date = [parseInt(endUpdateYear.value), parseInt(endUpdateDate.value)]
    		: end_date = '';

    		const location = country.value;
    		const titleJob = title.value;
    		let employment_type = '';

    		employmentType.value === 'pleaseSelect'
    		? employment_type = ''
    		: employment_type = employmentType.value;

    		const descriptionJob = description.value;

    		// console.log(
    		//   userProfile,
    		//   company_name,
    		//   start_date,
    		//   workingCheck,
    		//   end_date,
    		//   location,
    		//   titleJob,
    		//   employment_type,
    		//   descriptionJob
    		// );
    		if (userProfile !== '' && company_name !== '' && start_date !== '' && workingCheck !== '' && end_date !== '' && location !== '' && titleJob !== '' && employment_type !== '' && descriptionJob) {
    			let templateExperience;

    			if (workingCheck === 0) {
    				templateExperience = {
    					"profile": userProfile,
    					company_name,
    					start_date,
    					"working": 0,
    					end_date,
    					location,
    					"title": titleJob,
    					employment_type,
    					"description": descriptionJob
    				};
    			}

    			if (workingCheck === 1) {
    				templateExperience = {
    					"profile": userProfile,
    					company_name,
    					start_date,
    					"working": 1,
    					location,
    					"title": titleJob,
    					employment_type,
    					"description": descriptionJob
    				};
    			}

    			console.log(templateExperience);
    			addNewExperience(templateExperience);
    		} else {
    			console.log('please complete all the fields');
    		}
    	};

    	const toggleEndDate = () => {
    		const working = document.getElementById(`working${experience.id}`);
    		const endUpdateYear = document.getElementById(`endYear${experience.id}`);
    		const endUpdateDate = document.getElementById(`endDate${experience.id}`);
    		console.log(endUpdateYear, endUpdateDate, working);

    		if (working.checked) {
    			endUpdateYear.setAttribute('disabled', '');
    			endUpdateDate.setAttribute('disabled', '');
    		} else {
    			endUpdateYear.removeAttribute('disabled', '');
    			endUpdateDate.removeAttribute('disabled', '');
    		}
    	};

    	async function addNewExperience(templateExperience) {
    		console.log(templateExperience);

    		const postExperience = await fetch(`${urlAPI}/user/experience/`, {
    			method: 'POST',
    			headers: { "Content-Type": "application/json" },
    			body: JSON.stringify({ templateExperience })
    		});

    		const content = await postExperience.json();
    		console.log(content);
    	}

    	const writable_props = ['userProfile', 'urlAPI', 'experience'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$2.warn(`<UpdateExperienceModal> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('userProfile' in $$props) $$invalidate(9, userProfile = $$props.userProfile);
    		if ('urlAPI' in $$props) $$invalidate(10, urlAPI = $$props.urlAPI);
    		if ('experience' in $$props) $$invalidate(0, experience = $$props.experience);
    	};

    	$$self.$capture_state = () => ({
    		userProfile,
    		urlAPI,
    		experience,
    		yearData,
    		monthData,
    		yearEndData,
    		monthEndData,
    		months,
    		employmentTypeList,
    		yearStart,
    		today,
    		yearCurrent,
    		yearList,
    		addExpreience,
    		toggleEndDate,
    		addNewExperience
    	});

    	$$self.$inject_state = $$props => {
    		if ('userProfile' in $$props) $$invalidate(9, userProfile = $$props.userProfile);
    		if ('urlAPI' in $$props) $$invalidate(10, urlAPI = $$props.urlAPI);
    		if ('experience' in $$props) $$invalidate(0, experience = $$props.experience);
    		if ('yearEndData' in $$props) $$invalidate(1, yearEndData = $$props.yearEndData);
    		if ('monthEndData' in $$props) monthEndData = $$props.monthEndData;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		experience,
    		yearEndData,
    		yearData,
    		monthData,
    		months,
    		employmentTypeList,
    		yearList,
    		addExpreience,
    		toggleEndDate,
    		userProfile,
    		urlAPI
    	];
    }

    class UpdateExperienceModal extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$c,
    			create_fragment$c,
    			safe_not_equal,
    			{
    				userProfile: 9,
    				urlAPI: 10,
    				experience: 0
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UpdateExperienceModal",
    			options,
    			id: create_fragment$c.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*userProfile*/ ctx[9] === undefined && !('userProfile' in props)) {
    			console_1$2.warn("<UpdateExperienceModal> was created without expected prop 'userProfile'");
    		}

    		if (/*urlAPI*/ ctx[10] === undefined && !('urlAPI' in props)) {
    			console_1$2.warn("<UpdateExperienceModal> was created without expected prop 'urlAPI'");
    		}

    		if (/*experience*/ ctx[0] === undefined && !('experience' in props)) {
    			console_1$2.warn("<UpdateExperienceModal> was created without expected prop 'experience'");
    		}
    	}

    	get userProfile() {
    		throw new Error("<UpdateExperienceModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userProfile(value) {
    		throw new Error("<UpdateExperienceModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlAPI() {
    		throw new Error("<UpdateExperienceModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error("<UpdateExperienceModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get experience() {
    		throw new Error("<UpdateExperienceModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set experience(value) {
    		throw new Error("<UpdateExperienceModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/profile/Experience.svelte generated by Svelte v3.46.4 */

    const { console: console_1$1 } = globals;
    const file$b = "src/components/profile/Experience.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	return child_ctx;
    }

    // (106:2) {:else}
    function create_else_block_1$3(ctx) {
    	const block = {
    		c: noop$1,
    		m: noop$1,
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: noop$1
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$3.name,
    		type: "else",
    		source: "(106:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (96:2) {#if id === parseInt(localStorage.getItem('userId'))}
    function create_if_block_4$1(ctx) {
    	let div2;
    	let div1;
    	let div0;
    	let p;
    	let t1;
    	let i;
    	let t2;
    	let experiencesmodal;
    	let current;

    	experiencesmodal = new ExperiencesModal({
    			props: {
    				userProfile: /*userProfile*/ ctx[2],
    				urlAPI: /*urlAPI*/ ctx[0]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			p = element("p");
    			p.textContent = "Add position";
    			t1 = space();
    			i = element("i");
    			t2 = space();
    			create_component(experiencesmodal.$$.fragment);
    			attr_dev(p, "class", "svelte-muvolz");
    			add_location(p, file$b, 99, 10, 2945);
    			attr_dev(i, "class", "fas fa-plus-circle svelte-muvolz");
    			attr_dev(i, "data-bs-toggle", "modal");
    			attr_dev(i, "data-bs-target", "#modalExperience");
    			add_location(i, file$b, 100, 10, 2975);
    			attr_dev(div0, "class", "addExperiences text-center svelte-muvolz");
    			add_location(div0, file$b, 98, 8, 2894);
    			attr_dev(div1, "class", "Experience-content mx-3 mx-md-0 svelte-muvolz");
    			add_location(div1, file$b, 97, 6, 2840);
    			attr_dev(div2, "class", "Default-containers Experience svelte-muvolz");
    			add_location(div2, file$b, 96, 4, 2790);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div0, p);
    			append_dev(div0, t1);
    			append_dev(div0, i);
    			append_dev(div0, t2);
    			mount_component(experiencesmodal, div0, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const experiencesmodal_changes = {};
    			if (dirty & /*userProfile*/ 4) experiencesmodal_changes.userProfile = /*userProfile*/ ctx[2];
    			if (dirty & /*urlAPI*/ 1) experiencesmodal_changes.urlAPI = /*urlAPI*/ ctx[0];
    			experiencesmodal.$set(experiencesmodal_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(experiencesmodal.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(experiencesmodal.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(experiencesmodal);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(96:2) {#if id === parseInt(localStorage.getItem('userId'))}",
    		ctx
    	});

    	return block;
    }

    // (58:0) {#if data}
    function create_if_block$8(ctx) {
    	let div2;
    	let div1;
    	let div0;
    	let p;
    	let t1;
    	let t2;
    	let show_if = /*id*/ ctx[1] === parseInt(localStorage.getItem('userId'));
    	let current;
    	let each_value = /*data*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let if_block = show_if && create_if_block_1$4(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			p = element("p");
    			p.textContent = "Experience";
    			t1 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			if (if_block) if_block.c();
    			attr_dev(p, "class", "svelte-muvolz");
    			add_location(p, file$b, 61, 8, 1323);
    			attr_dev(div0, "class", "Experience-title svelte-muvolz");
    			add_location(div0, file$b, 60, 6, 1284);
    			attr_dev(div1, "class", "Experience-content mx-3 mx-md-0 svelte-muvolz");
    			add_location(div1, file$b, 59, 4, 1232);
    			attr_dev(div2, "class", "Default-containers Experience svelte-muvolz");
    			add_location(div2, file$b, 58, 2, 1184);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div0, p);
    			append_dev(div1, t1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append_dev(div2, t2);
    			if (if_block) if_block.m(div2, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*userProfile, urlAPI, data, id, parseInt, localStorage*/ 15) {
    				each_value = /*data*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div1, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (dirty & /*id*/ 2) show_if = /*id*/ ctx[1] === parseInt(localStorage.getItem('userId'));

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*id*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$4(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div2, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_each(each_blocks, detaching);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(58:0) {#if data}",
    		ctx
    	});

    	return block;
    }

    // (66:12) {#if id === parseInt(localStorage.getItem('userId'))}
    function create_if_block_3$1(ctx) {
    	let div;
    	let i;

    	const block = {
    		c: function create() {
    			div = element("div");
    			i = element("i");
    			attr_dev(i, "class", "fas fa-pen svelte-muvolz");
    			add_location(i, file$b, 67, 17, 1633);
    			attr_dev(div, "class", "updateExperience svelte-muvolz");
    			attr_dev(div, "data-bs-toggle", "modal");
    			attr_dev(div, "data-bs-target", "#modalUpdateExperience");
    			add_location(div, file$b, 66, 15, 1522);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, i);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(66:12) {#if id === parseInt(localStorage.getItem('userId'))}",
    		ctx
    	});

    	return block;
    }

    // (74:12) {:else}
    function create_else_block$6(ctx) {
    	let p;
    	let t0;
    	let span;
    	let t1_value = /*experience*/ ctx[7].start_date + "";
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t0 = text("Dates of employments: ");
    			span = element("span");
    			t1 = text(t1_value);
    			t2 = text(" - currently");
    			attr_dev(span, "class", "svelte-muvolz");
    			add_location(span, file$b, 74, 40, 1975);
    			attr_dev(p, "class", "svelte-muvolz");
    			add_location(p, file$b, 74, 15, 1950);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t0);
    			append_dev(p, span);
    			append_dev(span, t1);
    			append_dev(span, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*data*/ 8 && t1_value !== (t1_value = /*experience*/ ctx[7].start_date + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(74:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (72:12) {#if !experience.working}
    function create_if_block_2$1(ctx) {
    	let p;
    	let t0;
    	let span;
    	let t1_value = /*experience*/ ctx[7].start_date + "";
    	let t1;
    	let t2;
    	let t3_value = /*experience*/ ctx[7].end_date + "";
    	let t3;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t0 = text("Dates of employments: ");
    			span = element("span");
    			t1 = text(t1_value);
    			t2 = text(" - ");
    			t3 = text(t3_value);
    			attr_dev(span, "class", "svelte-muvolz");
    			add_location(span, file$b, 72, 40, 1850);
    			attr_dev(p, "class", "svelte-muvolz");
    			add_location(p, file$b, 72, 15, 1825);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t0);
    			append_dev(p, span);
    			append_dev(span, t1);
    			append_dev(span, t2);
    			append_dev(span, t3);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*data*/ 8 && t1_value !== (t1_value = /*experience*/ ctx[7].start_date + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*data*/ 8 && t3_value !== (t3_value = /*experience*/ ctx[7].end_date + "")) set_data_dev(t3, t3_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(72:12) {#if !experience.working}",
    		ctx
    	});

    	return block;
    }

    // (64:7) {#each data as experience}
    function create_each_block$4(ctx) {
    	let div;
    	let show_if = /*id*/ ctx[1] === parseInt(localStorage.getItem('userId'));
    	let t0;
    	let p0;
    	let t1;
    	let span0;
    	let t2_value = /*experience*/ ctx[7].company_name + "";
    	let t2;
    	let t3;
    	let t4;
    	let p1;
    	let t5;
    	let span1;
    	let t6_value = /*experience*/ ctx[7].location + "";
    	let t6;
    	let t7;
    	let p2;
    	let t8;
    	let span2;
    	let t9_value = /*experience*/ ctx[7].title + "";
    	let t9;
    	let t10;
    	let p3;
    	let t11;
    	let span3;
    	let t12_value = /*experience*/ ctx[7].employment_type + "";
    	let t12;
    	let t13;
    	let p4;
    	let t14_value = /*experience*/ ctx[7].description + "";
    	let t14;
    	let t15;
    	let hr;
    	let t16;
    	let updateexperiencesmodal;
    	let current;
    	let if_block0 = show_if && create_if_block_3$1(ctx);

    	function select_block_type_1(ctx, dirty) {
    		if (!/*experience*/ ctx[7].working) return create_if_block_2$1;
    		return create_else_block$6;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block1 = current_block_type(ctx);

    	updateexperiencesmodal = new UpdateExperienceModal({
    			props: {
    				userProfile: /*userProfile*/ ctx[2],
    				urlAPI: /*urlAPI*/ ctx[0],
    				experience: /*experience*/ ctx[7]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			p0 = element("p");
    			t1 = text("Company Name: ");
    			span0 = element("span");
    			t2 = text(t2_value);
    			t3 = space();
    			if_block1.c();
    			t4 = space();
    			p1 = element("p");
    			t5 = text("Ubication: ");
    			span1 = element("span");
    			t6 = text(t6_value);
    			t7 = space();
    			p2 = element("p");
    			t8 = text("Title: ");
    			span2 = element("span");
    			t9 = text(t9_value);
    			t10 = space();
    			p3 = element("p");
    			t11 = text("job type: ");
    			span3 = element("span");
    			t12 = text(t12_value);
    			t13 = space();
    			p4 = element("p");
    			t14 = text(t14_value);
    			t15 = space();
    			hr = element("hr");
    			t16 = space();
    			create_component(updateexperiencesmodal.$$.fragment);
    			attr_dev(span0, "class", "svelte-muvolz");
    			add_location(span0, file$b, 70, 29, 1729);
    			attr_dev(p0, "class", "svelte-muvolz");
    			add_location(p0, file$b, 70, 12, 1712);
    			attr_dev(span1, "class", "svelte-muvolz");
    			add_location(span1, file$b, 76, 26, 2072);
    			attr_dev(p1, "class", "svelte-muvolz");
    			add_location(p1, file$b, 76, 12, 2058);
    			attr_dev(span2, "class", "svelte-muvolz");
    			add_location(span2, file$b, 78, 22, 2136);
    			attr_dev(p2, "class", "svelte-muvolz");
    			add_location(p2, file$b, 78, 12, 2126);
    			attr_dev(span3, "class", "svelte-muvolz");
    			add_location(span3, file$b, 79, 25, 2197);
    			attr_dev(p3, "class", "svelte-muvolz");
    			add_location(p3, file$b, 79, 12, 2184);
    			attr_dev(p4, "class", "svelte-muvolz");
    			add_location(p4, file$b, 80, 12, 2255);
    			add_location(hr, file$b, 81, 12, 2299);
    			attr_dev(div, "class", "experience position-relative");
    			add_location(div, file$b, 64, 10, 1398);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t0);
    			append_dev(div, p0);
    			append_dev(p0, t1);
    			append_dev(p0, span0);
    			append_dev(span0, t2);
    			append_dev(div, t3);
    			if_block1.m(div, null);
    			append_dev(div, t4);
    			append_dev(div, p1);
    			append_dev(p1, t5);
    			append_dev(p1, span1);
    			append_dev(span1, t6);
    			append_dev(div, t7);
    			append_dev(div, p2);
    			append_dev(p2, t8);
    			append_dev(p2, span2);
    			append_dev(span2, t9);
    			append_dev(div, t10);
    			append_dev(div, p3);
    			append_dev(p3, t11);
    			append_dev(p3, span3);
    			append_dev(span3, t12);
    			append_dev(div, t13);
    			append_dev(div, p4);
    			append_dev(p4, t14);
    			append_dev(div, t15);
    			append_dev(div, hr);
    			insert_dev(target, t16, anchor);
    			mount_component(updateexperiencesmodal, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*id*/ 2) show_if = /*id*/ ctx[1] === parseInt(localStorage.getItem('userId'));

    			if (show_if) {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_3$1(ctx);
    					if_block0.c();
    					if_block0.m(div, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if ((!current || dirty & /*data*/ 8) && t2_value !== (t2_value = /*experience*/ ctx[7].company_name + "")) set_data_dev(t2, t2_value);

    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div, t4);
    				}
    			}

    			if ((!current || dirty & /*data*/ 8) && t6_value !== (t6_value = /*experience*/ ctx[7].location + "")) set_data_dev(t6, t6_value);
    			if ((!current || dirty & /*data*/ 8) && t9_value !== (t9_value = /*experience*/ ctx[7].title + "")) set_data_dev(t9, t9_value);
    			if ((!current || dirty & /*data*/ 8) && t12_value !== (t12_value = /*experience*/ ctx[7].employment_type + "")) set_data_dev(t12, t12_value);
    			if ((!current || dirty & /*data*/ 8) && t14_value !== (t14_value = /*experience*/ ctx[7].description + "")) set_data_dev(t14, t14_value);
    			const updateexperiencesmodal_changes = {};
    			if (dirty & /*userProfile*/ 4) updateexperiencesmodal_changes.userProfile = /*userProfile*/ ctx[2];
    			if (dirty & /*urlAPI*/ 1) updateexperiencesmodal_changes.urlAPI = /*urlAPI*/ ctx[0];
    			if (dirty & /*data*/ 8) updateexperiencesmodal_changes.experience = /*experience*/ ctx[7];
    			updateexperiencesmodal.$set(updateexperiencesmodal_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(updateexperiencesmodal.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(updateexperiencesmodal.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if_block1.d();
    			if (detaching) detach_dev(t16);
    			destroy_component(updateexperiencesmodal, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(64:7) {#each data as experience}",
    		ctx
    	});

    	return block;
    }

    // (87:2) {#if id === parseInt(localStorage.getItem('userId'))}
    function create_if_block_1$4(ctx) {
    	let div;
    	let p;
    	let t1;
    	let i;
    	let t2;
    	let experiencesmodal;
    	let current;

    	experiencesmodal = new ExperiencesModal({
    			props: {
    				userProfile: /*userProfile*/ ctx[2],
    				urlAPI: /*urlAPI*/ ctx[0]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			p = element("p");
    			p.textContent = "Add position";
    			t1 = space();
    			i = element("i");
    			t2 = space();
    			create_component(experiencesmodal.$$.fragment);
    			attr_dev(p, "class", "svelte-muvolz");
    			add_location(p, file$b, 88, 6, 2527);
    			attr_dev(i, "class", "fas fa-plus-circle svelte-muvolz");
    			attr_dev(i, "data-bs-toggle", "modal");
    			attr_dev(i, "data-bs-target", "#modalExperience");
    			add_location(i, file$b, 89, 6, 2553);
    			attr_dev(div, "class", "addExperiences text-center svelte-muvolz");
    			add_location(div, file$b, 87, 4, 2480);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p);
    			append_dev(div, t1);
    			append_dev(div, i);
    			append_dev(div, t2);
    			mount_component(experiencesmodal, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const experiencesmodal_changes = {};
    			if (dirty & /*userProfile*/ 4) experiencesmodal_changes.userProfile = /*userProfile*/ ctx[2];
    			if (dirty & /*urlAPI*/ 1) experiencesmodal_changes.urlAPI = /*urlAPI*/ ctx[0];
    			experiencesmodal.$set(experiencesmodal_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(experiencesmodal.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(experiencesmodal.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(experiencesmodal);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(87:2) {#if id === parseInt(localStorage.getItem('userId'))}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let show_if;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$8, create_if_block_4$1, create_else_block_1$3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (dirty & /*id*/ 2) show_if = null;
    		if (/*data*/ ctx[3]) return 0;
    		if (show_if == null) show_if = !!(/*id*/ ctx[1] === parseInt(localStorage.getItem('userId')));
    		if (show_if) return 1;
    		return 2;
    	}

    	current_block_type_index = select_block_type(ctx, -1);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx, dirty);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Experience', slots, []);
    	let { urlAPI, id, experiences, userProfile } = $$props;
    	console.log(urlAPI, id, experiences);
    	let data;

    	const getExperiences = async () => {
    		const response = await fetch(`${urlAPI}/user/experience/?profile_id=${userProfile}`);
    		const content = await response.json();

    		// console.log(content);
    		$$invalidate(3, data = content);
    	};

    	if (experiences) {
    		getExperiences();
    	}

    	const updateExperience = profileId => {
    		
    	};

    	const writable_props = ['urlAPI', 'id', 'experiences', 'userProfile'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<Experience> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('urlAPI' in $$props) $$invalidate(0, urlAPI = $$props.urlAPI);
    		if ('id' in $$props) $$invalidate(1, id = $$props.id);
    		if ('experiences' in $$props) $$invalidate(4, experiences = $$props.experiences);
    		if ('userProfile' in $$props) $$invalidate(2, userProfile = $$props.userProfile);
    	};

    	$$self.$capture_state = () => ({
    		ExperiencesModal,
    		UpdateExperiencesModal: UpdateExperienceModal,
    		onMount,
    		urlAPI,
    		id,
    		experiences,
    		userProfile,
    		data,
    		getExperiences,
    		updateExperience
    	});

    	$$self.$inject_state = $$props => {
    		if ('urlAPI' in $$props) $$invalidate(0, urlAPI = $$props.urlAPI);
    		if ('id' in $$props) $$invalidate(1, id = $$props.id);
    		if ('experiences' in $$props) $$invalidate(4, experiences = $$props.experiences);
    		if ('userProfile' in $$props) $$invalidate(2, userProfile = $$props.userProfile);
    		if ('data' in $$props) $$invalidate(3, data = $$props.data);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [urlAPI, id, userProfile, data, experiences];
    }

    class Experience extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
    			urlAPI: 0,
    			id: 1,
    			experiences: 4,
    			userProfile: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Experience",
    			options,
    			id: create_fragment$b.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*urlAPI*/ ctx[0] === undefined && !('urlAPI' in props)) {
    			console_1$1.warn("<Experience> was created without expected prop 'urlAPI'");
    		}

    		if (/*id*/ ctx[1] === undefined && !('id' in props)) {
    			console_1$1.warn("<Experience> was created without expected prop 'id'");
    		}

    		if (/*experiences*/ ctx[4] === undefined && !('experiences' in props)) {
    			console_1$1.warn("<Experience> was created without expected prop 'experiences'");
    		}

    		if (/*userProfile*/ ctx[2] === undefined && !('userProfile' in props)) {
    			console_1$1.warn("<Experience> was created without expected prop 'userProfile'");
    		}
    	}

    	get urlAPI() {
    		throw new Error("<Experience>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error("<Experience>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<Experience>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Experience>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get experiences() {
    		throw new Error("<Experience>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set experiences(value) {
    		throw new Error("<Experience>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get userProfile() {
    		throw new Error("<Experience>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userProfile(value) {
    		throw new Error("<Experience>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/profile/Panel.svelte generated by Svelte v3.46.4 */

    const file$a = "src/components/profile/Panel.svelte";

    function create_fragment$a(ctx) {
    	let div5;
    	let div0;
    	let p0;
    	let t1;
    	let div4;
    	let div1;
    	let h30;
    	let t3;
    	let p1;
    	let t5;
    	let div2;
    	let h31;
    	let t7;
    	let p2;
    	let t9;
    	let div3;
    	let h32;
    	let t11;
    	let p3;
    	let t13;
    	let p4;
    	let i;
    	let t14;

    	const block = {
    		c: function create() {
    			div5 = element("div");
    			div0 = element("div");
    			p0 = element("p");
    			p0.textContent = "Your panel";
    			t1 = space();
    			div4 = element("div");
    			div1 = element("div");
    			h30 = element("h3");
    			h30.textContent = "1";
    			t3 = space();
    			p1 = element("p");
    			p1.textContent = "Who's viewed your profile";
    			t5 = space();
    			div2 = element("div");
    			h31 = element("h3");
    			h31.textContent = "50";
    			t7 = space();
    			p2 = element("p");
    			p2.textContent = "Post views";
    			t9 = space();
    			div3 = element("div");
    			h32 = element("h3");
    			h32.textContent = "50";
    			t11 = space();
    			p3 = element("p");
    			p3.textContent = "My network";
    			t13 = space();
    			p4 = element("p");
    			i = element("i");
    			t14 = text(" Mark pages");
    			attr_dev(p0, "class", "mx-3 mx-md-0");
    			add_location(p0, file$a, 22, 4, 410);
    			attr_dev(div0, "class", "Panel-title svelte-1awuuu9");
    			add_location(div0, file$a, 21, 2, 380);
    			attr_dev(h30, "class", "svelte-1awuuu9");
    			add_location(h30, file$a, 26, 6, 615);
    			add_location(p1, file$a, 27, 6, 632);
    			attr_dev(div1, "class", "Default-containers Panel-content text-center svelte-1awuuu9");
    			add_location(div1, file$a, 25, 4, 550);
    			attr_dev(h31, "class", "svelte-1awuuu9");
    			add_location(h31, file$a, 30, 6, 745);
    			add_location(p2, file$a, 31, 6, 763);
    			attr_dev(div2, "class", "Default-containers Panel-content text-center svelte-1awuuu9");
    			add_location(div2, file$a, 29, 4, 680);
    			attr_dev(h32, "class", "svelte-1awuuu9");
    			add_location(h32, file$a, 34, 6, 861);
    			add_location(p3, file$a, 35, 6, 879);
    			attr_dev(div3, "class", "Default-containers Panel-content text-center svelte-1awuuu9");
    			add_location(div3, file$a, 33, 4, 796);
    			attr_dev(div4, "class", "d-flex flex-wrap justify-content-center justify-content-xl-between my-2");
    			add_location(div4, file$a, 24, 2, 460);
    			attr_dev(i, "class", "fas fa-bookmark svelte-1awuuu9");
    			add_location(i, file$a, 38, 27, 944);
    			attr_dev(p4, "class", "mx-3 mx-md-0");
    			add_location(p4, file$a, 38, 2, 919);
    			attr_dev(div5, "class", "Default-containers-grey Panel svelte-1awuuu9");
    			add_location(div5, file$a, 20, 0, 334);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div0);
    			append_dev(div0, p0);
    			append_dev(div5, t1);
    			append_dev(div5, div4);
    			append_dev(div4, div1);
    			append_dev(div1, h30);
    			append_dev(div1, t3);
    			append_dev(div1, p1);
    			append_dev(div4, t5);
    			append_dev(div4, div2);
    			append_dev(div2, h31);
    			append_dev(div2, t7);
    			append_dev(div2, p2);
    			append_dev(div4, t9);
    			append_dev(div4, div3);
    			append_dev(div3, h32);
    			append_dev(div3, t11);
    			append_dev(div3, p3);
    			append_dev(div5, t13);
    			append_dev(div5, p4);
    			append_dev(p4, i);
    			append_dev(p4, t14);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Panel', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Panel> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Panel extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Panel",
    			options,
    			id: create_fragment$a.name
    		});
    	}
    }

    /* src/components/TimelineP.svelte generated by Svelte v3.46.4 */

    const { Error: Error_1, console: console_1 } = globals;
    const file$9 = "src/components/TimelineP.svelte";

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	return child_ctx;
    }

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	return child_ctx;
    }

    function get_each_context_3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	return child_ctx;
    }

    // (141:6) {#if email === localStorage.getItem('user')}
    function create_if_block_5(ctx) {
    	let div;
    	let p;
    	let t1;
    	let addpost;
    	let current;

    	addpost = new AddPost({
    			props: {
    				id: /*id*/ ctx[6],
    				urlAPI: /*urlAPI*/ ctx[7]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			p = element("p");
    			p.textContent = "Post";
    			t1 = space();
    			create_component(addpost.$$.fragment);
    			attr_dev(p, "class", "my-2 svelte-9igu1v");
    			add_location(p, file$9, 142, 10, 3346);
    			attr_dev(div, "class", "Background-post-profile svelte-9igu1v");
    			add_location(div, file$9, 141, 8, 3298);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p);
    			append_dev(div, t1);
    			mount_component(addpost, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const addpost_changes = {};
    			if (dirty[0] & /*id*/ 64) addpost_changes.id = /*id*/ ctx[6];
    			if (dirty[0] & /*urlAPI*/ 128) addpost_changes.urlAPI = /*urlAPI*/ ctx[7];
    			addpost.$set(addpost_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(addpost.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(addpost.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(addpost);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(141:6) {#if email === localStorage.getItem('user')}",
    		ctx
    	});

    	return block;
    }

    // (148:6) {#if experiences !== undefined}
    function create_if_block_4(ctx) {
    	let experience;
    	let current;

    	experience = new Experience({
    			props: {
    				urlAPI: /*urlAPI*/ ctx[7],
    				id: /*id*/ ctx[6],
    				experiences: /*experiences*/ ctx[10],
    				userProfile: /*userProfile*/ ctx[11]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(experience.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(experience, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const experience_changes = {};
    			if (dirty[0] & /*urlAPI*/ 128) experience_changes.urlAPI = /*urlAPI*/ ctx[7];
    			if (dirty[0] & /*id*/ 64) experience_changes.id = /*id*/ ctx[6];
    			if (dirty[0] & /*experiences*/ 1024) experience_changes.experiences = /*experiences*/ ctx[10];
    			if (dirty[0] & /*userProfile*/ 2048) experience_changes.userProfile = /*userProfile*/ ctx[11];
    			experience.$set(experience_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(experience.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(experience.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(experience, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(148:6) {#if experiences !== undefined}",
    		ctx
    	});

    	return block;
    }

    // (153:6) {#if post}
    function create_if_block_2(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_3, create_else_block_1$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*userMain*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(153:6) {#if post}",
    		ctx
    	});

    	return block;
    }

    // (160:8) {:else}
    function create_else_block_1$2(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value_3 = /*post*/ ctx[12];
    	validate_each_argument(each_value_3);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*userPost, post, userId, urlAPI*/ 45184) {
    				each_value_3 = /*post*/ ctx[12];
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3(ctx, each_value_3, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_3(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_3.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_3.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$2.name,
    		type: "else",
    		source: "(160:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (154:8) {#if userMain}
    function create_if_block_3(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value_2 = /*post*/ ctx[12];
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*userPost, post, userMain, urlAPI*/ 12417) {
    				each_value_2 = /*post*/ ctx[12];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_2(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_2.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_2.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(154:8) {#if userMain}",
    		ctx
    	});

    	return block;
    }

    // (162:10) {#each post as dataPost}
    function create_each_block_3(ctx) {
    	let post_1;
    	let current;

    	const post_1_spread_levels = [
    		/*userPost*/ ctx[13],
    		/*dataPost*/ ctx[23],
    		{ userId: /*userId*/ ctx[15] },
    		{ urlAPI: /*urlAPI*/ ctx[7] }
    	];

    	let post_1_props = {};

    	for (let i = 0; i < post_1_spread_levels.length; i += 1) {
    		post_1_props = assign(post_1_props, post_1_spread_levels[i]);
    	}

    	post_1 = new Post({ props: post_1_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(post_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(post_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const post_1_changes = (dirty[0] & /*userPost, post, userId, urlAPI*/ 45184)
    			? get_spread_update(post_1_spread_levels, [
    					dirty[0] & /*userPost*/ 8192 && get_spread_object(/*userPost*/ ctx[13]),
    					dirty[0] & /*post*/ 4096 && get_spread_object(/*dataPost*/ ctx[23]),
    					dirty[0] & /*userId*/ 32768 && { userId: /*userId*/ ctx[15] },
    					dirty[0] & /*urlAPI*/ 128 && { urlAPI: /*urlAPI*/ ctx[7] }
    				])
    			: {};

    			post_1.$set(post_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(post_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(post_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(post_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3.name,
    		type: "each",
    		source: "(162:10) {#each post as dataPost}",
    		ctx
    	});

    	return block;
    }

    // (156:10) {#each post as dataPost}
    function create_each_block_2(ctx) {
    	let post_1;
    	let current;

    	const post_1_spread_levels = [
    		/*userPost*/ ctx[13],
    		/*dataPost*/ ctx[23],
    		{ userMain: /*userMain*/ ctx[0] },
    		{ urlAPI: /*urlAPI*/ ctx[7] }
    	];

    	let post_1_props = {};

    	for (let i = 0; i < post_1_spread_levels.length; i += 1) {
    		post_1_props = assign(post_1_props, post_1_spread_levels[i]);
    	}

    	post_1 = new Post({ props: post_1_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(post_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(post_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const post_1_changes = (dirty[0] & /*userPost, post, userMain, urlAPI*/ 12417)
    			? get_spread_update(post_1_spread_levels, [
    					dirty[0] & /*userPost*/ 8192 && get_spread_object(/*userPost*/ ctx[13]),
    					dirty[0] & /*post*/ 4096 && get_spread_object(/*dataPost*/ ctx[23]),
    					dirty[0] & /*userMain*/ 1 && { userMain: /*userMain*/ ctx[0] },
    					dirty[0] & /*urlAPI*/ 128 && { urlAPI: /*urlAPI*/ ctx[7] }
    				])
    			: {};

    			post_1.$set(post_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(post_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(post_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(post_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(156:10) {#each post as dataPost}",
    		ctx
    	});

    	return block;
    }

    // (170:6) {#if $posts}
    function create_if_block$7(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1$3, create_else_block$5];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*userMain*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(170:6) {#if $posts}",
    		ctx
    	});

    	return block;
    }

    // (177:8) {:else}
    function create_else_block$5(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value_1 = /*$posts*/ ctx[14];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*userPost, $posts, userId, urlAPI*/ 57472) {
    				each_value_1 = /*$posts*/ ctx[14];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(177:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (171:8) {#if userMain}
    function create_if_block_1$3(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*$posts*/ ctx[14];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*userPost, $posts, userMain, urlAPI*/ 24705) {
    				each_value = /*$posts*/ ctx[14];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(171:8) {#if userMain}",
    		ctx
    	});

    	return block;
    }

    // (179:10) {#each $posts as dataPost}
    function create_each_block_1(ctx) {
    	let post_1;
    	let current;

    	const post_1_spread_levels = [
    		/*userPost*/ ctx[13],
    		/*dataPost*/ ctx[23],
    		{ userId: /*userId*/ ctx[15] },
    		{ urlAPI: /*urlAPI*/ ctx[7] }
    	];

    	let post_1_props = {};

    	for (let i = 0; i < post_1_spread_levels.length; i += 1) {
    		post_1_props = assign(post_1_props, post_1_spread_levels[i]);
    	}

    	post_1 = new Post({ props: post_1_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(post_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(post_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const post_1_changes = (dirty[0] & /*userPost, $posts, userId, urlAPI*/ 57472)
    			? get_spread_update(post_1_spread_levels, [
    					dirty[0] & /*userPost*/ 8192 && get_spread_object(/*userPost*/ ctx[13]),
    					dirty[0] & /*$posts*/ 16384 && get_spread_object(/*dataPost*/ ctx[23]),
    					dirty[0] & /*userId*/ 32768 && { userId: /*userId*/ ctx[15] },
    					dirty[0] & /*urlAPI*/ 128 && { urlAPI: /*urlAPI*/ ctx[7] }
    				])
    			: {};

    			post_1.$set(post_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(post_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(post_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(post_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(179:10) {#each $posts as dataPost}",
    		ctx
    	});

    	return block;
    }

    // (173:10) {#each $posts as dataPost}
    function create_each_block$3(ctx) {
    	let post_1;
    	let current;

    	const post_1_spread_levels = [
    		/*userPost*/ ctx[13],
    		/*dataPost*/ ctx[23],
    		{ userMain: /*userMain*/ ctx[0] },
    		{ urlAPI: /*urlAPI*/ ctx[7] }
    	];

    	let post_1_props = {};

    	for (let i = 0; i < post_1_spread_levels.length; i += 1) {
    		post_1_props = assign(post_1_props, post_1_spread_levels[i]);
    	}

    	post_1 = new Post({ props: post_1_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(post_1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(post_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const post_1_changes = (dirty[0] & /*userPost, $posts, userMain, urlAPI*/ 24705)
    			? get_spread_update(post_1_spread_levels, [
    					dirty[0] & /*userPost*/ 8192 && get_spread_object(/*userPost*/ ctx[13]),
    					dirty[0] & /*$posts*/ 16384 && get_spread_object(/*dataPost*/ ctx[23]),
    					dirty[0] & /*userMain*/ 1 && { userMain: /*userMain*/ ctx[0] },
    					dirty[0] & /*urlAPI*/ 128 && { urlAPI: /*urlAPI*/ ctx[7] }
    				])
    			: {};

    			post_1.$set(post_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(post_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(post_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(post_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(173:10) {#each $posts as dataPost}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let div2;
    	let div1;
    	let coverphoto;
    	let t0;
    	let userdetails;
    	let t1;
    	let show_if = /*email*/ ctx[4] === localStorage.getItem('user');
    	let t2;
    	let t3;
    	let panel;
    	let t4;
    	let t5;
    	let t6;
    	let div0;
    	let current;

    	coverphoto = new CoverPhoto({
    			props: {
    				coverPhoto: /*coverPhoto*/ ctx[8],
    				userId: /*userId*/ ctx[15]
    			},
    			$$inline: true
    		});

    	userdetails = new UserDetails({
    			props: {
    				name: /*name*/ ctx[1],
    				last_name: /*last_name*/ ctx[2],
    				title: /*title*/ ctx[3],
    				email: /*email*/ ctx[4],
    				photo: /*photo*/ ctx[5],
    				id: /*id*/ ctx[6],
    				aboutMe: /*aboutMe*/ ctx[9],
    				userMain: /*userMain*/ ctx[0],
    				urlAPI: /*urlAPI*/ ctx[7]
    			},
    			$$inline: true
    		});

    	let if_block0 = show_if && create_if_block_5(ctx);
    	let if_block1 = /*experiences*/ ctx[10] !== undefined && create_if_block_4(ctx);
    	panel = new Panel({ $$inline: true });
    	let if_block2 = /*post*/ ctx[12] && create_if_block_2(ctx);
    	let if_block3 = /*$posts*/ ctx[14] && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			create_component(coverphoto.$$.fragment);
    			t0 = space();
    			create_component(userdetails.$$.fragment);
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			create_component(panel.$$.fragment);
    			t4 = space();
    			if (if_block2) if_block2.c();
    			t5 = space();
    			if (if_block3) if_block3.c();
    			t6 = space();
    			div0 = element("div");
    			div0.textContent = "Sorry! there aren't more posts.";
    			attr_dev(div0, "id", "endPosts");
    			attr_dev(div0, "class", "d-none text-center fw-bold");
    			set_style(div0, "color", "var(--main-color)");
    			add_location(div0, file$9, 185, 6, 4238);
    			attr_dev(div1, "class", "Profile-container");
    			add_location(div1, file$9, 136, 4, 3065);
    			attr_dev(div2, "class", "Profile col-12 col-lg-9");
    			add_location(div2, file$9, 135, 0, 3023);
    		},
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			mount_component(coverphoto, div1, null);
    			append_dev(div1, t0);
    			mount_component(userdetails, div1, null);
    			append_dev(div1, t1);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div1, t2);
    			if (if_block1) if_block1.m(div1, null);
    			append_dev(div1, t3);
    			mount_component(panel, div1, null);
    			append_dev(div1, t4);
    			if (if_block2) if_block2.m(div1, null);
    			append_dev(div1, t5);
    			if (if_block3) if_block3.m(div1, null);
    			append_dev(div1, t6);
    			append_dev(div1, div0);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const coverphoto_changes = {};
    			if (dirty[0] & /*coverPhoto*/ 256) coverphoto_changes.coverPhoto = /*coverPhoto*/ ctx[8];
    			coverphoto.$set(coverphoto_changes);
    			const userdetails_changes = {};
    			if (dirty[0] & /*name*/ 2) userdetails_changes.name = /*name*/ ctx[1];
    			if (dirty[0] & /*last_name*/ 4) userdetails_changes.last_name = /*last_name*/ ctx[2];
    			if (dirty[0] & /*title*/ 8) userdetails_changes.title = /*title*/ ctx[3];
    			if (dirty[0] & /*email*/ 16) userdetails_changes.email = /*email*/ ctx[4];
    			if (dirty[0] & /*photo*/ 32) userdetails_changes.photo = /*photo*/ ctx[5];
    			if (dirty[0] & /*id*/ 64) userdetails_changes.id = /*id*/ ctx[6];
    			if (dirty[0] & /*aboutMe*/ 512) userdetails_changes.aboutMe = /*aboutMe*/ ctx[9];
    			if (dirty[0] & /*userMain*/ 1) userdetails_changes.userMain = /*userMain*/ ctx[0];
    			if (dirty[0] & /*urlAPI*/ 128) userdetails_changes.urlAPI = /*urlAPI*/ ctx[7];
    			userdetails.$set(userdetails_changes);
    			if (dirty[0] & /*email*/ 16) show_if = /*email*/ ctx[4] === localStorage.getItem('user');

    			if (show_if) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*email*/ 16) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_5(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div1, t2);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*experiences*/ ctx[10] !== undefined) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*experiences*/ 1024) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_4(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div1, t3);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*post*/ ctx[12]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*post*/ 4096) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_2(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div1, t5);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (/*$posts*/ ctx[14]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty[0] & /*$posts*/ 16384) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block$7(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div1, t6);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(coverphoto.$$.fragment, local);
    			transition_in(userdetails.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(panel.$$.fragment, local);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(coverphoto.$$.fragment, local);
    			transition_out(userdetails.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(panel.$$.fragment, local);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(coverphoto);
    			destroy_component(userdetails);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			destroy_component(panel);
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let $posts;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TimelineP', slots, []);
    	let { name, last_name, title, email, photo, id, urlAPI } = $$props;
    	let { userMain } = $$props;

    	if (userMain === undefined) {
    		userMain = '';
    	}

    	let coverPhoto;
    	let aboutMe;
    	let userId = id;
    	let data;
    	let experiences;
    	let userProfile;

    	const getProfile = async () => {
    		const response = await fetch(`${urlAPI}/user/profile/?user_id=${id}`);
    		const content = await response.json();

    		if (content[0]) {
    			data = content[0];
    			console.log(data);
    			$$invalidate(11, userProfile = data.id);
    			$$invalidate(10, experiences = data.experiences);
    			$$invalidate(8, coverPhoto = `${urlAPI}${data.cover_img}`);
    			$$invalidate(9, aboutMe = data.about);
    		}
    	};

    	let post;
    	let userPost;
    	let countPost = 0;

    	const getPost = async () => {
    		await fetch(`${urlAPI}/post/create/?user=${id}`).then(res => {
    			if (res.ok) {
    				return res.json();
    			} else {
    				throw new Error("Sorry, there isn't posts to show");
    			}
    		}).then(json => {
    			const content = json;
    			countPost = content.count;

    			if (!content.Detail) {
    				if (content.results) {
    					$$invalidate(12, post = content.results.splice(1));
    					$$invalidate(13, userPost = content.results[0]);
    				}
    			}
    		}).catch(error => {
    			console.error(error);
    		});
    	};

    	const posts = writable([]);
    	validate_store(posts, 'posts');
    	component_subscribe($$self, posts, value => $$invalidate(14, $posts = value));
    	let page = 1;

    	async function getPosts() {
    		page += 1;
    		const response = await fetch(`${urlAPI}/post/create/?page=${page}&user=${id}`);
    		const content = await response.json();
    		countPost = content.count;

    		try {
    			if (content) {
    				posts.set([...$posts, ...content.results]);
    			}
    		} catch(error) {
    			endPosts.classList.remove('d-none');
    		}
    	}

    	if (id === parseInt(localStorage.getItem('userId'))) {
    		setTimeout(
    			() => {
    				const btnSendPost = document.getElementById('btnSendPost');

    				btnSendPost.addEventListener('click', e => {
    					setTimeout(
    						() => {
    							posts.set([]);
    							getPost();
    						},
    						1000
    					);
    				});
    			},
    			2000
    		);
    	}

    	document.addEventListener('scroll', async e => {
    		if (window.innerHeight + window.scrollY >= main.offsetHeight - 1) {
    			if (countPost > 3) {
    				getPosts();
    			}
    		}
    	});

    	onMount(async () => {
    		await getProfile();

    		if (data.posts) {
    			getPost();
    		}
    	});

    	const writable_props = ['name', 'last_name', 'title', 'email', 'photo', 'id', 'urlAPI', 'userMain'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<TimelineP> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('name' in $$props) $$invalidate(1, name = $$props.name);
    		if ('last_name' in $$props) $$invalidate(2, last_name = $$props.last_name);
    		if ('title' in $$props) $$invalidate(3, title = $$props.title);
    		if ('email' in $$props) $$invalidate(4, email = $$props.email);
    		if ('photo' in $$props) $$invalidate(5, photo = $$props.photo);
    		if ('id' in $$props) $$invalidate(6, id = $$props.id);
    		if ('urlAPI' in $$props) $$invalidate(7, urlAPI = $$props.urlAPI);
    		if ('userMain' in $$props) $$invalidate(0, userMain = $$props.userMain);
    	};

    	$$self.$capture_state = () => ({
    		CoverPhoto,
    		UserDetails,
    		Experience,
    		Panel,
    		AddPost,
    		Post,
    		Loader,
    		writable,
    		onMount,
    		name,
    		last_name,
    		title,
    		email,
    		photo,
    		id,
    		urlAPI,
    		userMain,
    		coverPhoto,
    		aboutMe,
    		userId,
    		data,
    		experiences,
    		userProfile,
    		getProfile,
    		post,
    		userPost,
    		countPost,
    		getPost,
    		posts,
    		page,
    		getPosts,
    		$posts
    	});

    	$$self.$inject_state = $$props => {
    		if ('name' in $$props) $$invalidate(1, name = $$props.name);
    		if ('last_name' in $$props) $$invalidate(2, last_name = $$props.last_name);
    		if ('title' in $$props) $$invalidate(3, title = $$props.title);
    		if ('email' in $$props) $$invalidate(4, email = $$props.email);
    		if ('photo' in $$props) $$invalidate(5, photo = $$props.photo);
    		if ('id' in $$props) $$invalidate(6, id = $$props.id);
    		if ('urlAPI' in $$props) $$invalidate(7, urlAPI = $$props.urlAPI);
    		if ('userMain' in $$props) $$invalidate(0, userMain = $$props.userMain);
    		if ('coverPhoto' in $$props) $$invalidate(8, coverPhoto = $$props.coverPhoto);
    		if ('aboutMe' in $$props) $$invalidate(9, aboutMe = $$props.aboutMe);
    		if ('userId' in $$props) $$invalidate(15, userId = $$props.userId);
    		if ('data' in $$props) data = $$props.data;
    		if ('experiences' in $$props) $$invalidate(10, experiences = $$props.experiences);
    		if ('userProfile' in $$props) $$invalidate(11, userProfile = $$props.userProfile);
    		if ('post' in $$props) $$invalidate(12, post = $$props.post);
    		if ('userPost' in $$props) $$invalidate(13, userPost = $$props.userPost);
    		if ('countPost' in $$props) countPost = $$props.countPost;
    		if ('page' in $$props) page = $$props.page;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		userMain,
    		name,
    		last_name,
    		title,
    		email,
    		photo,
    		id,
    		urlAPI,
    		coverPhoto,
    		aboutMe,
    		experiences,
    		userProfile,
    		post,
    		userPost,
    		$posts,
    		userId,
    		posts
    	];
    }

    class TimelineP extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$9,
    			create_fragment$9,
    			safe_not_equal,
    			{
    				name: 1,
    				last_name: 2,
    				title: 3,
    				email: 4,
    				photo: 5,
    				id: 6,
    				urlAPI: 7,
    				userMain: 0
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TimelineP",
    			options,
    			id: create_fragment$9.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*name*/ ctx[1] === undefined && !('name' in props)) {
    			console_1.warn("<TimelineP> was created without expected prop 'name'");
    		}

    		if (/*last_name*/ ctx[2] === undefined && !('last_name' in props)) {
    			console_1.warn("<TimelineP> was created without expected prop 'last_name'");
    		}

    		if (/*title*/ ctx[3] === undefined && !('title' in props)) {
    			console_1.warn("<TimelineP> was created without expected prop 'title'");
    		}

    		if (/*email*/ ctx[4] === undefined && !('email' in props)) {
    			console_1.warn("<TimelineP> was created without expected prop 'email'");
    		}

    		if (/*photo*/ ctx[5] === undefined && !('photo' in props)) {
    			console_1.warn("<TimelineP> was created without expected prop 'photo'");
    		}

    		if (/*id*/ ctx[6] === undefined && !('id' in props)) {
    			console_1.warn("<TimelineP> was created without expected prop 'id'");
    		}

    		if (/*urlAPI*/ ctx[7] === undefined && !('urlAPI' in props)) {
    			console_1.warn("<TimelineP> was created without expected prop 'urlAPI'");
    		}

    		if (/*userMain*/ ctx[0] === undefined && !('userMain' in props)) {
    			console_1.warn("<TimelineP> was created without expected prop 'userMain'");
    		}
    	}

    	get name() {
    		throw new Error_1("<TimelineP>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error_1("<TimelineP>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get last_name() {
    		throw new Error_1("<TimelineP>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set last_name(value) {
    		throw new Error_1("<TimelineP>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error_1("<TimelineP>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error_1("<TimelineP>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get email() {
    		throw new Error_1("<TimelineP>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set email(value) {
    		throw new Error_1("<TimelineP>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get photo() {
    		throw new Error_1("<TimelineP>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set photo(value) {
    		throw new Error_1("<TimelineP>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error_1("<TimelineP>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error_1("<TimelineP>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlAPI() {
    		throw new Error_1("<TimelineP>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error_1("<TimelineP>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get userMain() {
    		throw new Error_1("<TimelineP>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set userMain(value) {
    		throw new Error_1("<TimelineP>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/views/Profile.svelte generated by Svelte v3.46.4 */
    const file$8 = "src/views/Profile.svelte";

    // (46:2) {:else}
    function create_else_block$4(ctx) {
    	let loader;
    	let current;
    	loader = new Loader({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(loader.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(loader, target, anchor);
    			current = true;
    		},
    		p: noop$1,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loader.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loader.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(loader, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(46:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (43:2) {#if id && getUserMainToFirestore}
    function create_if_block$6(ctx) {
    	let timelinep;
    	let t;
    	let sidebarright;
    	let current;

    	timelinep = new TimelineP({
    			props: {
    				name: /*name*/ ctx[0],
    				last_name: /*last_name*/ ctx[5],
    				title: /*title*/ ctx[1],
    				email: /*email*/ ctx[2],
    				photo: /*photo*/ ctx[3],
    				id: /*id*/ ctx[4],
    				urlAPI: urlAPI$2
    			},
    			$$inline: true
    		});

    	sidebarright = new SidebarRight({
    			props: { id: /*id*/ ctx[4], urlAPI: urlAPI$2 },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(timelinep.$$.fragment);
    			t = space();
    			create_component(sidebarright.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(timelinep, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(sidebarright, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const timelinep_changes = {};
    			if (dirty & /*name*/ 1) timelinep_changes.name = /*name*/ ctx[0];
    			if (dirty & /*last_name*/ 32) timelinep_changes.last_name = /*last_name*/ ctx[5];
    			if (dirty & /*title*/ 2) timelinep_changes.title = /*title*/ ctx[1];
    			if (dirty & /*email*/ 4) timelinep_changes.email = /*email*/ ctx[2];
    			if (dirty & /*photo*/ 8) timelinep_changes.photo = /*photo*/ ctx[3];
    			if (dirty & /*id*/ 16) timelinep_changes.id = /*id*/ ctx[4];
    			timelinep.$set(timelinep_changes);
    			const sidebarright_changes = {};
    			if (dirty & /*id*/ 16) sidebarright_changes.id = /*id*/ ctx[4];
    			sidebarright.$set(sidebarright_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(timelinep.$$.fragment, local);
    			transition_in(sidebarright.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(timelinep.$$.fragment, local);
    			transition_out(sidebarright.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(timelinep, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(sidebarright, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(43:2) {#if id && getUserMainToFirestore}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block$6, create_else_block$4];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*id*/ ctx[4] && /*getUserMainToFirestore*/ ctx[6]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", "row");
    			add_location(div, file$8, 41, 0, 1104);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_blocks[current_block_type_index].m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const urlAPI$2 = 'https://api.flylinkers.com';

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Profile', slots, []);
    	let name, title, email, photo, id, last_name, middle_name;
    	let data;
    	let getUserMainToFirestore;

    	const getData = async () => {
    		if (localStorage.getItem('user')) {
    			const response = await fetch(`${urlAPI$2}/user/create/?email=${localStorage.getItem('user')}`, { method: 'GET' });
    			const content = await response.json();
    			data = content[0];
    			await getUserToFirestore(data);
    			$$invalidate(6, getUserMainToFirestore = await getUserToFirestore(data));

    			if (!localStorage.getItem('profilePhoto')) {
    				localStorage.setItem('profilePhoto', data.photo);
    			}

    			$$invalidate(0, name = data.name);
    			middle_name = data.middle_name;
    			$$invalidate(5, last_name = data.last_name);
    			$$invalidate(2, email = data.email);
    			$$invalidate(1, title = data.title);
    			$$invalidate(3, photo = data.photo);
    			$$invalidate(4, id = data.id);
    		}
    	};

    	getData();
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Profile> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		TimelineP,
    		SidebarRight,
    		getUserToFirestore,
    		Loader,
    		urlAPI: urlAPI$2,
    		name,
    		title,
    		email,
    		photo,
    		id,
    		last_name,
    		middle_name,
    		data,
    		getUserMainToFirestore,
    		getData
    	});

    	$$self.$inject_state = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('title' in $$props) $$invalidate(1, title = $$props.title);
    		if ('email' in $$props) $$invalidate(2, email = $$props.email);
    		if ('photo' in $$props) $$invalidate(3, photo = $$props.photo);
    		if ('id' in $$props) $$invalidate(4, id = $$props.id);
    		if ('last_name' in $$props) $$invalidate(5, last_name = $$props.last_name);
    		if ('middle_name' in $$props) middle_name = $$props.middle_name;
    		if ('data' in $$props) data = $$props.data;
    		if ('getUserMainToFirestore' in $$props) $$invalidate(6, getUserMainToFirestore = $$props.getUserMainToFirestore);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [name, title, email, photo, id, last_name, getUserMainToFirestore];
    }

    class Profile extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Profile",
    			options,
    			id: create_fragment$8.name
    		});
    	}
    }

    /* src/views/UserProfile.svelte generated by Svelte v3.46.4 */
    const file$7 = "src/views/UserProfile.svelte";

    // (51:2) {:else}
    function create_else_block$3(ctx) {
    	let loader;
    	let current;
    	loader = new Loader({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(loader.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(loader, target, anchor);
    			current = true;
    		},
    		p: noop$1,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loader.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loader.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(loader, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(51:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (48:2) {#if dataProfile}
    function create_if_block$5(ctx) {
    	let timelinep;
    	let t;
    	let sidebarright;
    	let current;

    	timelinep = new TimelineP({
    			props: {
    				name: /*name*/ ctx[2],
    				last_name: /*last_name*/ ctx[3],
    				title: /*title*/ ctx[4],
    				email: /*email*/ ctx[5],
    				photo: /*photo*/ ctx[6],
    				id: /*id*/ ctx[1],
    				userMain: /*userMain*/ ctx[7],
    				urlAPI: urlAPI$1
    			},
    			$$inline: true
    		});

    	sidebarright = new SidebarRight({
    			props: { id: /*id*/ ctx[1], urlAPI: urlAPI$1 },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(timelinep.$$.fragment);
    			t = space();
    			create_component(sidebarright.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(timelinep, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(sidebarright, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const timelinep_changes = {};
    			if (dirty & /*name*/ 4) timelinep_changes.name = /*name*/ ctx[2];
    			if (dirty & /*last_name*/ 8) timelinep_changes.last_name = /*last_name*/ ctx[3];
    			if (dirty & /*title*/ 16) timelinep_changes.title = /*title*/ ctx[4];
    			if (dirty & /*email*/ 32) timelinep_changes.email = /*email*/ ctx[5];
    			if (dirty & /*photo*/ 64) timelinep_changes.photo = /*photo*/ ctx[6];
    			if (dirty & /*id*/ 2) timelinep_changes.id = /*id*/ ctx[1];
    			timelinep.$set(timelinep_changes);
    			const sidebarright_changes = {};
    			if (dirty & /*id*/ 2) sidebarright_changes.id = /*id*/ ctx[1];
    			sidebarright.$set(sidebarright_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(timelinep.$$.fragment, local);
    			transition_in(sidebarright.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(timelinep.$$.fragment, local);
    			transition_out(sidebarright.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(timelinep, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(sidebarright, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(48:2) {#if dataProfile}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block$5, create_else_block$3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*dataProfile*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", "row");
    			add_location(div, file$7, 46, 0, 1211);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_blocks[current_block_type_index].m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const urlAPI$1 = 'https://api.flylinkers.com';

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('UserProfile', slots, []);
    	let userMain = localStorage.getItem('userId');
    	let { params } = $$props;
    	const urlUser = window.location.pathname;

    	// const urluserProfile = urlUser.slice(9)
    	const urluserProfile = localStorage.getItem('visitProfile');

    	let userProfile;
    	let dataProfile;
    	let id, name, last_name, title, email, photo;

    	const getUser = async () => {
    		const response = await fetch(`${urlAPI$1}/user/create/?email=${params.user}`);
    		const content = await response.json();
    		userProfile = content[0];
    		$$invalidate(1, id = userProfile.id);
    		$$invalidate(2, name = userProfile.name);
    		$$invalidate(3, last_name = userProfile.last_name);
    		$$invalidate(4, title = userProfile.title);
    		$$invalidate(5, email = userProfile.email);
    		$$invalidate(6, photo = userProfile.photo);
    		getUserProfile(userProfile.id);
    	};

    	const getUserProfile = async id => {
    		const response = await fetch(`${urlAPI$1}/user/profile/?user_id=${id}`);
    		const content = await response.json();
    		$$invalidate(0, dataProfile = content[0]);
    	};

    	onMount(() => {
    		getUser();
    	});

    	const writable_props = ['params'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UserProfile> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('params' in $$props) $$invalidate(8, params = $$props.params);
    	};

    	$$self.$capture_state = () => ({
    		TimelineP,
    		SidebarRight,
    		Loader,
    		onMount,
    		userMain,
    		params,
    		urlAPI: urlAPI$1,
    		urlUser,
    		urluserProfile,
    		userProfile,
    		dataProfile,
    		id,
    		name,
    		last_name,
    		title,
    		email,
    		photo,
    		getUser,
    		getUserProfile
    	});

    	$$self.$inject_state = $$props => {
    		if ('userMain' in $$props) $$invalidate(7, userMain = $$props.userMain);
    		if ('params' in $$props) $$invalidate(8, params = $$props.params);
    		if ('userProfile' in $$props) userProfile = $$props.userProfile;
    		if ('dataProfile' in $$props) $$invalidate(0, dataProfile = $$props.dataProfile);
    		if ('id' in $$props) $$invalidate(1, id = $$props.id);
    		if ('name' in $$props) $$invalidate(2, name = $$props.name);
    		if ('last_name' in $$props) $$invalidate(3, last_name = $$props.last_name);
    		if ('title' in $$props) $$invalidate(4, title = $$props.title);
    		if ('email' in $$props) $$invalidate(5, email = $$props.email);
    		if ('photo' in $$props) $$invalidate(6, photo = $$props.photo);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [dataProfile, id, name, last_name, title, email, photo, userMain, params];
    }

    class UserProfile extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, { params: 8 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UserProfile",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*params*/ ctx[8] === undefined && !('params' in props)) {
    			console.warn("<UserProfile> was created without expected prop 'params'");
    		}
    	}

    	get params() {
    		throw new Error("<UserProfile>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<UserProfile>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/views/Login.svelte generated by Svelte v3.46.4 */

    const file$6 = "src/views/Login.svelte";

    function create_fragment$6(ctx) {
    	let h1;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "hola mundo =)";
    			add_location(h1, file$6, 4, 0, 34);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Login', slots, []);
    	alert('hi');
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Login> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Login extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Login",
    			options,
    			id: create_fragment$6.name
    		});
    	}
    }

    localStorage.getItem('visitProfile');

    const routes = {
      '/': Home,
      '/profile': Profile,
      '/profile/:user': UserProfile
    };

    /* src/components/navbar/NotificationsHeader.svelte generated by Svelte v3.46.4 */
    const file$5 = "src/components/navbar/NotificationsHeader.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    // (117:2) {#if notifications >= 1}
    function create_if_block$4(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*notifications*/ ctx[1]);
    			attr_dev(div, "class", "notifications svelte-vkg9ez");
    			add_location(div, file$5, 117, 5, 2412);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*notifications*/ 2) set_data_dev(t, /*notifications*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(117:2) {#if notifications >= 1}",
    		ctx
    	});

    	return block;
    }

    // (137:4) {:else}
    function create_else_block$2(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "you haven't news";
    			attr_dev(p, "class", "text-center");
    			add_location(p, file$5, 137, 7, 3230);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(137:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (122:4) {#each friendRequest as request}
    function create_each_block$2(ctx) {
    	let li;
    	let a;
    	let span1;
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let span0;
    	let t1_value = /*request*/ ctx[8].name + "";
    	let t1;
    	let t2;
    	let t3_value = /*request*/ ctx[8].last_name + "";
    	let t3;
    	let t4;
    	let div1;
    	let button0;
    	let t6;
    	let button1;
    	let a_href_value;
    	let t8;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			li = element("li");
    			a = element("a");
    			span1 = element("span");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			span0 = element("span");
    			t1 = text(t1_value);
    			t2 = space();
    			t3 = text(t3_value);
    			t4 = space();
    			div1 = element("div");
    			button0 = element("button");
    			button0.textContent = "Accept";
    			t6 = space();
    			button1 = element("button");
    			button1.textContent = "Decline";
    			t8 = space();
    			if (!src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[0] + /*request*/ ctx[8].photo))) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			attr_dev(img, "class", "svelte-vkg9ez");
    			add_location(img, file$5, 126, 14, 2788);
    			add_location(span0, file$5, 127, 14, 2845);
    			attr_dev(div0, "class", "userData svelte-vkg9ez");
    			add_location(div0, file$5, 125, 12, 2751);
    			attr_dev(button0, "class", "btn-request btn-success svelte-vkg9ez");
    			add_location(button0, file$5, 130, 14, 2965);
    			attr_dev(button1, "id", "declineRequest");
    			attr_dev(button1, "class", "btn-request btn-decline svelte-vkg9ez");
    			add_location(button1, file$5, 131, 14, 3072);
    			attr_dev(div1, "class", "btns-request svelte-vkg9ez");
    			add_location(div1, file$5, 129, 12, 2924);
    			attr_dev(span1, "class", "dropdown-item svelte-vkg9ez");
    			add_location(span1, file$5, 124, 10, 2710);
    			attr_dev(a, "href", a_href_value = "/profile/" + /*request*/ ctx[8].email);
    			attr_dev(a, "class", "d-flex");
    			add_location(a, file$5, 123, 8, 2590);
    			add_location(li, file$5, 122, 7, 2577);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, a);
    			append_dev(a, span1);
    			append_dev(span1, div0);
    			append_dev(div0, img);
    			append_dev(div0, t0);
    			append_dev(div0, span0);
    			append_dev(span0, t1);
    			append_dev(span0, t2);
    			append_dev(span0, t3);
    			append_dev(span1, t4);
    			append_dev(span1, div1);
    			append_dev(div1, button0);
    			append_dev(div1, t6);
    			append_dev(div1, button1);
    			append_dev(li, t8);

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*acceptRequest*/ ctx[3](/*request*/ ctx[8].id))) /*acceptRequest*/ ctx[3](/*request*/ ctx[8].id).apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						a,
    						"click",
    						function () {
    							if (is_function(/*visitProfile*/ ctx[4](/*request*/ ctx[8].email))) /*visitProfile*/ ctx[4](/*request*/ ctx[8].email).apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					action_destroyer(link.call(null, a)),
    					action_destroyer(active.call(null, a))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*urlAPI, friendRequest*/ 5 && !src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[0] + /*request*/ ctx[8].photo))) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*friendRequest*/ 4 && t1_value !== (t1_value = /*request*/ ctx[8].name + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*friendRequest*/ 4 && t3_value !== (t3_value = /*request*/ ctx[8].last_name + "")) set_data_dev(t3, t3_value);

    			if (dirty & /*friendRequest*/ 4 && a_href_value !== (a_href_value = "/profile/" + /*request*/ ctx[8].email)) {
    				attr_dev(a, "href", a_href_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(122:4) {#each friendRequest as request}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let div;
    	let i;
    	let t0;
    	let t1;
    	let ul;
    	let if_block = /*notifications*/ ctx[1] >= 1 && create_if_block$4(ctx);
    	let each_value = /*friendRequest*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block$2(ctx);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			i = element("i");
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			if (each_1_else) {
    				each_1_else.c();
    			}

    			attr_dev(i, "class", "fas fa-bell dropdown-toggle svelte-vkg9ez");
    			attr_dev(i, "id", "notifications");
    			attr_dev(i, "data-bs-toggle", "dropdown");
    			attr_dev(i, "aria-expanded", "false");
    			add_location(i, file$5, 115, 2, 2269);
    			attr_dev(ul, "class", "dropdown-menu");
    			attr_dev(ul, "aria-labelledby", "notifications");
    			add_location(ul, file$5, 120, 2, 2474);
    			attr_dev(div, "class", "dropdown svelte-vkg9ez");
    			add_location(div, file$5, 114, 0, 2244);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, i);
    			append_dev(div, t0);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t1);
    			append_dev(div, ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			if (each_1_else) {
    				each_1_else.m(ul, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*notifications*/ ctx[1] >= 1) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$4(ctx);
    					if_block.c();
    					if_block.m(div, t1);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*friendRequest, visitProfile, acceptRequest, urlAPI*/ 29) {
    				each_value = /*friendRequest*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;

    				if (each_value.length) {
    					if (each_1_else) {
    						each_1_else.d(1);
    						each_1_else = null;
    					}
    				} else if (!each_1_else) {
    					each_1_else = create_else_block$2(ctx);
    					each_1_else.c();
    					each_1_else.m(ul, null);
    				}
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks, detaching);
    			if (each_1_else) each_1_else.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NotificationsHeader', slots, []);
    	let notifications = 0;
    	let { id, urlAPI } = $$props;
    	let friendRequest = [];

    	const showFriendRequest = async () => {
    		const response = await fetch(`${urlAPI}/friend/request/?user_id=${id}`);
    		const content = await response.json();
    		$$invalidate(2, friendRequest = content);
    		$$invalidate(1, notifications = friendRequest.length);
    	};

    	showFriendRequest();

    	const acceptRequest = async Friendid => {
    		const response = await fetch(`${urlAPI}/friend/request/`, {
    			method: 'PUT',
    			headers: { 'Content-Type': 'application/json' },
    			body: JSON.stringify({ sender_id: Friendid, receptor_id: id })
    		});

    		const content = await response.json();

    		if (content.Detail === 'OK') {
    			window.location.reload();
    		}
    	};

    	const viewUserProfile = email => {
    		window.location.pathname = `profile/${email}`;
    	};

    	const visitProfile = email => {
    		localStorage.setItem('visitProfile', email);
    	};

    	const writable_props = ['id', 'urlAPI'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NotificationsHeader> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(5, id = $$props.id);
    		if ('urlAPI' in $$props) $$invalidate(0, urlAPI = $$props.urlAPI);
    	};

    	$$self.$capture_state = () => ({
    		link,
    		active,
    		notifications,
    		id,
    		urlAPI,
    		friendRequest,
    		showFriendRequest,
    		acceptRequest,
    		viewUserProfile,
    		visitProfile
    	});

    	$$self.$inject_state = $$props => {
    		if ('notifications' in $$props) $$invalidate(1, notifications = $$props.notifications);
    		if ('id' in $$props) $$invalidate(5, id = $$props.id);
    		if ('urlAPI' in $$props) $$invalidate(0, urlAPI = $$props.urlAPI);
    		if ('friendRequest' in $$props) $$invalidate(2, friendRequest = $$props.friendRequest);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [urlAPI, notifications, friendRequest, acceptRequest, visitProfile, id];
    }

    class NotificationsHeader extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, { id: 5, urlAPI: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NotificationsHeader",
    			options,
    			id: create_fragment$5.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[5] === undefined && !('id' in props)) {
    			console.warn("<NotificationsHeader> was created without expected prop 'id'");
    		}

    		if (/*urlAPI*/ ctx[0] === undefined && !('urlAPI' in props)) {
    			console.warn("<NotificationsHeader> was created without expected prop 'urlAPI'");
    		}
    	}

    	get id() {
    		throw new Error("<NotificationsHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<NotificationsHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlAPI() {
    		throw new Error("<NotificationsHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error("<NotificationsHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/navbar/chatList/ChatList.svelte generated by Svelte v3.46.4 */

    const file$4 = "src/components/navbar/chatList/ChatList.svelte";

    // (64:0) {#if data}
    function create_if_block$3(ctx) {
    	let li;
    	let img;
    	let img_src_value;
    	let t0;
    	let span;
    	let p0;
    	let t1;
    	let t2;
    	let p1;
    	let t3;

    	const block = {
    		c: function create() {
    			li = element("li");
    			img = element("img");
    			t0 = space();
    			span = element("span");
    			p0 = element("p");
    			t1 = text(/*name*/ ctx[2]);
    			t2 = space();
    			p1 = element("p");
    			t3 = text(/*message*/ ctx[3]);
    			attr_dev(img, "id", "chat");
    			attr_dev(img, "data-chat", /*chatId*/ ctx[4]);
    			if (!src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[0] + /*data*/ ctx[1].photo))) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "img");
    			attr_dev(img, "class", "svelte-1e3lw2e");
    			add_location(img, file$4, 65, 4, 1381);
    			attr_dev(p0, "id", "chat");
    			attr_dev(p0, "data-chat", /*chatId*/ ctx[4]);
    			attr_dev(p0, "class", "svelte-1e3lw2e");
    			add_location(p0, file$4, 67, 6, 1499);
    			attr_dev(p1, "id", "chat");
    			attr_dev(p1, "data-chat", /*chatId*/ ctx[4]);
    			attr_dev(p1, "class", "messageText svelte-1e3lw2e");
    			add_location(p1, file$4, 68, 6, 1548);
    			attr_dev(span, "id", "chat");
    			attr_dev(span, "data-chat", /*chatId*/ ctx[4]);
    			attr_dev(span, "class", "svelte-1e3lw2e");
    			add_location(span, file$4, 66, 4, 1457);
    			attr_dev(li, "class", "dropdown-item chatList d-flex svelte-1e3lw2e");
    			add_location(li, file$4, 64, 2, 1334);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, img);
    			append_dev(li, t0);
    			append_dev(li, span);
    			append_dev(span, p0);
    			append_dev(p0, t1);
    			append_dev(span, t2);
    			append_dev(span, p1);
    			append_dev(p1, t3);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*chatId*/ 16) {
    				attr_dev(img, "data-chat", /*chatId*/ ctx[4]);
    			}

    			if (dirty & /*urlAPI, data*/ 3 && !src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[0] + /*data*/ ctx[1].photo))) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*name*/ 4) set_data_dev(t1, /*name*/ ctx[2]);

    			if (dirty & /*chatId*/ 16) {
    				attr_dev(p0, "data-chat", /*chatId*/ ctx[4]);
    			}

    			if (dirty & /*message*/ 8) set_data_dev(t3, /*message*/ ctx[3]);

    			if (dirty & /*chatId*/ 16) {
    				attr_dev(p1, "data-chat", /*chatId*/ ctx[4]);
    			}

    			if (dirty & /*chatId*/ 16) {
    				attr_dev(span, "data-chat", /*chatId*/ ctx[4]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(64:0) {#if data}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let if_block_anchor;
    	let if_block = /*data*/ ctx[1] && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*data*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$3(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ChatList', slots, []);
    	let { urlAPI, id, groups } = $$props;
    	let data;
    	let name;
    	let message;
    	let user1;
    	let user2;

    	// console.log(id, groups);
    	let chatId;

    	const getLastMessage = async () => {
    		$$invalidate(4, chatId = await getGroupUser(groups));
    		user1 = await getUser(id);
    		user2 = await getUser(chatId);
    		const groupId = await validateGroup(user1, user2);
    		const lastMessage = await getMessage(groupId);
    		$$invalidate(3, message = lastMessage[0].messageText);
    	}; // console.log(lastMessage[0].messageText);

    	const getUserChat = async () => {
    		await getLastMessage();
    		const response = await fetch(`${urlAPI}/user/create/?id=${chatId}`);
    		const content = await response.json();
    		$$invalidate(1, data = content[0]);

    		// console.log(data);
    		$$invalidate(2, name = `${data.name} ${data.last_name}`);
    	};

    	onMount(() => {
    		getUserChat();
    	});

    	const writable_props = ['urlAPI', 'id', 'groups'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ChatList> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('urlAPI' in $$props) $$invalidate(0, urlAPI = $$props.urlAPI);
    		if ('id' in $$props) $$invalidate(5, id = $$props.id);
    		if ('groups' in $$props) $$invalidate(6, groups = $$props.groups);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		validateGroup,
    		getUser,
    		getMessage,
    		getGroupUser,
    		urlAPI,
    		id,
    		groups,
    		data,
    		name,
    		message,
    		user1,
    		user2,
    		chatId,
    		getLastMessage,
    		getUserChat
    	});

    	$$self.$inject_state = $$props => {
    		if ('urlAPI' in $$props) $$invalidate(0, urlAPI = $$props.urlAPI);
    		if ('id' in $$props) $$invalidate(5, id = $$props.id);
    		if ('groups' in $$props) $$invalidate(6, groups = $$props.groups);
    		if ('data' in $$props) $$invalidate(1, data = $$props.data);
    		if ('name' in $$props) $$invalidate(2, name = $$props.name);
    		if ('message' in $$props) $$invalidate(3, message = $$props.message);
    		if ('user1' in $$props) user1 = $$props.user1;
    		if ('user2' in $$props) user2 = $$props.user2;
    		if ('chatId' in $$props) $$invalidate(4, chatId = $$props.chatId);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [urlAPI, data, name, message, chatId, id, groups];
    }

    class ChatList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, { urlAPI: 0, id: 5, groups: 6 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ChatList",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*urlAPI*/ ctx[0] === undefined && !('urlAPI' in props)) {
    			console.warn("<ChatList> was created without expected prop 'urlAPI'");
    		}

    		if (/*id*/ ctx[5] === undefined && !('id' in props)) {
    			console.warn("<ChatList> was created without expected prop 'id'");
    		}

    		if (/*groups*/ ctx[6] === undefined && !('groups' in props)) {
    			console.warn("<ChatList> was created without expected prop 'groups'");
    		}
    	}

    	get urlAPI() {
    		throw new Error("<ChatList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error("<ChatList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<ChatList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<ChatList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get groups() {
    		throw new Error("<ChatList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set groups(value) {
    		throw new Error("<ChatList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/navbar/HeaderNav.svelte generated by Svelte v3.46.4 */
    const file$3 = "src/components/navbar/HeaderNav.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	return child_ctx;
    }

    // (103:4) {#if newChat}
    function create_if_block_1$2(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*newChat*/ ctx[3]);
    			attr_dev(div, "class", "notificacions-chats svelte-cg5i0q");
    			add_location(div, file$3, 103, 6, 2284);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*newChat*/ 8) set_data_dev(t, /*newChat*/ ctx[3]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(103:4) {#if newChat}",
    		ctx
    	});

    	return block;
    }

    // (111:6) {:else}
    function create_else_block_1$1(ctx) {
    	let li;
    	let span;
    	let t1;

    	const block = {
    		c: function create() {
    			li = element("li");
    			span = element("span");
    			span.textContent = "You haven't started any chat";
    			t1 = space();
    			add_location(span, file$3, 112, 10, 2664);
    			attr_dev(li, "class", "dropdown-item chatList d-flex svelte-cg5i0q");
    			add_location(li, file$3, 111, 8, 2611);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, span);
    			append_dev(li, t1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(111:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (109:6) {#each $usergroups as groups}
    function create_each_block$1(ctx) {
    	let chatlist;
    	let current;

    	chatlist = new ChatList({
    			props: {
    				groups: /*groups*/ ctx[10],
    				urlAPI: /*urlAPI*/ ctx[2],
    				id: /*id*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(chatlist.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(chatlist, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const chatlist_changes = {};
    			if (dirty & /*$usergroups*/ 16) chatlist_changes.groups = /*groups*/ ctx[10];
    			if (dirty & /*urlAPI*/ 4) chatlist_changes.urlAPI = /*urlAPI*/ ctx[2];
    			if (dirty & /*id*/ 2) chatlist_changes.id = /*id*/ ctx[1];
    			chatlist.$set(chatlist_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(chatlist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(chatlist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(chatlist, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(109:6) {#each $usergroups as groups}",
    		ctx
    	});

    	return block;
    }

    // (125:6) {:else}
    function create_else_block$1(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "id", "headerUserImage");
    			if (!src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[2] + /*photo*/ ctx[0]))) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			attr_dev(img, "class", "svelte-cg5i0q");
    			add_location(img, file$3, 125, 8, 3132);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*urlAPI, photo*/ 5 && !src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[2] + /*photo*/ ctx[0]))) {
    				attr_dev(img, "src", img_src_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(125:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (123:6) {#if localStorage.getItem('profilePhoto')}
    function create_if_block$2(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "id", "headerUserImage");
    			if (!src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[2] + localStorage.getItem('profilePhoto')))) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			attr_dev(img, "class", "svelte-cg5i0q");
    			add_location(img, file$3, 123, 8, 3023);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*urlAPI*/ 4 && !src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[2] + localStorage.getItem('profilePhoto')))) {
    				attr_dev(img, "src", img_src_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(123:6) {#if localStorage.getItem('profilePhoto')}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let nav;
    	let div0;
    	let a0;
    	let i0;
    	let t0;
    	let div1;
    	let a1;
    	let i1;
    	let t1;
    	let div2;
    	let a2;
    	let i2;
    	let t2;
    	let div3;
    	let t3;
    	let i3;
    	let t4;
    	let ul0;
    	let t5;
    	let div4;
    	let notifications;
    	let t6;
    	let div5;
    	let a3;
    	let t7;
    	let div7;
    	let a4;
    	let div6;
    	let i4;
    	let t8;
    	let ul1;
    	let li0;
    	let span0;
    	let t10;
    	let li1;
    	let span1;
    	let t12;
    	let div8;
    	let a5;
    	let i5;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*newChat*/ ctx[3] && create_if_block_1$2(ctx);
    	let each_value = /*$usergroups*/ ctx[4];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block_1$1(ctx);
    	}

    	notifications = new NotificationsHeader({
    			props: {
    				id: /*id*/ ctx[1],
    				urlAPI: /*urlAPI*/ ctx[2]
    			},
    			$$inline: true
    		});

    	function select_block_type(ctx, dirty) {
    		if (localStorage.getItem('profilePhoto')) return create_if_block$2;
    		return create_else_block$1;
    	}

    	let current_block_type = select_block_type();
    	let if_block1 = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			div0 = element("div");
    			a0 = element("a");
    			i0 = element("i");
    			t0 = space();
    			div1 = element("div");
    			a1 = element("a");
    			i1 = element("i");
    			t1 = space();
    			div2 = element("div");
    			a2 = element("a");
    			i2 = element("i");
    			t2 = space();
    			div3 = element("div");
    			if (if_block0) if_block0.c();
    			t3 = space();
    			i3 = element("i");
    			t4 = space();
    			ul0 = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			if (each_1_else) {
    				each_1_else.c();
    			}

    			t5 = space();
    			div4 = element("div");
    			create_component(notifications.$$.fragment);
    			t6 = space();
    			div5 = element("div");
    			a3 = element("a");
    			if_block1.c();
    			t7 = space();
    			div7 = element("div");
    			a4 = element("a");
    			div6 = element("div");
    			i4 = element("i");
    			t8 = space();
    			ul1 = element("ul");
    			li0 = element("li");
    			span0 = element("span");
    			span0.textContent = "Settings";
    			t10 = space();
    			li1 = element("li");
    			span1 = element("span");
    			span1.textContent = "Log Out";
    			t12 = space();
    			div8 = element("div");
    			a5 = element("a");
    			i5 = element("i");
    			attr_dev(i0, "class", "fas fa-home svelte-cg5i0q");
    			add_location(i0, file$3, 88, 6, 1847);
    			attr_dev(a0, "href", "/");
    			add_location(a0, file$3, 87, 4, 1808);
    			attr_dev(div0, "class", "icon Header-nav-home mx-3 fs-3 svelte-cg5i0q");
    			add_location(div0, file$3, 86, 2, 1759);
    			attr_dev(i1, "class", "fas fa-user-plus svelte-cg5i0q");
    			add_location(i1, file$3, 93, 6, 1988);
    			attr_dev(a1, "href", "/");
    			add_location(a1, file$3, 92, 4, 1949);
    			attr_dev(div1, "class", "icon Header-nav-user-plus mx-3 fs-3 svelte-cg5i0q");
    			add_location(div1, file$3, 91, 2, 1895);
    			attr_dev(i2, "class", "fas fa-briefcase svelte-cg5i0q");
    			add_location(i2, file$3, 98, 6, 2141);
    			attr_dev(a2, "href", "/");
    			add_location(a2, file$3, 97, 4, 2102);
    			attr_dev(div2, "class", "icon Header-nav-briefcase hidden mx-3 fs-3 svelte-cg5i0q");
    			add_location(div2, file$3, 96, 2, 2041);
    			attr_dev(i3, "class", "fas fa-comment dropdown-toggle svelte-cg5i0q");
    			attr_dev(i3, "id", "chats");
    			attr_dev(i3, "data-bs-toggle", "dropdown");
    			attr_dev(i3, "aria-expanded", "false");
    			add_location(i3, file$3, 106, 4, 2348);
    			attr_dev(ul0, "class", "dropdown-menu");
    			attr_dev(ul0, "aria-labelledby", "chats");
    			add_location(ul0, file$3, 107, 4, 2458);
    			attr_dev(div3, "class", "icon Header-nav-comment mx-3 fs-3 position-relative svelte-cg5i0q");
    			add_location(div3, file$3, 101, 2, 2194);
    			attr_dev(div4, "class", "icon Header-nav-bell mx-3 fs-3 notification svelte-cg5i0q");
    			attr_dev(div4, "id", "notification");
    			add_location(div4, file$3, 117, 2, 2755);
    			attr_dev(a3, "href", "/profile");
    			add_location(a3, file$3, 121, 4, 2926);
    			attr_dev(div5, "class", "icon Header-nav-user mx-3 fs-3 svelte-cg5i0q");
    			add_location(div5, file$3, 120, 2, 2877);
    			attr_dev(i4, "class", "fas fa-grip-vertical dropdown-toggle svelte-cg5i0q");
    			attr_dev(i4, "id", "settings");
    			attr_dev(i4, "data-bs-toggle", "dropdown");
    			attr_dev(i4, "aria-expanded", "false");
    			add_location(i4, file$3, 132, 8, 3348);
    			attr_dev(span0, "class", "dropdown-item svelte-cg5i0q");
    			add_location(span0, file$3, 134, 14, 3540);
    			add_location(li0, file$3, 134, 10, 3536);
    			attr_dev(span1, "class", "dropdown-item svelte-cg5i0q");
    			add_location(span1, file$3, 135, 14, 3603);
    			add_location(li1, file$3, 135, 10, 3599);
    			attr_dev(ul1, "class", "dropdown-menu");
    			attr_dev(ul1, "aria-labelledby", "settings");
    			add_location(ul1, file$3, 133, 8, 3472);
    			attr_dev(div6, "class", "dropdown svelte-cg5i0q");
    			add_location(div6, file$3, 131, 6, 3317);
    			attr_dev(a4, "href", "/");
    			add_location(a4, file$3, 130, 4, 3278);
    			attr_dev(div7, "class", "icon Header-nav-grip-vertical mx-3 fs-3 svelte-cg5i0q");
    			add_location(div7, file$3, 129, 2, 3220);
    			attr_dev(i5, "class", "fas fa-calendar-week svelte-cg5i0q");
    			add_location(i5, file$3, 142, 6, 3820);
    			attr_dev(a5, "href", "/");
    			add_location(a5, file$3, 141, 4, 3781);
    			attr_dev(div8, "class", "icon Header-nav-calendar-week hidden mx-3 fs-3 svelte-cg5i0q");
    			add_location(div8, file$3, 140, 2, 3716);
    			attr_dev(nav, "class", "nav-container d-flex");
    			add_location(nav, file$3, 85, 0, 1722);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);
    			append_dev(nav, div0);
    			append_dev(div0, a0);
    			append_dev(a0, i0);
    			append_dev(nav, t0);
    			append_dev(nav, div1);
    			append_dev(div1, a1);
    			append_dev(a1, i1);
    			append_dev(nav, t1);
    			append_dev(nav, div2);
    			append_dev(div2, a2);
    			append_dev(a2, i2);
    			append_dev(nav, t2);
    			append_dev(nav, div3);
    			if (if_block0) if_block0.m(div3, null);
    			append_dev(div3, t3);
    			append_dev(div3, i3);
    			append_dev(div3, t4);
    			append_dev(div3, ul0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul0, null);
    			}

    			if (each_1_else) {
    				each_1_else.m(ul0, null);
    			}

    			append_dev(nav, t5);
    			append_dev(nav, div4);
    			mount_component(notifications, div4, null);
    			append_dev(nav, t6);
    			append_dev(nav, div5);
    			append_dev(div5, a3);
    			if_block1.m(a3, null);
    			append_dev(nav, t7);
    			append_dev(nav, div7);
    			append_dev(div7, a4);
    			append_dev(a4, div6);
    			append_dev(div6, i4);
    			append_dev(div6, t8);
    			append_dev(div6, ul1);
    			append_dev(ul1, li0);
    			append_dev(li0, span0);
    			append_dev(ul1, t10);
    			append_dev(ul1, li1);
    			append_dev(li1, span1);
    			append_dev(nav, t12);
    			append_dev(nav, div8);
    			append_dev(div8, a5);
    			append_dev(a5, i5);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(link.call(null, a0)),
    					action_destroyer(active.call(null, a0)),
    					action_destroyer(link.call(null, a1)),
    					action_destroyer(active.call(null, a1)),
    					action_destroyer(link.call(null, a2)),
    					action_destroyer(active.call(null, a2)),
    					action_destroyer(link.call(null, a3)),
    					action_destroyer(active.call(null, a3)),
    					listen_dev(span1, "click", /*logOut*/ ctx[6], false, false, false),
    					action_destroyer(link.call(null, a4)),
    					action_destroyer(active.call(null, a4)),
    					action_destroyer(link.call(null, a5)),
    					action_destroyer(active.call(null, a5))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*newChat*/ ctx[3]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$2(ctx);
    					if_block0.c();
    					if_block0.m(div3, t3);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*$usergroups, urlAPI, id*/ 22) {
    				each_value = /*$usergroups*/ ctx[4];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(ul0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();

    				if (each_value.length) {
    					if (each_1_else) {
    						each_1_else.d(1);
    						each_1_else = null;
    					}
    				} else if (!each_1_else) {
    					each_1_else = create_else_block_1$1(ctx);
    					each_1_else.c();
    					each_1_else.m(ul0, null);
    				}
    			}

    			const notifications_changes = {};
    			if (dirty & /*id*/ 2) notifications_changes.id = /*id*/ ctx[1];
    			if (dirty & /*urlAPI*/ 4) notifications_changes.urlAPI = /*urlAPI*/ ctx[2];
    			notifications.$set(notifications_changes);
    			if_block1.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(notifications.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(notifications.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    			if (if_block0) if_block0.d();
    			destroy_each(each_blocks, detaching);
    			if (each_1_else) each_1_else.d();
    			destroy_component(notifications);
    			if_block1.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let $usergroups;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('HeaderNav', slots, []);
    	let { photo, id } = $$props;
    	let { urlLogOut, urlAPI } = $$props;
    	let usergroups = writable([]);
    	validate_store(usergroups, 'usergroups');
    	component_subscribe($$self, usergroups, value => $$invalidate(4, $usergroups = value));
    	let idStr = id.toString();
    	let newChat;

    	function getUserDoc() {
    		Ah(Na(db, 'user', idStr), doc => {
    			usergroups.set(doc.data().groups);
    			$$invalidate(3, newChat = doc.data().groups.length);
    		});
    	}

    	getUserDoc();

    	const logOut = () => {
    		localStorage.clear();
    		window.location.href = urlLogOut;
    	};

    	const writable_props = ['photo', 'id', 'urlLogOut', 'urlAPI'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<HeaderNav> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('photo' in $$props) $$invalidate(0, photo = $$props.photo);
    		if ('id' in $$props) $$invalidate(1, id = $$props.id);
    		if ('urlLogOut' in $$props) $$invalidate(7, urlLogOut = $$props.urlLogOut);
    		if ('urlAPI' in $$props) $$invalidate(2, urlAPI = $$props.urlAPI);
    	};

    	$$self.$capture_state = () => ({
    		link,
    		active,
    		db,
    		collectionData,
    		startWith,
    		collection: Da,
    		orderBy: Gu,
    		query: Ku,
    		doc: Na,
    		onSnapshot: Ah,
    		writable,
    		Notifications: NotificationsHeader,
    		ChatList,
    		photo,
    		id,
    		urlLogOut,
    		urlAPI,
    		usergroups,
    		idStr,
    		newChat,
    		getUserDoc,
    		logOut,
    		$usergroups
    	});

    	$$self.$inject_state = $$props => {
    		if ('photo' in $$props) $$invalidate(0, photo = $$props.photo);
    		if ('id' in $$props) $$invalidate(1, id = $$props.id);
    		if ('urlLogOut' in $$props) $$invalidate(7, urlLogOut = $$props.urlLogOut);
    		if ('urlAPI' in $$props) $$invalidate(2, urlAPI = $$props.urlAPI);
    		if ('usergroups' in $$props) $$invalidate(5, usergroups = $$props.usergroups);
    		if ('idStr' in $$props) idStr = $$props.idStr;
    		if ('newChat' in $$props) $$invalidate(3, newChat = $$props.newChat);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [photo, id, urlAPI, newChat, $usergroups, usergroups, logOut, urlLogOut];
    }

    class HeaderNav extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { photo: 0, id: 1, urlLogOut: 7, urlAPI: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "HeaderNav",
    			options,
    			id: create_fragment$3.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*photo*/ ctx[0] === undefined && !('photo' in props)) {
    			console.warn("<HeaderNav> was created without expected prop 'photo'");
    		}

    		if (/*id*/ ctx[1] === undefined && !('id' in props)) {
    			console.warn("<HeaderNav> was created without expected prop 'id'");
    		}

    		if (/*urlLogOut*/ ctx[7] === undefined && !('urlLogOut' in props)) {
    			console.warn("<HeaderNav> was created without expected prop 'urlLogOut'");
    		}

    		if (/*urlAPI*/ ctx[2] === undefined && !('urlAPI' in props)) {
    			console.warn("<HeaderNav> was created without expected prop 'urlAPI'");
    		}
    	}

    	get photo() {
    		throw new Error("<HeaderNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set photo(value) {
    		throw new Error("<HeaderNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<HeaderNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<HeaderNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlLogOut() {
    		throw new Error("<HeaderNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlLogOut(value) {
    		throw new Error("<HeaderNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlAPI() {
    		throw new Error("<HeaderNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error("<HeaderNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/navbar/HeaderNavMobile.svelte generated by Svelte v3.46.4 */

    const file$2 = "src/components/navbar/HeaderNavMobile.svelte";

    function create_fragment$2(ctx) {
    	let nav;
    	let i;

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			i = element("i");
    			attr_dev(i, "class", "fas fa-bars dropdown-toggle svelte-13geh1i");
    			attr_dev(i, "id", "settings");
    			attr_dev(i, "data-bs-toggle", "dropdown");
    			attr_dev(i, "aria-expanded", "false");
    			add_location(i, file$2, 19, 2, 317);
    			attr_dev(nav, "class", "burger-menu svelte-13geh1i");
    			add_location(nav, file$2, 18, 0, 289);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);
    			append_dev(nav, i);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('HeaderNavMobile', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<HeaderNavMobile> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class HeaderNavMobile extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "HeaderNavMobile",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src/components/Header.svelte generated by Svelte v3.46.4 */
    const file$1 = "src/components/Header.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	return child_ctx;
    }

    // (172:12) {:else}
    function create_else_block_1(ctx) {
    	let loader;
    	let current;
    	loader = new Loader({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(loader.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(loader, target, anchor);
    			current = true;
    		},
    		p: noop$1,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loader.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loader.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(loader, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(172:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (149:10) {#if usersFound}
    function create_if_block$1(ctx) {
    	let each_1_anchor;
    	let each_value = /*usersFound*/ ctx[4];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*usersFound, visitProfile, urlAPI*/ 88) {
    				each_value = /*usersFound*/ ctx[4];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(149:10) {#if usersFound}",
    		ctx
    	});

    	return block;
    }

    // (164:16) {:else}
    function create_else_block(ctx) {
    	let li;
    	let span;
    	let t0_value = /*user*/ ctx[15].details + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			li = element("li");
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(span, "class", "dropdown-item");
    			add_location(span, file$1, 165, 18, 4277);
    			attr_dev(li, "class", "svelte-ooiu59");
    			add_location(li, file$1, 164, 16, 4254);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, span);
    			append_dev(span, t0);
    			append_dev(li, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*usersFound*/ 16 && t0_value !== (t0_value = /*user*/ ctx[15].details + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(164:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (151:16) {#if user.name}
    function create_if_block_1$1(ctx) {
    	let li;
    	let a;
    	let span;
    	let img;
    	let img_src_value;
    	let t0;
    	let div;
    	let h6;
    	let t1_value = /*user*/ ctx[15].name + "";
    	let t1;
    	let t2;
    	let t3_value = /*user*/ ctx[15].last_name + "";
    	let t3;
    	let t4;
    	let p0;
    	let t5_value = /*user*/ ctx[15].title + "";
    	let t5;
    	let t6;
    	let p1;
    	let t7_value = /*user*/ ctx[15].email + "";
    	let t7;
    	let a_href_value;
    	let t8;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			li = element("li");
    			a = element("a");
    			span = element("span");
    			img = element("img");
    			t0 = space();
    			div = element("div");
    			h6 = element("h6");
    			t1 = text(t1_value);
    			t2 = space();
    			t3 = text(t3_value);
    			t4 = space();
    			p0 = element("p");
    			t5 = text(t5_value);
    			t6 = space();
    			p1 = element("p");
    			t7 = text(t7_value);
    			t8 = space();
    			if (!src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[3] + /*user*/ ctx[15].photo))) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "img");
    			attr_dev(img, "class", "svelte-ooiu59");
    			add_location(img, file$1, 154, 24, 3815);
    			attr_dev(h6, "class", "svelte-ooiu59");
    			add_location(h6, file$1, 156, 26, 3931);
    			set_style(p0, "color", "grey");
    			add_location(p0, file$1, 157, 26, 3995);
    			set_style(p1, "color", "grey");
    			add_location(p1, file$1, 158, 26, 4063);
    			attr_dev(div, "class", "userInfo");
    			add_location(div, file$1, 155, 24, 3882);
    			attr_dev(span, "class", "dropdown-item d-flex align-items-center");
    			add_location(span, file$1, 153, 22, 3736);
    			attr_dev(a, "href", a_href_value = "/profile/" + /*user*/ ctx[15].email);
    			attr_dev(a, "class", "d-flex");
    			add_location(a, file$1, 152, 20, 3610);
    			attr_dev(li, "class", "svelte-ooiu59");
    			add_location(li, file$1, 151, 18, 3585);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, a);
    			append_dev(a, span);
    			append_dev(span, img);
    			append_dev(span, t0);
    			append_dev(span, div);
    			append_dev(div, h6);
    			append_dev(h6, t1);
    			append_dev(h6, t2);
    			append_dev(h6, t3);
    			append_dev(div, t4);
    			append_dev(div, p0);
    			append_dev(p0, t5);
    			append_dev(div, t6);
    			append_dev(div, p1);
    			append_dev(p1, t7);
    			append_dev(li, t8);

    			if (!mounted) {
    				dispose = [
    					action_destroyer(link.call(null, a)),
    					action_destroyer(active.call(null, a)),
    					listen_dev(
    						a,
    						"click",
    						function () {
    							if (is_function(/*visitProfile*/ ctx[6](/*user*/ ctx[15].email))) /*visitProfile*/ ctx[6](/*user*/ ctx[15].email).apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*urlAPI, usersFound*/ 24 && !src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[3] + /*user*/ ctx[15].photo))) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*usersFound*/ 16 && t1_value !== (t1_value = /*user*/ ctx[15].name + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*usersFound*/ 16 && t3_value !== (t3_value = /*user*/ ctx[15].last_name + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*usersFound*/ 16 && t5_value !== (t5_value = /*user*/ ctx[15].title + "")) set_data_dev(t5, t5_value);
    			if (dirty & /*usersFound*/ 16 && t7_value !== (t7_value = /*user*/ ctx[15].email + "")) set_data_dev(t7, t7_value);

    			if (dirty & /*usersFound*/ 16 && a_href_value !== (a_href_value = "/profile/" + /*user*/ ctx[15].email)) {
    				attr_dev(a, "href", a_href_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(151:16) {#if user.name}",
    		ctx
    	});

    	return block;
    }

    // (150:13) {#each usersFound as user}
    function create_each_block(ctx) {
    	let if_block_anchor;

    	function select_block_type_1(ctx, dirty) {
    		if (/*user*/ ctx[15].name) return create_if_block_1$1;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(150:13) {#each usersFound as user}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let div5;
    	let div4;
    	let div3;
    	let div0;
    	let a;
    	let img;
    	let img_src_value;
    	let t0;
    	let h1;
    	let t2;
    	let div1;
    	let input;
    	let t3;
    	let ul;
    	let current_block_type_index;
    	let if_block;
    	let t4;
    	let div2;
    	let headernav;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$1, create_else_block_1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*usersFound*/ ctx[4]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	headernav = new HeaderNav({
    			props: {
    				photo: /*photo*/ ctx[0],
    				id: /*id*/ ctx[1],
    				urlLogOut: /*urlLogOut*/ ctx[2],
    				urlAPI: /*urlAPI*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div5 = element("div");
    			div4 = element("div");
    			div3 = element("div");
    			div0 = element("div");
    			a = element("a");
    			img = element("img");
    			t0 = space();
    			h1 = element("h1");
    			h1.textContent = "FlyLinkers";
    			t2 = space();
    			div1 = element("div");
    			input = element("input");
    			t3 = space();
    			ul = element("ul");
    			if_block.c();
    			t4 = space();
    			div2 = element("div");
    			create_component(headernav.$$.fragment);
    			if (!src_url_equal(img.src, img_src_value = "../img/flylinkers-logo-blanco.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "logo");
    			attr_dev(img, "width", "100");
    			attr_dev(img, "class", "svelte-ooiu59");
    			add_location(img, file$1, 140, 10, 3177);
    			attr_dev(h1, "class", "svelte-ooiu59");
    			add_location(h1, file$1, 141, 10, 3256);
    			attr_dev(a, "href", "/");
    			attr_dev(a, "class", "d-flex align-items-center");
    			add_location(a, file$1, 139, 8, 3100);
    			attr_dev(div0, "class", "Header-logo d-flex align-items-center px-3 svelte-ooiu59");
    			add_location(div0, file$1, 138, 6, 3035);
    			attr_dev(input, "type", "text");
    			attr_dev(input, "placeholder", "Search");
    			attr_dev(input, "class", "svelte-ooiu59");
    			add_location(input, file$1, 146, 8, 3344);
    			attr_dev(ul, "class", "dropdown-search d-none svelte-ooiu59");
    			attr_dev(ul, "id", "searchList");
    			add_location(ul, file$1, 147, 8, 3416);
    			attr_dev(div1, "class", "Header-input svelte-ooiu59");
    			add_location(div1, file$1, 145, 6, 3309);
    			attr_dev(div2, "class", "Header-nav d-flex m-auto");
    			add_location(div2, file$1, 177, 6, 4526);
    			attr_dev(div3, "class", "Header-content d-flex flex-wrap align-items-center justify-content-between svelte-ooiu59");
    			add_location(div3, file$1, 136, 4, 2939);
    			attr_dev(div4, "class", "Header-container container");
    			add_location(div4, file$1, 135, 2, 2894);
    			attr_dev(div5, "class", "Header container-fluid svelte-ooiu59");
    			add_location(div5, file$1, 134, 0, 2855);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, div0);
    			append_dev(div0, a);
    			append_dev(a, img);
    			append_dev(a, t0);
    			append_dev(a, h1);
    			append_dev(div3, t2);
    			append_dev(div3, div1);
    			append_dev(div1, input);
    			append_dev(div1, t3);
    			append_dev(div1, ul);
    			if_blocks[current_block_type_index].m(ul, null);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			mount_component(headernav, div2, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(link.call(null, a)),
    					action_destroyer(active.call(null, a)),
    					listen_dev(input, "keyup", /*startSearch*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(ul, null);
    			}

    			const headernav_changes = {};
    			if (dirty & /*photo*/ 1) headernav_changes.photo = /*photo*/ ctx[0];
    			if (dirty & /*id*/ 2) headernav_changes.id = /*id*/ ctx[1];
    			if (dirty & /*urlLogOut*/ 4) headernav_changes.urlLogOut = /*urlLogOut*/ ctx[2];
    			if (dirty & /*urlAPI*/ 8) headernav_changes.urlAPI = /*urlAPI*/ ctx[3];
    			headernav.$set(headernav_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(headernav.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(headernav.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div5);
    			if_blocks[current_block_type_index].d();
    			destroy_component(headernav);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Header', slots, []);
    	let { photo, id } = $$props;
    	let { name = '', title = '', email = '', last_name = '', middle_name = '' } = $$props;
    	let { urlLogOut, urlAPI } = $$props;

    	// export let getUserMainToFirestore;
    	let usersFound = false;

    	const makeSearch = async value => {
    		const response = await fetch(`${urlAPI}/friend/search/?search=${value}`);
    		const content = await response.json();

    		if (content.count > 0) {
    			$$invalidate(4, usersFound = content.results);
    		} else {
    			$$invalidate(4, usersFound = [{ details: 'User not found' }]);
    		}
    	};

    	let timeCountdown;

    	const startSearch = e => {
    		const value = e.target.value;
    		clearTimeout(timeCountdown);

    		if (value !== '') {
    			searchList.classList.remove("d-none");

    			timeCountdown = setTimeout(
    				async () => {
    					makeSearch(value);
    					clearTimeout(timeCountdown);
    				},
    				1000
    			);
    		} else {
    			$$invalidate(4, usersFound = false);
    			searchList.classList.add("d-none");
    		}
    	}; // if (e.key === "Enter") {
    	//   makeSearch(value)
    	// }

    	const viewUser = email => {
    		window.location.pathname = `profile/${email}`;
    	};

    	const visitProfile = email => {
    		localStorage.setItem('visitProfile', email);
    		window.location.reload();
    	};

    	document.addEventListener('click', e => {
    		if (e.target.id !== "searchList") {
    			searchList.classList.add('d-none');
    			$$invalidate(4, usersFound = false);
    		}
    	});

    	const writable_props = [
    		'photo',
    		'id',
    		'name',
    		'title',
    		'email',
    		'last_name',
    		'middle_name',
    		'urlLogOut',
    		'urlAPI'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Header> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('photo' in $$props) $$invalidate(0, photo = $$props.photo);
    		if ('id' in $$props) $$invalidate(1, id = $$props.id);
    		if ('name' in $$props) $$invalidate(7, name = $$props.name);
    		if ('title' in $$props) $$invalidate(8, title = $$props.title);
    		if ('email' in $$props) $$invalidate(9, email = $$props.email);
    		if ('last_name' in $$props) $$invalidate(10, last_name = $$props.last_name);
    		if ('middle_name' in $$props) $$invalidate(11, middle_name = $$props.middle_name);
    		if ('urlLogOut' in $$props) $$invalidate(2, urlLogOut = $$props.urlLogOut);
    		if ('urlAPI' in $$props) $$invalidate(3, urlAPI = $$props.urlAPI);
    	};

    	$$self.$capture_state = () => ({
    		link,
    		active,
    		HeaderNav,
    		HeaderNavMobile,
    		Loader,
    		photo,
    		id,
    		name,
    		title,
    		email,
    		last_name,
    		middle_name,
    		urlLogOut,
    		urlAPI,
    		usersFound,
    		makeSearch,
    		timeCountdown,
    		startSearch,
    		viewUser,
    		visitProfile
    	});

    	$$self.$inject_state = $$props => {
    		if ('photo' in $$props) $$invalidate(0, photo = $$props.photo);
    		if ('id' in $$props) $$invalidate(1, id = $$props.id);
    		if ('name' in $$props) $$invalidate(7, name = $$props.name);
    		if ('title' in $$props) $$invalidate(8, title = $$props.title);
    		if ('email' in $$props) $$invalidate(9, email = $$props.email);
    		if ('last_name' in $$props) $$invalidate(10, last_name = $$props.last_name);
    		if ('middle_name' in $$props) $$invalidate(11, middle_name = $$props.middle_name);
    		if ('urlLogOut' in $$props) $$invalidate(2, urlLogOut = $$props.urlLogOut);
    		if ('urlAPI' in $$props) $$invalidate(3, urlAPI = $$props.urlAPI);
    		if ('usersFound' in $$props) $$invalidate(4, usersFound = $$props.usersFound);
    		if ('timeCountdown' in $$props) timeCountdown = $$props.timeCountdown;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		photo,
    		id,
    		urlLogOut,
    		urlAPI,
    		usersFound,
    		startSearch,
    		visitProfile,
    		name,
    		title,
    		email,
    		last_name,
    		middle_name
    	];
    }

    class Header extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
    			photo: 0,
    			id: 1,
    			name: 7,
    			title: 8,
    			email: 9,
    			last_name: 10,
    			middle_name: 11,
    			urlLogOut: 2,
    			urlAPI: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Header",
    			options,
    			id: create_fragment$1.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*photo*/ ctx[0] === undefined && !('photo' in props)) {
    			console.warn("<Header> was created without expected prop 'photo'");
    		}

    		if (/*id*/ ctx[1] === undefined && !('id' in props)) {
    			console.warn("<Header> was created without expected prop 'id'");
    		}

    		if (/*urlLogOut*/ ctx[2] === undefined && !('urlLogOut' in props)) {
    			console.warn("<Header> was created without expected prop 'urlLogOut'");
    		}

    		if (/*urlAPI*/ ctx[3] === undefined && !('urlAPI' in props)) {
    			console.warn("<Header> was created without expected prop 'urlAPI'");
    		}
    	}

    	get photo() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set photo(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get name() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get email() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set email(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get last_name() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set last_name(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get middle_name() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set middle_name(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlLogOut() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlLogOut(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get urlAPI() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set urlAPI(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const openChat = (id) =>{
      localStorage.setItem('chat', id);
      return id
    };

    /* src/App.svelte generated by Svelte v3.46.4 */
    const file = "src/App.svelte";

    // (170:0) {#if data}
    function create_if_block_1(ctx) {
    	let header;
    	let current;
    	const header_spread_levels = [/*data*/ ctx[0], { urlLogOut }, { urlAPI }];
    	let header_props = {};

    	for (let i = 0; i < header_spread_levels.length; i += 1) {
    		header_props = assign(header_props, header_spread_levels[i]);
    	}

    	header = new Header({ props: header_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(header.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(header, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const header_changes = (dirty & /*data, urlLogOut, urlAPI*/ 1)
    			? get_spread_update(header_spread_levels, [
    					dirty & /*data*/ 1 && get_spread_object(/*data*/ ctx[0]),
    					dirty & /*urlLogOut*/ 0 && { urlLogOut },
    					dirty & /*urlAPI*/ 0 && { urlAPI }
    				])
    			: {};

    			header.$set(header_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(header, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(170:0) {#if data}",
    		ctx
    	});

    	return block;
    }

    // (176:4) {#if chatFlag && userMain && getUserMainToFirestore}
    function create_if_block(ctx) {
    	let chat;
    	let current;

    	chat = new Chat({
    			props: {
    				id: /*id*/ ctx[4],
    				userMain: /*userMain*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(chat.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(chat, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const chat_changes = {};
    			if (dirty & /*id*/ 16) chat_changes.id = /*id*/ ctx[4];
    			if (dirty & /*userMain*/ 2) chat_changes.userMain = /*userMain*/ ctx[1];
    			chat.$set(chat_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(chat.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(chat.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(chat, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(176:4) {#if chatFlag && userMain && getUserMainToFirestore}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let t0;
    	let main;
    	let router;
    	let t1;
    	let current;
    	let if_block0 = /*data*/ ctx[0] && create_if_block_1(ctx);
    	router = new Router({ props: { routes }, $$inline: true });
    	let if_block1 = /*chatFlag*/ ctx[3] && /*userMain*/ ctx[1] && /*getUserMainToFirestore*/ ctx[2] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			main = element("main");
    			create_component(router.$$.fragment);
    			t1 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(main, "id", "main");
    			attr_dev(main, "class", "container-fluid container-lg svelte-1a9t7ki");
    			add_location(main, file, 173, 0, 4172);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, main, anchor);
    			mount_component(router, main, null);
    			append_dev(main, t1);
    			if (if_block1) if_block1.m(main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*data*/ ctx[0]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*data*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_1(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*chatFlag*/ ctx[3] && /*userMain*/ ctx[1] && /*getUserMainToFirestore*/ ctx[2]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*chatFlag, userMain, getUserMainToFirestore*/ 14) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(main, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(router.$$.fragment, local);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(router.$$.fragment, local);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(main);
    			destroy_component(router);
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const urlLogOut = 'https://flylinkers.com';

    // const urlLogOut = 'https://omar-lamprea.github.io/FlyLinkers-Login/'
    // const urlAPI = 'http://18.118.50.78:8000'
    const urlAPI = 'https://api.flylinkers.com';

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	const urlUser = window.location.pathname;
    	const urluserProfile = urlUser.slice(9);

    	if (!localStorage.getItem('user') || localStorage.getItem('user') === 'null') {
    		const param = window.location.search;
    		const urlParams = new URLSearchParams(param);
    		const user = urlParams.get('user');
    		localStorage.setItem('user', user);
    	}

    	setTimeout(
    		() => {
    			if (localStorage.getItem('user') === 'null') window.location.href = urlLogOut;
    		},
    		1000
    	);

    	if (localStorage.getItem('user') && window.location.search.includes('@')) {
    		window.location.search = '';
    	}

    	let data;
    	let userMain;
    	let getUserMainToFirestore;

    	const getData = async () => {
    		if (localStorage.getItem('user')) {
    			const response = await fetch(`${urlAPI}/user/create/?email=${localStorage.getItem('user')}`, { method: 'GET' });
    			const content = await response.json();
    			$$invalidate(0, data = content[0]);
    			await getUserToFirestore(data);
    			$$invalidate(2, getUserMainToFirestore = await getUserToFirestore(data));

    			if (!localStorage.getItem('profilePhoto')) {
    				localStorage.setItem('profilePhoto', data.photo);
    			}

    			$$invalidate(1, userMain = data.id);
    			localStorage.setItem('userId', userMain);
    		}
    	};

    	let chatFlag = false;
    	let id;

    	const loadChatList = () => {
    		$$invalidate(3, chatFlag = false);

    		document.addEventListener('click', async e => {
    			if (e.target.id === 'chat' || e.target.id === 'btInitChat') {
    				$$invalidate(4, id = parseInt(e.target.dataset.chat));
    				await openChat(id);

    				if (localStorage.getItem('chat')) {
    					$$invalidate(3, chatFlag = true);
    				}
    			}

    			if (e.target.id === 'closeChat') {
    				localStorage.removeItem('chat');
    				$$invalidate(3, chatFlag = false);
    			}
    		});
    	};

    	if (window.location.reload) {
    		localStorage.removeItem('chat');
    	}

    	onMount(() => {
    		getData();
    		loadChatList();
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Router,
    		routes,
    		Header,
    		Home,
    		Profile,
    		UserProfile,
    		Loader,
    		Login,
    		Chat,
    		onMount,
    		getUserToFirestore,
    		openChat,
    		urlUser,
    		urluserProfile,
    		urlLogOut,
    		urlAPI,
    		data,
    		userMain,
    		getUserMainToFirestore,
    		getData,
    		chatFlag,
    		id,
    		loadChatList
    	});

    	$$self.$inject_state = $$props => {
    		if ('data' in $$props) $$invalidate(0, data = $$props.data);
    		if ('userMain' in $$props) $$invalidate(1, userMain = $$props.userMain);
    		if ('getUserMainToFirestore' in $$props) $$invalidate(2, getUserMainToFirestore = $$props.getUserMainToFirestore);
    		if ('chatFlag' in $$props) $$invalidate(3, chatFlag = $$props.chatFlag);
    		if ('id' in $$props) $$invalidate(4, id = $$props.id);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [data, userMain, getUserMainToFirestore, chatFlag, id];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
    	target: document.body,
    	// props: {
    	// 	name: 'world'
    	// }
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
