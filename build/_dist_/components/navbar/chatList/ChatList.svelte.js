import './ChatList.svelte.css.proxy.js';
/* src/components/navbar/chatList/ChatList.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	empty,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	src_url_equal,
	text
} from "../../../../_snowpack/pkg/svelte/internal.js";

import { onMount } from '../../../../_snowpack/pkg/svelte.js';

import {
	validateGroup,
	getUser,
	getMessage,
	getGroupUser
} from '../../../js/firebase/config.js';

function create_if_block(ctx) {
	let li;
	let img;
	let img_src_value;
	let t0;
	let span;
	let p0;
	let t1;
	let t2;
	let p1;
	let t3;

	return {
		c() {
			li = element("li");
			img = element("img");
			t0 = space();
			span = element("span");
			p0 = element("p");
			t1 = text(/*name*/ ctx[2]);
			t2 = space();
			p1 = element("p");
			t3 = text(/*message*/ ctx[3]);
			attr(img, "id", "chat");
			attr(img, "data-chat", /*chatId*/ ctx[4]);
			if (!src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[0] + /*data*/ ctx[1].photo))) attr(img, "src", img_src_value);
			attr(img, "alt", "img");
			attr(img, "class", "svelte-1e3lw2e");
			attr(p0, "id", "chat");
			attr(p0, "data-chat", /*chatId*/ ctx[4]);
			attr(p0, "class", "svelte-1e3lw2e");
			attr(p1, "id", "chat");
			attr(p1, "data-chat", /*chatId*/ ctx[4]);
			attr(p1, "class", "messageText svelte-1e3lw2e");
			attr(span, "id", "chat");
			attr(span, "data-chat", /*chatId*/ ctx[4]);
			attr(span, "class", "svelte-1e3lw2e");
			attr(li, "class", "dropdown-item chatList d-flex svelte-1e3lw2e");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, img);
			append(li, t0);
			append(li, span);
			append(span, p0);
			append(p0, t1);
			append(span, t2);
			append(span, p1);
			append(p1, t3);
		},
		p(ctx, dirty) {
			if (dirty & /*chatId*/ 16) {
				attr(img, "data-chat", /*chatId*/ ctx[4]);
			}

			if (dirty & /*urlAPI, data*/ 3 && !src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[0] + /*data*/ ctx[1].photo))) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*name*/ 4) set_data(t1, /*name*/ ctx[2]);

			if (dirty & /*chatId*/ 16) {
				attr(p0, "data-chat", /*chatId*/ ctx[4]);
			}

			if (dirty & /*message*/ 8) set_data(t3, /*message*/ ctx[3]);

			if (dirty & /*chatId*/ 16) {
				attr(p1, "data-chat", /*chatId*/ ctx[4]);
			}

			if (dirty & /*chatId*/ 16) {
				attr(span, "data-chat", /*chatId*/ ctx[4]);
			}
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let if_block = /*data*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (/*data*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { urlAPI, id, groups } = $$props;
	let data;
	let name;
	let message;
	let user1;
	let user2;

	// console.log(id, groups);
	let chatId;

	const getLastMessage = async () => {
		$$invalidate(4, chatId = await getGroupUser(groups));
		user1 = await getUser(id);
		user2 = await getUser(chatId);
		const groupId = await validateGroup(user1, user2);
		const lastMessage = await getMessage(groupId);
		$$invalidate(3, message = lastMessage[0].messageText);
	}; // console.log(lastMessage[0].messageText);

	const getUserChat = async () => {
		await getLastMessage();
		const response = await fetch(`${urlAPI}/user/create/?id=${chatId}`);
		const content = await response.json();
		$$invalidate(1, data = content[0]);

		// console.log(data);
		$$invalidate(2, name = `${data.name} ${data.last_name}`);
	};

	onMount(() => {
		getUserChat();
	});

	$$self.$$set = $$props => {
		if ('urlAPI' in $$props) $$invalidate(0, urlAPI = $$props.urlAPI);
		if ('id' in $$props) $$invalidate(5, id = $$props.id);
		if ('groups' in $$props) $$invalidate(6, groups = $$props.groups);
	};

	return [urlAPI, data, name, message, chatId, id, groups];
}

class ChatList extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { urlAPI: 0, id: 5, groups: 6 });
	}
}

export default ChatList;