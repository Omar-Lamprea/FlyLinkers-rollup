import './HeaderNav.svelte.css.proxy.js';
/* src/components/navbar/HeaderNav.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_data,
	space,
	src_url_equal,
	text,
	transition_in,
	transition_out
} from "../../../_snowpack/pkg/svelte/internal.js";

import { link } from '../../../_snowpack/pkg/svelte-spa-router.js';
import active from '../../../_snowpack/pkg/svelte-spa-router/active.js';
import { db } from '../../js/firebase/config.js';
import { collectionData } from '../../../_snowpack/pkg/rxfire/firestore.js';
import { startWith } from '../../../_snowpack/pkg/rxjs/operators.js';
import { collection, orderBy, query, doc, onSnapshot } from '../../../_snowpack/pkg/firebase/firestore.js';
import { writable } from '../../../_snowpack/pkg/svelte/store.js';
import Notifications from './NotificationsHeader.svelte.js';
import ChatList from './chatList/ChatList.svelte.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

// (103:4) {#if newChat}
function create_if_block_1(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*newChat*/ ctx[3]);
			attr(div, "class", "notificacions-chats svelte-cg5i0q");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*newChat*/ 8) set_data(t, /*newChat*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (111:6) {:else}
function create_else_block_1(ctx) {
	let li;

	return {
		c() {
			li = element("li");

			li.innerHTML = `<span>You haven&#39;t started any chat</span> 
        `;

			attr(li, "class", "dropdown-item chatList d-flex svelte-cg5i0q");
		},
		m(target, anchor) {
			insert(target, li, anchor);
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

// (109:6) {#each $usergroups as groups}
function create_each_block(ctx) {
	let chatlist;
	let current;

	chatlist = new ChatList({
			props: {
				groups: /*groups*/ ctx[10],
				urlAPI: /*urlAPI*/ ctx[2],
				id: /*id*/ ctx[1]
			}
		});

	return {
		c() {
			create_component(chatlist.$$.fragment);
		},
		m(target, anchor) {
			mount_component(chatlist, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const chatlist_changes = {};
			if (dirty & /*$usergroups*/ 16) chatlist_changes.groups = /*groups*/ ctx[10];
			if (dirty & /*urlAPI*/ 4) chatlist_changes.urlAPI = /*urlAPI*/ ctx[2];
			if (dirty & /*id*/ 2) chatlist_changes.id = /*id*/ ctx[1];
			chatlist.$set(chatlist_changes);
		},
		i(local) {
			if (current) return;
			transition_in(chatlist.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(chatlist.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(chatlist, detaching);
		}
	};
}

// (125:6) {:else}
function create_else_block(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			attr(img, "id", "headerUserImage");
			if (!src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[2] + /*photo*/ ctx[0]))) attr(img, "src", img_src_value);
			attr(img, "alt", "");
			attr(img, "class", "svelte-cg5i0q");
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*urlAPI, photo*/ 5 && !src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[2] + /*photo*/ ctx[0]))) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (123:6) {#if localStorage.getItem('profilePhoto')}
function create_if_block(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			attr(img, "id", "headerUserImage");
			if (!src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[2] + localStorage.getItem('profilePhoto')))) attr(img, "src", img_src_value);
			attr(img, "alt", "");
			attr(img, "class", "svelte-cg5i0q");
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*urlAPI*/ 4 && !src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[2] + localStorage.getItem('profilePhoto')))) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

function create_fragment(ctx) {
	let nav;
	let div0;
	let a0;
	let link_action;
	let active_action;
	let t0;
	let div1;
	let a1;
	let link_action_1;
	let active_action_1;
	let t1;
	let div2;
	let a2;
	let link_action_2;
	let active_action_2;
	let t2;
	let div3;
	let t3;
	let i3;
	let t4;
	let ul0;
	let t5;
	let div4;
	let notifications;
	let t6;
	let div5;
	let a3;
	let show_if;
	let link_action_3;
	let active_action_3;
	let t7;
	let div7;
	let a4;
	let div6;
	let i4;
	let t8;
	let ul1;
	let li0;
	let t10;
	let li1;
	let span1;
	let link_action_4;
	let active_action_4;
	let t12;
	let div8;
	let a5;
	let link_action_5;
	let active_action_5;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*newChat*/ ctx[3] && create_if_block_1(ctx);
	let each_value = /*$usergroups*/ ctx[4];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	let each_1_else = null;

	if (!each_value.length) {
		each_1_else = create_else_block_1(ctx);
	}

	notifications = new Notifications({
			props: {
				id: /*id*/ ctx[1],
				urlAPI: /*urlAPI*/ ctx[2]
			}
		});

	function select_block_type(ctx, dirty) {
		if (localStorage.getItem('profilePhoto')) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block1 = current_block_type(ctx);

	return {
		c() {
			nav = element("nav");
			div0 = element("div");
			a0 = element("a");
			a0.innerHTML = `<i class="fas fa-home svelte-cg5i0q"></i>`;
			t0 = space();
			div1 = element("div");
			a1 = element("a");
			a1.innerHTML = `<i class="fas fa-user-plus svelte-cg5i0q"></i>`;
			t1 = space();
			div2 = element("div");
			a2 = element("a");
			a2.innerHTML = `<i class="fas fa-briefcase svelte-cg5i0q"></i>`;
			t2 = space();
			div3 = element("div");
			if (if_block0) if_block0.c();
			t3 = space();
			i3 = element("i");
			t4 = space();
			ul0 = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			if (each_1_else) {
				each_1_else.c();
			}

			t5 = space();
			div4 = element("div");
			create_component(notifications.$$.fragment);
			t6 = space();
			div5 = element("div");
			a3 = element("a");
			if_block1.c();
			t7 = space();
			div7 = element("div");
			a4 = element("a");
			div6 = element("div");
			i4 = element("i");
			t8 = space();
			ul1 = element("ul");
			li0 = element("li");
			li0.innerHTML = `<span class="dropdown-item svelte-cg5i0q">Settings</span>`;
			t10 = space();
			li1 = element("li");
			span1 = element("span");
			span1.textContent = "Log Out";
			t12 = space();
			div8 = element("div");
			a5 = element("a");
			a5.innerHTML = `<i class="fas fa-calendar-week svelte-cg5i0q"></i>`;
			attr(a0, "href", "/");
			attr(div0, "class", "icon Header-nav-home mx-3 fs-3 svelte-cg5i0q");
			attr(a1, "href", "/");
			attr(div1, "class", "icon Header-nav-user-plus mx-3 fs-3 svelte-cg5i0q");
			attr(a2, "href", "/");
			attr(div2, "class", "icon Header-nav-briefcase hidden mx-3 fs-3 svelte-cg5i0q");
			attr(i3, "class", "fas fa-comment dropdown-toggle svelte-cg5i0q");
			attr(i3, "id", "chats");
			attr(i3, "data-bs-toggle", "dropdown");
			attr(i3, "aria-expanded", "false");
			attr(ul0, "class", "dropdown-menu");
			attr(ul0, "aria-labelledby", "chats");
			attr(div3, "class", "icon Header-nav-comment mx-3 fs-3 position-relative svelte-cg5i0q");
			attr(div4, "class", "icon Header-nav-bell mx-3 fs-3 notification svelte-cg5i0q");
			attr(div4, "id", "notification");
			attr(a3, "href", "/profile");
			attr(div5, "class", "icon Header-nav-user mx-3 fs-3 svelte-cg5i0q");
			attr(i4, "class", "fas fa-grip-vertical dropdown-toggle svelte-cg5i0q");
			attr(i4, "id", "settings");
			attr(i4, "data-bs-toggle", "dropdown");
			attr(i4, "aria-expanded", "false");
			attr(span1, "class", "dropdown-item svelte-cg5i0q");
			attr(ul1, "class", "dropdown-menu");
			attr(ul1, "aria-labelledby", "settings");
			attr(div6, "class", "dropdown svelte-cg5i0q");
			attr(a4, "href", "/");
			attr(div7, "class", "icon Header-nav-grip-vertical mx-3 fs-3 svelte-cg5i0q");
			attr(a5, "href", "/");
			attr(div8, "class", "icon Header-nav-calendar-week hidden mx-3 fs-3 svelte-cg5i0q");
			attr(nav, "class", "nav-container d-flex");
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, div0);
			append(div0, a0);
			append(nav, t0);
			append(nav, div1);
			append(div1, a1);
			append(nav, t1);
			append(nav, div2);
			append(div2, a2);
			append(nav, t2);
			append(nav, div3);
			if (if_block0) if_block0.m(div3, null);
			append(div3, t3);
			append(div3, i3);
			append(div3, t4);
			append(div3, ul0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul0, null);
			}

			if (each_1_else) {
				each_1_else.m(ul0, null);
			}

			append(nav, t5);
			append(nav, div4);
			mount_component(notifications, div4, null);
			append(nav, t6);
			append(nav, div5);
			append(div5, a3);
			if_block1.m(a3, null);
			append(nav, t7);
			append(nav, div7);
			append(div7, a4);
			append(a4, div6);
			append(div6, i4);
			append(div6, t8);
			append(div6, ul1);
			append(ul1, li0);
			append(ul1, t10);
			append(ul1, li1);
			append(li1, span1);
			append(nav, t12);
			append(nav, div8);
			append(div8, a5);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(link_action = link.call(null, a0)),
					action_destroyer(active_action = active.call(null, a0)),
					action_destroyer(link_action_1 = link.call(null, a1)),
					action_destroyer(active_action_1 = active.call(null, a1)),
					action_destroyer(link_action_2 = link.call(null, a2)),
					action_destroyer(active_action_2 = active.call(null, a2)),
					action_destroyer(link_action_3 = link.call(null, a3)),
					action_destroyer(active_action_3 = active.call(null, a3)),
					listen(span1, "click", /*logOut*/ ctx[6]),
					action_destroyer(link_action_4 = link.call(null, a4)),
					action_destroyer(active_action_4 = active.call(null, a4)),
					action_destroyer(link_action_5 = link.call(null, a5)),
					action_destroyer(active_action_5 = active.call(null, a5))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*newChat*/ ctx[3]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(div3, t3);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*$usergroups, urlAPI, id*/ 22) {
				each_value = /*$usergroups*/ ctx[4];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul0, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();

				if (each_value.length) {
					if (each_1_else) {
						each_1_else.d(1);
						each_1_else = null;
					}
				} else if (!each_1_else) {
					each_1_else = create_else_block_1(ctx);
					each_1_else.c();
					each_1_else.m(ul0, null);
				}
			}

			const notifications_changes = {};
			if (dirty & /*id*/ 2) notifications_changes.id = /*id*/ ctx[1];
			if (dirty & /*urlAPI*/ 4) notifications_changes.urlAPI = /*urlAPI*/ ctx[2];
			notifications.$set(notifications_changes);
			if_block1.p(ctx, dirty);
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(notifications.$$.fragment, local);
			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(notifications.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(nav);
			if (if_block0) if_block0.d();
			destroy_each(each_blocks, detaching);
			if (each_1_else) each_1_else.d();
			destroy_component(notifications);
			if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $usergroups;
	let { photo, id } = $$props;
	let { urlLogOut, urlAPI } = $$props;
	let usergroups = writable([]);
	component_subscribe($$self, usergroups, value => $$invalidate(4, $usergroups = value));
	let idStr = id.toString();
	let newChat;

	function getUserDoc() {
		const userDoc = onSnapshot(doc(db, 'user', idStr), doc => {
			usergroups.set(doc.data().groups);
			$$invalidate(3, newChat = doc.data().groups.length);
		});
	}

	getUserDoc(usergroups);

	const logOut = () => {
		localStorage.clear();
		window.location.href = urlLogOut;
	};

	$$self.$$set = $$props => {
		if ('photo' in $$props) $$invalidate(0, photo = $$props.photo);
		if ('id' in $$props) $$invalidate(1, id = $$props.id);
		if ('urlLogOut' in $$props) $$invalidate(7, urlLogOut = $$props.urlLogOut);
		if ('urlAPI' in $$props) $$invalidate(2, urlAPI = $$props.urlAPI);
	};

	return [photo, id, urlAPI, newChat, $usergroups, usergroups, logOut, urlLogOut];
}

class HeaderNav extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { photo: 0, id: 1, urlLogOut: 7, urlAPI: 2 });
	}
}

export default HeaderNav;