import './UserPhoto.svelte.css.proxy.js';
/* src/components/profile/UserPhoto.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	attr,
	detach,
	element,
	empty,
	init,
	insert,
	noop,
	safe_not_equal,
	space,
	src_url_equal
} from "../../../_snowpack/pkg/svelte/internal.js";

import ProfilePhotoModal from '../Modals/profile/ProfilePhotoModal.svelte.js';

function create_else_block_1(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			if (!src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[2] + /*photo*/ ctx[1]))) attr(img, "src", img_src_value);
			attr(img, "alt", "profilePhoto");
			attr(img, "class", "svelte-1tdigc9");
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*urlAPI, photo*/ 6 && !src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[2] + /*photo*/ ctx[1]))) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (31:2) {#if id}
function create_if_block(ctx) {
	let show_if;
	let if_block_anchor;

	function select_block_type_1(ctx, dirty) {
		if (dirty & /*id*/ 1) show_if = null;
		if (show_if == null) show_if = !!(/*id*/ ctx[0].toString() === localStorage.getItem('userId'));
		if (show_if) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_1(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (37:4) {:else}
function create_else_block(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			if (!src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[2] + /*photo*/ ctx[1]))) attr(img, "src", img_src_value);
			attr(img, "alt", "profilePhoto");
			attr(img, "class", "svelte-1tdigc9");
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*urlAPI, photo*/ 6 && !src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[2] + /*photo*/ ctx[1]))) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (32:4) {#if id.toString() === localStorage.getItem('userId')}
function create_if_block_1(ctx) {
	let img;
	let img_src_value;
	let t0;
	let ul;

	return {
		c() {
			img = element("img");
			t0 = space();
			ul = element("ul");
			ul.innerHTML = `<li><a data-translate="update-profile-photo" class="dropdown-item" href="/" data-bs-toggle="modal" data-bs-target="#ModalProfile">Update profile photo</a></li>`;
			if (!src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[2] + /*photo*/ ctx[1]))) attr(img, "src", img_src_value);
			attr(img, "alt", "profilePhoto");
			attr(img, "class", "dropdown-toggle svelte-1tdigc9");
			attr(img, "type", "button");
			attr(img, "id", "dropdownMenuButton1");
			attr(img, "data-bs-toggle", "dropdown");
			attr(img, "aria-expanded", "false");
			attr(ul, "class", "dropdown-menu");
			attr(ul, "aria-labelledby", "dropdownMenuButton1");
		},
		m(target, anchor) {
			insert(target, img, anchor);
			insert(target, t0, anchor);
			insert(target, ul, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*urlAPI, photo*/ 6 && !src_url_equal(img.src, img_src_value = "" + (/*urlAPI*/ ctx[2] + /*photo*/ ctx[1]))) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
			if (detaching) detach(t0);
			if (detaching) detach(ul);
		}
	};
}

function create_fragment(ctx) {
	let div;

	function select_block_type(ctx, dirty) {
		if (/*id*/ ctx[0]) return create_if_block;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div = element("div");
			if_block.c();
			attr(div, "class", "Profile-card-avatar dropdown svelte-1tdigc9");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if_block.m(div, null);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { photo, urlAPI, id } = $$props;

	if (id === undefined) {
		id = '';
	}

	$$self.$$set = $$props => {
		if ('photo' in $$props) $$invalidate(1, photo = $$props.photo);
		if ('urlAPI' in $$props) $$invalidate(2, urlAPI = $$props.urlAPI);
		if ('id' in $$props) $$invalidate(0, id = $$props.id);
	};

	return [id, photo, urlAPI];
}

class UserPhoto extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { photo: 1, urlAPI: 2, id: 0 });
	}
}

export default UserPhoto;