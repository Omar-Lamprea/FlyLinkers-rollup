/* src/components/TimelineH.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_style,
	space,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import AddPost from './post/AddPost.svelte.js';
import Post from './post/Post.svelte.js';
import Loader from './Loader.svelte.js';
import { onMount } from '../../_snowpack/pkg/svelte.js';
import { writable } from '../../_snowpack/pkg/svelte/store.js';
import { translate } from '../js/translate.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

// (128:4) {#if id}
function create_if_block_1(ctx) {
	let addpost;
	let current;

	addpost = new AddPost({
			props: {
				id: /*id*/ ctx[0],
				urlAPI: /*urlAPI*/ ctx[1],
				colorbox,
				urlImages: /*urlImages*/ ctx[2]
			}
		});

	return {
		c() {
			create_component(addpost.$$.fragment);
		},
		m(target, anchor) {
			mount_component(addpost, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const addpost_changes = {};
			if (dirty & /*id*/ 1) addpost_changes.id = /*id*/ ctx[0];
			if (dirty & /*urlAPI*/ 2) addpost_changes.urlAPI = /*urlAPI*/ ctx[1];
			if (dirty & /*urlImages*/ 4) addpost_changes.urlImages = /*urlImages*/ ctx[2];
			addpost.$set(addpost_changes);
		},
		i(local) {
			if (current) return;
			transition_in(addpost.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(addpost.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(addpost, detaching);
		}
	};
}

// (131:4) {#each $posts as dataPost}
function create_each_block(ctx) {
	let post;
	let current;

	const post_spread_levels = [
		/*dataPost*/ ctx[12],
		{ userId: /*userId*/ ctx[5] },
		{ urlAPI: /*urlAPI*/ ctx[1] },
		{ urlImages: /*urlImages*/ ctx[2] }
	];

	let post_props = {};

	for (let i = 0; i < post_spread_levels.length; i += 1) {
		post_props = assign(post_props, post_spread_levels[i]);
	}

	post = new Post({ props: post_props });

	return {
		c() {
			create_component(post.$$.fragment);
		},
		m(target, anchor) {
			mount_component(post, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const post_changes = (dirty & /*$posts, userId, urlAPI, urlImages*/ 54)
			? get_spread_update(post_spread_levels, [
					dirty & /*$posts*/ 16 && get_spread_object(/*dataPost*/ ctx[12]),
					dirty & /*userId*/ 32 && { userId: /*userId*/ ctx[5] },
					dirty & /*urlAPI*/ 2 && { urlAPI: /*urlAPI*/ ctx[1] },
					dirty & /*urlImages*/ 4 && { urlImages: /*urlImages*/ ctx[2] }
				])
			: {};

			post.$set(post_changes);
		},
		i(local) {
			if (current) return;
			transition_in(post.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(post.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(post, detaching);
		}
	};
}

// (135:4) {#if endPostMessage}
function create_if_block(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.textContent = "Sorry!, we can't find more post to show you.";
			attr(div, "data-translate", "noPost");
			attr(div, "id", "endPosts");
			attr(div, "class", "text-center fw-bold");
			set_style(div, "color", "var(--main-color)");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let input;
	let t0;
	let t1;
	let t2;
	let current;
	let if_block0 = /*id*/ ctx[0] && create_if_block_1(ctx);
	let each_value = /*$posts*/ ctx[4];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	let if_block1 = /*endPostMessage*/ ctx[3] && create_if_block(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			input = element("input");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			if (if_block1) if_block1.c();
			attr(input, "type", "checkbox");
			attr(input, "id", "reloadPostCheck");
			attr(input, "name", "reloadPost");
			attr(input, "class", "d-none");
			attr(div0, "class", "Timeline-container");
			attr(div1, "class", "Timeline col-12 col-lg-6");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, input);
			append(div0, t0);
			if (if_block0) if_block0.m(div0, null);
			append(div0, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append(div0, t2);
			if (if_block1) if_block1.m(div0, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*id*/ ctx[0]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*id*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (dirty & /*$posts, userId, urlAPI, urlImages*/ 54) {
				each_value = /*$posts*/ ctx[4];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div0, t2);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (/*endPostMessage*/ ctx[3]) {
				if (if_block1) {
					
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(div0, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(if_block0);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block0) if_block0.d();
			destroy_each(each_blocks, detaching);
			if (if_block1) if_block1.d();
		}
	};
}

let colorbox = 'boxHome';

function instance($$self, $$props, $$invalidate) {
	let $posts;
	let { id } = $$props;
	let { urlAPI, urlImages } = $$props;
	const userId = id;
	const posts = writable([]);
	component_subscribe($$self, posts, value => $$invalidate(4, $posts = value));
	let page = 0;
	let countPost = null;
	let endPostMessage;

	async function getPosts(page1) {
		if (page1) {
			page = page1;
		} else {
			page += 1;
		}

		try {
			const response = await fetch(`${urlAPI}/post/home/?page=${page}&user_id=${id}`);
			let content = await response.json();
			countPost = content.next;

			if (response.ok) {
				const dateNow = new Date();
				const dateNowOfMlSeconds = dateNow.getTime();

				// const datelimit = new Date(dateNowOfMlSeconds - addMlSeconds)
				// console.log(datelimit.toISOString());
				// console.log(new Date(Date.parse(content.results[2].create_time)));
				// console.log(new Date(Date.parse(content.results[2].create_time) + 10000));
				// if (content.results.length === 3) {
				//   for (let i = 0; i < content.results.length; i++) {
				//     if (content.results[i].user.id === parseInt(localStorage.getItem('userId')) &&
				//     new Date(Date.parse(content.results[i].create_time) + 10000) >= dateNowOfMlSeconds) {
				//       let aux = content.results[0]
				//       let aux2 = content.results[1]
				//       content.results[0] = content.results[i]
				//       content.results[1] = aux
				//       content.results[2] = aux2
				//     }
				//   }
				// }else if(content.results.length === 2){
				//   for (let i = 0; i < content.results.length; i++) {
				//     if (content.results[i].user.id === parseInt(localStorage.getItem('userId')) &&
				//     new Date(Date.parse(content.results[i].create_time) + 10000) >= dateNowOfMlSeconds) {
				//       let aux = content.results[0]
				//       content.results[0] = content.results[i]
				//       content.results[1] = aux
				//     }
				//   }
				// }
				posts.set([...$posts, ...content.results]);
			} else {
				endPosts.classList.remove('d-none');
			}
		} catch(error) {
			console.log(error);
		}
	}

	async function clearPost() {
		posts.set([]);
	}

	const reloadPosts = () => {
		// setTimeout(() => {
		const reloadPosts = document.getElementById('reloadPostCheck');

		const observer = new MutationObserver(() => {
				// console.log('reloading post...');
				console.log('id el post=', reloadPosts.getAttribute('data-post'));

				clearPost();
				getPosts(1);
				reloadPosts.removeAttribute('data-reloading');
			});

		if (!window.location.href.includes('settings')) {
			observer.observe(reloadPosts, { attributes: true });
		}
	}; // }, 4000);

	iconHome.addEventListener('click', () => {
		clearPost();
		getPosts(1);
	});

	onMount(async () => {
		await getPosts();
		reloadPosts();

		document.addEventListener('scroll', async e => {
			if (window.location.hash === "#/" || window.location.hash === "") {
				if (window.innerHeight + window.scrollY >= main.offsetHeight - 1 && !window.location.href.includes('settings') && !window.location.href.includes('profile')) {
					if (countPost !== null && countPost !== undefined) {
						getPosts();
						countPost = null;
					} else {
						setTimeout(
							() => {
								$$invalidate(3, endPostMessage = 1);
							},
							1000
						);
					}
				}
			}
		});
	}); // translate()
	// setInterval(() => {
	//   clearPost()
	//   getPosts(1)

	$$self.$$set = $$props => {
		if ('id' in $$props) $$invalidate(0, id = $$props.id);
		if ('urlAPI' in $$props) $$invalidate(1, urlAPI = $$props.urlAPI);
		if ('urlImages' in $$props) $$invalidate(2, urlImages = $$props.urlImages);
	};

	return [id, urlAPI, urlImages, endPostMessage, $posts, userId, posts, getPosts];
}

class TimelineH extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			id: 0,
			urlAPI: 1,
			urlImages: 2,
			getPosts: 7
		});
	}

	get getPosts() {
		return this.$$.ctx[7];
	}
}

export default TimelineH;