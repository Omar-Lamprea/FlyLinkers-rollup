/* src/components/Loader.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	empty,
	init,
	insert,
	noop,
	safe_not_equal
} from "../../_snowpack/pkg/svelte/internal.js";

function create_else_block(ctx) {
	let div2;

	return {
		c() {
			div2 = element("div");
			div2.innerHTML = `<div class="loader"><div></div></div>`;
			attr(div2, "class", "loader-content");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div2);
		}
	};
}

// (5:0) {#if size}
function create_if_block(ctx) {
	let div2;
	let div1;
	let div2_class_value;

	return {
		c() {
			div2 = element("div");
			div1 = element("div");
			div1.innerHTML = `<div></div>`;
			attr(div1, "class", "loader");
			attr(div2, "class", div2_class_value = "loader-content " + /*size*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div1);
		},
		p(ctx, dirty) {
			if (dirty & /*size*/ 1 && div2_class_value !== (div2_class_value = "loader-content " + /*size*/ ctx[0])) {
				attr(div2, "class", div2_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div2);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*size*/ ctx[0]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { size = 0 } = $$props;

	$$self.$$set = $$props => {
		if ('size' in $$props) $$invalidate(0, size = $$props.size);
	};

	return [size];
}

class Loader extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { size: 0 });
	}
}

export default Loader;