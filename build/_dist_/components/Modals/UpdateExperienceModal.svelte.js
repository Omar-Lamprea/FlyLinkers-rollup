import './UpdateExperienceModal.svelte.css.proxy.js';
/* src/components/Modals/UpdateExperienceModal.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	space,
	text
} from "../../../_snowpack/pkg/svelte/internal.js";

import { closeUpdateModal } from '../../js/closeModals.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[21] = list[i];
	return child_ctx;
}

function get_each_context_4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[24] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[21] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[24] = list[i];
	return child_ctx;
}

function get_each_context_5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[21] = list[i];
	return child_ctx;
}

function get_each_context_6(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[24] = list[i];
	return child_ctx;
}

// (230:22) {#if joinStartMonth === month.value}
function create_if_block_7(ctx) {
	let option;
	let t_value = /*month*/ ctx[24].month + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*month*/ ctx[24].value;
			option.value = option.__value;
			option.selected = true;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (229:20) {#each months as month}
function create_each_block_6(ctx) {
	let option;
	let t_value = /*month*/ ctx[24].month + "";
	let t;
	let option_value_value;
	let if_block = /*joinStartMonth*/ ctx[4] === /*month*/ ctx[24].value && create_if_block_7(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*month*/ ctx[24].value;
			option.value = option.__value;
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (/*joinStartMonth*/ ctx[4] === /*month*/ ctx[24].value) if_block.p(ctx, dirty);
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(option);
		}
	};
}

// (239:22) {#if parseInt(dataStartYear) === year}
function create_if_block_6(ctx) {
	let option;
	let t_value = /*year*/ ctx[21] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*year*/ ctx[21];
			option.value = option.__value;
			option.selected = true;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (238:20) {#each yearList as year}
function create_each_block_5(ctx) {
	let show_if = parseInt(/*dataStartYear*/ ctx[3]) === /*year*/ ctx[21];
	let option;
	let t_value = /*year*/ ctx[21] + "";
	let t;
	let option_value_value;
	let if_block = show_if && create_if_block_6(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*year*/ ctx[21];
			option.value = option.__value;
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (show_if) if_block.p(ctx, dirty);
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(option);
		}
	};
}

// (269:18) {:else}
function create_else_block(ctx) {
	let select0;
	let select0_name_value;
	let select0_id_value;
	let t0;
	let select1;
	let option;
	let select1_name_value;
	let select1_id_value;
	let each_value_4 = /*months*/ ctx[5];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_4.length; i += 1) {
		each_blocks_1[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
	}

	let each_value_3 = /*yearList*/ ctx[7];
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	return {
		c() {
			select0 = element("select");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t0 = space();
			select1 = element("select");
			option = element("option");
			option.textContent = "Year";

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(select0, "name", select0_name_value = "endDate" + /*experience*/ ctx[0].id);
			attr(select0, "id", select0_id_value = "endDate" + /*experience*/ ctx[0].id);
			select0.disabled = true;
			attr(select0, "class", "me-md-1 mb-3 svelte-1r8fjdo");
			option.__value = "0";
			option.value = option.__value;
			attr(select1, "name", select1_name_value = "endYear" + /*experience*/ ctx[0].id);
			attr(select1, "id", select1_id_value = "endYear" + /*experience*/ ctx[0].id);
			select1.disabled = true;
			attr(select1, "class", "mb-3 svelte-1r8fjdo");
		},
		m(target, anchor) {
			insert(target, select0, anchor);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(select0, null);
			}

			insert(target, t0, anchor);
			insert(target, select1, anchor);
			append(select1, option);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select1, null);
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*months, joinEndMonth*/ 36) {
				each_value_4 = /*months*/ ctx[5];
				let i;

				for (i = 0; i < each_value_4.length; i += 1) {
					const child_ctx = get_each_context_4(ctx, each_value_4, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_4(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(select0, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_4.length;
			}

			if (dirty[0] & /*experience*/ 1 && select0_name_value !== (select0_name_value = "endDate" + /*experience*/ ctx[0].id)) {
				attr(select0, "name", select0_name_value);
			}

			if (dirty[0] & /*experience*/ 1 && select0_id_value !== (select0_id_value = "endDate" + /*experience*/ ctx[0].id)) {
				attr(select0, "id", select0_id_value);
			}

			if (dirty[0] & /*yearList, dataEndYear*/ 130) {
				each_value_3 = /*yearList*/ ctx[7];
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}

			if (dirty[0] & /*experience*/ 1 && select1_name_value !== (select1_name_value = "endYear" + /*experience*/ ctx[0].id)) {
				attr(select1, "name", select1_name_value);
			}

			if (dirty[0] & /*experience*/ 1 && select1_id_value !== (select1_id_value = "endYear" + /*experience*/ ctx[0].id)) {
				attr(select1, "id", select1_id_value);
			}
		},
		d(detaching) {
			if (detaching) detach(select0);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(select1);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (251:18) {#if !experience.working}
function create_if_block_1(ctx) {
	let select0;
	let select0_name_value;
	let select0_id_value;
	let t0;
	let select1;
	let option;
	let select1_name_value;
	let select1_id_value;
	let each_value_2 = /*months*/ ctx[5];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_1[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	let each_value_1 = /*yearList*/ ctx[7];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			select0 = element("select");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t0 = space();
			select1 = element("select");
			option = element("option");
			option.textContent = "Year";

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(select0, "name", select0_name_value = "endDate" + /*experience*/ ctx[0].id);
			attr(select0, "id", select0_id_value = "endDate" + /*experience*/ ctx[0].id);
			attr(select0, "class", "me-md-1 mb-3 svelte-1r8fjdo");
			option.__value = "0";
			option.value = option.__value;
			attr(select1, "name", select1_name_value = "endYear" + /*experience*/ ctx[0].id);
			attr(select1, "id", select1_id_value = "endYear" + /*experience*/ ctx[0].id);
			attr(select1, "class", "mb-3 svelte-1r8fjdo");
		},
		m(target, anchor) {
			insert(target, select0, anchor);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(select0, null);
			}

			insert(target, t0, anchor);
			insert(target, select1, anchor);
			append(select1, option);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select1, null);
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*months, joinEndMonth*/ 36) {
				each_value_2 = /*months*/ ctx[5];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_2(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(select0, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_2.length;
			}

			if (dirty[0] & /*experience*/ 1 && select0_name_value !== (select0_name_value = "endDate" + /*experience*/ ctx[0].id)) {
				attr(select0, "name", select0_name_value);
			}

			if (dirty[0] & /*experience*/ 1 && select0_id_value !== (select0_id_value = "endDate" + /*experience*/ ctx[0].id)) {
				attr(select0, "id", select0_id_value);
			}

			if (dirty[0] & /*yearList, dataEndYear*/ 130) {
				each_value_1 = /*yearList*/ ctx[7];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			if (dirty[0] & /*experience*/ 1 && select1_name_value !== (select1_name_value = "endYear" + /*experience*/ ctx[0].id)) {
				attr(select1, "name", select1_name_value);
			}

			if (dirty[0] & /*experience*/ 1 && select1_id_value !== (select1_id_value = "endYear" + /*experience*/ ctx[0].id)) {
				attr(select1, "id", select1_id_value);
			}
		},
		d(detaching) {
			if (detaching) detach(select0);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(select1);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (272:24) {#if joinEndMonth === month.value}
function create_if_block_5(ctx) {
	let option;
	let t_value = /*month*/ ctx[24].month + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*month*/ ctx[24].value;
			option.value = option.__value;
			option.selected = true;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (271:22) {#each months as month}
function create_each_block_4(ctx) {
	let option;
	let t_value = /*month*/ ctx[24].month + "";
	let t;
	let option_value_value;
	let if_block = /*joinEndMonth*/ ctx[2] === /*month*/ ctx[24].value && create_if_block_5(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*month*/ ctx[24].value;
			option.value = option.__value;
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (/*joinEndMonth*/ ctx[2] === /*month*/ ctx[24].value) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_5(ctx);
					if_block.c();
					if_block.m(option.parentNode, option);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(option);
		}
	};
}

// (281:24) {#if parseInt(dataEndYear) === year}
function create_if_block_4(ctx) {
	let option;
	let t_value = /*year*/ ctx[21] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*year*/ ctx[21];
			option.value = option.__value;
			option.selected = true;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (280:22) {#each yearList as year}
function create_each_block_3(ctx) {
	let show_if = parseInt(/*dataEndYear*/ ctx[1]) === /*year*/ ctx[21];
	let option;
	let t_value = /*year*/ ctx[21] + "";
	let t;
	let option_value_value;
	let if_block = show_if && create_if_block_4(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*year*/ ctx[21];
			option.value = option.__value;
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*dataEndYear*/ 2) show_if = parseInt(/*dataEndYear*/ ctx[1]) === /*year*/ ctx[21];

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_4(ctx);
					if_block.c();
					if_block.m(option.parentNode, option);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(option);
		}
	};
}

// (254:25) {#if joinEndMonth === month.value}
function create_if_block_3(ctx) {
	let option;
	let t_value = /*month*/ ctx[24].month + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*month*/ ctx[24].value;
			option.value = option.__value;
			option.selected = true;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (253:23) {#each months as month}
function create_each_block_2(ctx) {
	let option;
	let t_value = /*month*/ ctx[24].month + "";
	let t;
	let option_value_value;
	let if_block = /*joinEndMonth*/ ctx[2] === /*month*/ ctx[24].value && create_if_block_3(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*month*/ ctx[24].value;
			option.value = option.__value;
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (/*joinEndMonth*/ ctx[2] === /*month*/ ctx[24].value) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(option.parentNode, option);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(option);
		}
	};
}

// (263:25) {#if parseInt(dataEndYear) === year}
function create_if_block_2(ctx) {
	let option;
	let t_value = /*year*/ ctx[21] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*year*/ ctx[21];
			option.value = option.__value;
			option.selected = true;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (262:23) {#each yearList as year}
function create_each_block_1(ctx) {
	let show_if = parseInt(/*dataEndYear*/ ctx[1]) === /*year*/ ctx[21];
	let option;
	let t_value = /*year*/ ctx[21] + "";
	let t;
	let option_value_value;
	let if_block = show_if && create_if_block_2(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*year*/ ctx[21];
			option.value = option.__value;
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*dataEndYear*/ 2) show_if = parseInt(/*dataEndYear*/ ctx[1]) === /*year*/ ctx[21];

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					if_block.m(option.parentNode, option);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(option);
		}
	};
}

// (309:16) {#if experience.employment_type === employment}
function create_if_block(ctx) {
	let option;
	let t_value = /*employment*/ ctx[18] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*employment*/ ctx[18];
			option.value = option.__value;
			option.selected = true;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (308:14) {#each employmentTypeList as employment}
function create_each_block(ctx) {
	let option;
	let t_value = /*employment*/ ctx[18] + "";
	let t;
	let option_value_value;
	let if_block = /*experience*/ ctx[0].employment_type === /*employment*/ ctx[18] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*employment*/ ctx[18];
			option.value = option.__value;
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (/*experience*/ ctx[0].employment_type === /*employment*/ ctx[18]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(option.parentNode, option);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(option);
		}
	};
}

function create_fragment(ctx) {
	let div14;
	let div13;
	let div12;
	let div0;
	let h50;
	let t0;
	let h50_id_value;
	let t1;
	let button0;
	let t2;
	let div10;
	let div1;
	let t6;
	let div9;
	let form;
	let div2;
	let label0;
	let t7;
	let label0_for_value;
	let t8;
	let input0;
	let input0_name_value;
	let input0_id_value;
	let input0_value_value;
	let t9;
	let div7;
	let div4;
	let label1;
	let t10;
	let label1_for_value;
	let t11;
	let div3;
	let select0;
	let select0_name_value;
	let select0_id_value;
	let t12;
	let select1;
	let option0;
	let select1_name_value;
	let select1_id_value;
	let t14;
	let div6;
	let label2;
	let t15;
	let label2_for_value;
	let t16;
	let div5;
	let t17;
	let div8;
	let input1;
	let input1_name_value;
	let input1_id_value;
	let input1_checked_value;
	let t18;
	let label3;
	let t19;
	let label3_for_value;
	let t20;
	let label4;
	let t21;
	let label4_for_value;
	let t22;
	let input2;
	let input2_name_value;
	let input2_id_value;
	let input2_value_value;
	let t23;
	let label5;
	let t24;
	let label5_for_value;
	let t25;
	let input3;
	let input3_name_value;
	let input3_id_value;
	let input3_value_value;
	let t26;
	let label6;
	let t27;
	let label6_for_value;
	let t28;
	let select2;
	let option1;
	let select2_name_value;
	let select2_id_value;
	let t30;
	let label7;
	let t31;
	let label7_for_value;
	let t32;
	let textarea;
	let textarea_name_value;
	let textarea_id_value;
	let textarea_value_value;
	let t33;
	let div11;
	let button1;
	let t35;
	let button2;
	let t36;
	let button2_id_value;
	let div14_id_value;
	let div14_aria_labelledby_value;
	let mounted;
	let dispose;
	let each_value_6 = /*months*/ ctx[5];
	let each_blocks_2 = [];

	for (let i = 0; i < each_value_6.length; i += 1) {
		each_blocks_2[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
	}

	let each_value_5 = /*yearList*/ ctx[7];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_5.length; i += 1) {
		each_blocks_1[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
	}

	function select_block_type(ctx, dirty) {
		if (!/*experience*/ ctx[0].working) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, [-1, -1]);
	let if_block = current_block_type(ctx);
	let each_value = /*employmentTypeList*/ ctx[6];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div14 = element("div");
			div13 = element("div");
			div12 = element("div");
			div0 = element("div");
			h50 = element("h5");
			t0 = text("Update Experience");
			t1 = space();
			button0 = element("button");
			t2 = space();
			div10 = element("div");
			div1 = element("div");

			div1.innerHTML = `<h5>Where do you currently work?</h5> 
          <p class="my-3">* Indicates required</p>`;

			t6 = space();
			div9 = element("div");
			form = element("form");
			div2 = element("div");
			label0 = element("label");
			t7 = text("Company Name*");
			t8 = space();
			input0 = element("input");
			t9 = space();
			div7 = element("div");
			div4 = element("div");
			label1 = element("label");
			t10 = text("Start date*");
			t11 = space();
			div3 = element("div");
			select0 = element("select");

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t12 = space();
			select1 = element("select");
			option0 = element("option");
			option0.textContent = "Year";

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t14 = space();
			div6 = element("div");
			label2 = element("label");
			t15 = text("end date*");
			t16 = space();
			div5 = element("div");
			if_block.c();
			t17 = space();
			div8 = element("div");
			input1 = element("input");
			t18 = space();
			label3 = element("label");
			t19 = text("I am currently working in this role");
			t20 = space();
			label4 = element("label");
			t21 = text("Location*");
			t22 = space();
			input2 = element("input");
			t23 = space();
			label5 = element("label");
			t24 = text("Title*");
			t25 = space();
			input3 = element("input");
			t26 = space();
			label6 = element("label");
			t27 = text("Employment type*");
			t28 = space();
			select2 = element("select");
			option1 = element("option");
			option1.textContent = "Please select";

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t30 = space();
			label7 = element("label");
			t31 = text("Description*");
			t32 = space();
			textarea = element("textarea");
			t33 = space();
			div11 = element("div");
			button1 = element("button");
			button1.textContent = "Close";
			t35 = space();
			button2 = element("button");
			t36 = text("Save");
			attr(h50, "class", "modal-title");
			attr(h50, "id", h50_id_value = "modalUpdateExperience" + /*experience*/ ctx[0].id + "Label");
			attr(button0, "type", "button");
			attr(button0, "class", "btn-close");
			attr(button0, "data-bs-dismiss", "modal");
			attr(button0, "aria-label", "Close");
			attr(div0, "class", "modal-header");
			attr(div1, "class", "headModal");
			attr(label0, "for", label0_for_value = "companyNameUpdate" + /*experience*/ ctx[0].id);
			attr(input0, "type", "text");
			attr(input0, "name", input0_name_value = "companyNameUpdate" + /*experience*/ ctx[0].id);
			attr(input0, "id", input0_id_value = "companyNameUpdate" + /*experience*/ ctx[0].id);
			attr(input0, "placeholder", "Ex: FlyLinkers");
			input0.value = input0_value_value = /*experience*/ ctx[0].company_name;
			attr(input0, "class", "svelte-1r8fjdo");
			attr(div2, "class", "companyName");
			attr(label1, "for", label1_for_value = "startDate" + /*experience*/ ctx[0].id);
			attr(select0, "name", select0_name_value = "startDate" + /*experience*/ ctx[0].id);
			attr(select0, "id", select0_id_value = "startDate" + /*experience*/ ctx[0].id);
			attr(select0, "class", "me-md-1 mb-3 svelte-1r8fjdo");
			option0.__value = "0";
			option0.value = option0.__value;
			attr(select1, "name", select1_name_value = "startYear" + /*experience*/ ctx[0].id);
			attr(select1, "id", select1_id_value = "startYear" + /*experience*/ ctx[0].id);
			attr(select1, "class", "mb-3 svelte-1r8fjdo");
			attr(div3, "class", "workStartDate d-md-flex justify-content-between");
			attr(div4, "class", "start me-md-1 svelte-1r8fjdo");
			attr(label2, "for", label2_for_value = "endDate" + /*experience*/ ctx[0].id);
			attr(div5, "class", "workEndDate d-md-flex justify-content-between");
			attr(div6, "class", "end svelte-1r8fjdo");
			attr(div7, "class", "dates svelte-1r8fjdo");
			attr(input1, "type", "checkbox");
			attr(input1, "name", input1_name_value = "working" + /*experience*/ ctx[0].id);
			attr(input1, "id", input1_id_value = "working" + /*experience*/ ctx[0].id);
			input1.checked = input1_checked_value = /*experience*/ ctx[0].working;
			attr(input1, "class", "svelte-1r8fjdo");
			attr(label3, "for", label3_for_value = "working" + /*experience*/ ctx[0].id);
			attr(div8, "class", "working d-flex align-items-center");
			attr(label4, "for", label4_for_value = "country" + /*experience*/ ctx[0].id);
			attr(input2, "type", "text");
			attr(input2, "name", input2_name_value = "country" + /*experience*/ ctx[0].id);
			attr(input2, "id", input2_id_value = "country" + /*experience*/ ctx[0].id);
			attr(input2, "placeholder", "Ex: Colombia");
			input2.value = input2_value_value = /*experience*/ ctx[0].location;
			attr(input2, "class", "svelte-1r8fjdo");
			attr(label5, "for", label5_for_value = "title" + /*experience*/ ctx[0].id);
			attr(input3, "type", "text");
			attr(input3, "name", input3_name_value = "title" + /*experience*/ ctx[0].id);
			attr(input3, "id", input3_id_value = "title" + /*experience*/ ctx[0].id);
			attr(input3, "placeholder", "Ex: Manager");
			input3.value = input3_value_value = /*experience*/ ctx[0].title;
			attr(input3, "class", "svelte-1r8fjdo");
			attr(label6, "for", label6_for_value = "employmentType" + /*experience*/ ctx[0].id);
			option1.__value = "pleaseSelect";
			option1.value = option1.__value;
			attr(select2, "name", select2_name_value = "employmentType" + /*experience*/ ctx[0].id);
			attr(select2, "id", select2_id_value = "employmentType" + /*experience*/ ctx[0].id);
			attr(select2, "class", "svelte-1r8fjdo");
			attr(label7, "for", label7_for_value = "description" + /*experience*/ ctx[0].id);
			attr(textarea, "name", textarea_name_value = "description" + /*experience*/ ctx[0].id);
			attr(textarea, "id", textarea_id_value = "description" + /*experience*/ ctx[0].id);
			attr(textarea, "cols", "30");
			attr(textarea, "rows", "5");
			textarea.value = textarea_value_value = /*experience*/ ctx[0].description;
			attr(textarea, "class", "svelte-1r8fjdo");
			attr(form, "action", "");
			attr(form, "class", "svelte-1r8fjdo");
			attr(div9, "class", "formExperience");
			attr(div10, "class", "modal-body text-start");
			attr(button1, "type", "button");
			attr(button1, "class", "btn btn-secondary");
			attr(button1, "data-bs-dismiss", "modal");
			attr(button2, "id", button2_id_value = "btnUpdateExperience" + /*experience*/ ctx[0].id);
			attr(button2, "type", "button");
			attr(button2, "class", "btn btn-primary");
			attr(div11, "class", "modal-footer");
			attr(div12, "class", "modal-content svelte-1r8fjdo");
			attr(div13, "class", "modal-dialog modal-dialog-centered modal-lg");
			attr(div14, "class", "modal fade");
			attr(div14, "id", div14_id_value = "modalUpdateExperience" + /*experience*/ ctx[0].id);
			attr(div14, "tabindex", "-1");
			attr(div14, "aria-labelledby", div14_aria_labelledby_value = "modalUpdateExperience" + /*experience*/ ctx[0].id + "Label");
			attr(div14, "aria-hidden", "true");
		},
		m(target, anchor) {
			insert(target, div14, anchor);
			append(div14, div13);
			append(div13, div12);
			append(div12, div0);
			append(div0, h50);
			append(h50, t0);
			append(div0, t1);
			append(div0, button0);
			append(div12, t2);
			append(div12, div10);
			append(div10, div1);
			append(div10, t6);
			append(div10, div9);
			append(div9, form);
			append(form, div2);
			append(div2, label0);
			append(label0, t7);
			append(div2, t8);
			append(div2, input0);
			append(form, t9);
			append(form, div7);
			append(div7, div4);
			append(div4, label1);
			append(label1, t10);
			append(div4, t11);
			append(div4, div3);
			append(div3, select0);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(select0, null);
			}

			append(div3, t12);
			append(div3, select1);
			append(select1, option0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(select1, null);
			}

			append(div7, t14);
			append(div7, div6);
			append(div6, label2);
			append(label2, t15);
			append(div6, t16);
			append(div6, div5);
			if_block.m(div5, null);
			append(form, t17);
			append(form, div8);
			append(div8, input1);
			append(div8, t18);
			append(div8, label3);
			append(label3, t19);
			append(form, t20);
			append(form, label4);
			append(label4, t21);
			append(form, t22);
			append(form, input2);
			append(form, t23);
			append(form, label5);
			append(label5, t24);
			append(form, t25);
			append(form, input3);
			append(form, t26);
			append(form, label6);
			append(label6, t27);
			append(form, t28);
			append(form, select2);
			append(select2, option1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select2, null);
			}

			append(form, t30);
			append(form, label7);
			append(label7, t31);
			append(form, t32);
			append(form, textarea);
			append(div12, t33);
			append(div12, div11);
			append(div11, button1);
			append(div11, t35);
			append(div11, button2);
			append(button2, t36);

			if (!mounted) {
				dispose = [
					listen(input1, "click", /*toggleEndDate*/ ctx[9]),
					listen(button2, "click", /*addExpreience*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*experience*/ 1 && h50_id_value !== (h50_id_value = "modalUpdateExperience" + /*experience*/ ctx[0].id + "Label")) {
				attr(h50, "id", h50_id_value);
			}

			if (dirty[0] & /*experience*/ 1 && label0_for_value !== (label0_for_value = "companyNameUpdate" + /*experience*/ ctx[0].id)) {
				attr(label0, "for", label0_for_value);
			}

			if (dirty[0] & /*experience*/ 1 && input0_name_value !== (input0_name_value = "companyNameUpdate" + /*experience*/ ctx[0].id)) {
				attr(input0, "name", input0_name_value);
			}

			if (dirty[0] & /*experience*/ 1 && input0_id_value !== (input0_id_value = "companyNameUpdate" + /*experience*/ ctx[0].id)) {
				attr(input0, "id", input0_id_value);
			}

			if (dirty[0] & /*experience*/ 1 && input0_value_value !== (input0_value_value = /*experience*/ ctx[0].company_name) && input0.value !== input0_value_value) {
				input0.value = input0_value_value;
			}

			if (dirty[0] & /*experience*/ 1 && label1_for_value !== (label1_for_value = "startDate" + /*experience*/ ctx[0].id)) {
				attr(label1, "for", label1_for_value);
			}

			if (dirty[0] & /*months, joinStartMonth*/ 48) {
				each_value_6 = /*months*/ ctx[5];
				let i;

				for (i = 0; i < each_value_6.length; i += 1) {
					const child_ctx = get_each_context_6(ctx, each_value_6, i);

					if (each_blocks_2[i]) {
						each_blocks_2[i].p(child_ctx, dirty);
					} else {
						each_blocks_2[i] = create_each_block_6(child_ctx);
						each_blocks_2[i].c();
						each_blocks_2[i].m(select0, null);
					}
				}

				for (; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].d(1);
				}

				each_blocks_2.length = each_value_6.length;
			}

			if (dirty[0] & /*experience*/ 1 && select0_name_value !== (select0_name_value = "startDate" + /*experience*/ ctx[0].id)) {
				attr(select0, "name", select0_name_value);
			}

			if (dirty[0] & /*experience*/ 1 && select0_id_value !== (select0_id_value = "startDate" + /*experience*/ ctx[0].id)) {
				attr(select0, "id", select0_id_value);
			}

			if (dirty[0] & /*yearList, dataStartYear*/ 136) {
				each_value_5 = /*yearList*/ ctx[7];
				let i;

				for (i = 0; i < each_value_5.length; i += 1) {
					const child_ctx = get_each_context_5(ctx, each_value_5, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_5(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(select1, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_5.length;
			}

			if (dirty[0] & /*experience*/ 1 && select1_name_value !== (select1_name_value = "startYear" + /*experience*/ ctx[0].id)) {
				attr(select1, "name", select1_name_value);
			}

			if (dirty[0] & /*experience*/ 1 && select1_id_value !== (select1_id_value = "startYear" + /*experience*/ ctx[0].id)) {
				attr(select1, "id", select1_id_value);
			}

			if (dirty[0] & /*experience*/ 1 && label2_for_value !== (label2_for_value = "endDate" + /*experience*/ ctx[0].id)) {
				attr(label2, "for", label2_for_value);
			}

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div5, null);
				}
			}

			if (dirty[0] & /*experience*/ 1 && input1_name_value !== (input1_name_value = "working" + /*experience*/ ctx[0].id)) {
				attr(input1, "name", input1_name_value);
			}

			if (dirty[0] & /*experience*/ 1 && input1_id_value !== (input1_id_value = "working" + /*experience*/ ctx[0].id)) {
				attr(input1, "id", input1_id_value);
			}

			if (dirty[0] & /*experience*/ 1 && input1_checked_value !== (input1_checked_value = /*experience*/ ctx[0].working)) {
				input1.checked = input1_checked_value;
			}

			if (dirty[0] & /*experience*/ 1 && label3_for_value !== (label3_for_value = "working" + /*experience*/ ctx[0].id)) {
				attr(label3, "for", label3_for_value);
			}

			if (dirty[0] & /*experience*/ 1 && label4_for_value !== (label4_for_value = "country" + /*experience*/ ctx[0].id)) {
				attr(label4, "for", label4_for_value);
			}

			if (dirty[0] & /*experience*/ 1 && input2_name_value !== (input2_name_value = "country" + /*experience*/ ctx[0].id)) {
				attr(input2, "name", input2_name_value);
			}

			if (dirty[0] & /*experience*/ 1 && input2_id_value !== (input2_id_value = "country" + /*experience*/ ctx[0].id)) {
				attr(input2, "id", input2_id_value);
			}

			if (dirty[0] & /*experience*/ 1 && input2_value_value !== (input2_value_value = /*experience*/ ctx[0].location) && input2.value !== input2_value_value) {
				input2.value = input2_value_value;
			}

			if (dirty[0] & /*experience*/ 1 && label5_for_value !== (label5_for_value = "title" + /*experience*/ ctx[0].id)) {
				attr(label5, "for", label5_for_value);
			}

			if (dirty[0] & /*experience*/ 1 && input3_name_value !== (input3_name_value = "title" + /*experience*/ ctx[0].id)) {
				attr(input3, "name", input3_name_value);
			}

			if (dirty[0] & /*experience*/ 1 && input3_id_value !== (input3_id_value = "title" + /*experience*/ ctx[0].id)) {
				attr(input3, "id", input3_id_value);
			}

			if (dirty[0] & /*experience*/ 1 && input3_value_value !== (input3_value_value = /*experience*/ ctx[0].title) && input3.value !== input3_value_value) {
				input3.value = input3_value_value;
			}

			if (dirty[0] & /*experience*/ 1 && label6_for_value !== (label6_for_value = "employmentType" + /*experience*/ ctx[0].id)) {
				attr(label6, "for", label6_for_value);
			}

			if (dirty[0] & /*employmentTypeList, experience*/ 65) {
				each_value = /*employmentTypeList*/ ctx[6];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select2, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty[0] & /*experience*/ 1 && select2_name_value !== (select2_name_value = "employmentType" + /*experience*/ ctx[0].id)) {
				attr(select2, "name", select2_name_value);
			}

			if (dirty[0] & /*experience*/ 1 && select2_id_value !== (select2_id_value = "employmentType" + /*experience*/ ctx[0].id)) {
				attr(select2, "id", select2_id_value);
			}

			if (dirty[0] & /*experience*/ 1 && label7_for_value !== (label7_for_value = "description" + /*experience*/ ctx[0].id)) {
				attr(label7, "for", label7_for_value);
			}

			if (dirty[0] & /*experience*/ 1 && textarea_name_value !== (textarea_name_value = "description" + /*experience*/ ctx[0].id)) {
				attr(textarea, "name", textarea_name_value);
			}

			if (dirty[0] & /*experience*/ 1 && textarea_id_value !== (textarea_id_value = "description" + /*experience*/ ctx[0].id)) {
				attr(textarea, "id", textarea_id_value);
			}

			if (dirty[0] & /*experience*/ 1 && textarea_value_value !== (textarea_value_value = /*experience*/ ctx[0].description)) {
				textarea.value = textarea_value_value;
			}

			if (dirty[0] & /*experience*/ 1 && button2_id_value !== (button2_id_value = "btnUpdateExperience" + /*experience*/ ctx[0].id)) {
				attr(button2, "id", button2_id_value);
			}

			if (dirty[0] & /*experience*/ 1 && div14_id_value !== (div14_id_value = "modalUpdateExperience" + /*experience*/ ctx[0].id)) {
				attr(div14, "id", div14_id_value);
			}

			if (dirty[0] & /*experience*/ 1 && div14_aria_labelledby_value !== (div14_aria_labelledby_value = "modalUpdateExperience" + /*experience*/ ctx[0].id + "Label")) {
				attr(div14, "aria-labelledby", div14_aria_labelledby_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div14);
			destroy_each(each_blocks_2, detaching);
			destroy_each(each_blocks_1, detaching);
			if_block.d();
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

const yearStart = 1922;

function instance($$self, $$props, $$invalidate) {
	let { userProfile, urlAPI, experience } = $$props;

	// console.log(experience);
	const dataStartYear = experience.start_date.split('-')[0];

	const dataStartMonth = experience.start_date.split('-')[1];
	let dataEndYear;
	let dataEndMonth;

	if (experience.end_date !== null) {
		dataEndYear = experience.end_date.split('-')[0];
		dataEndMonth = experience.end_date.split('-')[1];
	}

	let splitMonth = dataStartMonth.split('');
	splitMonth[0] === '0' ? splitMonth.shift() : false;
	const joinStartMonth = splitMonth.join('');
	let joinEndMonth;

	if (dataEndMonth) {
		let splitEndMonth = dataEndMonth.split('');
		splitEndMonth[0] === '0' ? splitEndMonth.shift() : false;
		joinEndMonth = splitEndMonth.join('');
	}

	const months = [
		{ value: '0', month: 'Please select' },
		{ value: '1', month: 'January' },
		{ value: '2', month: 'February' },
		{ value: '3', month: 'March' },
		{ value: '4', month: 'April' },
		{ value: '5', month: 'May' },
		{ value: '6', month: 'June' },
		{ value: '7', month: 'July' },
		{ value: '8', month: 'August' },
		{ value: '9', month: 'September' },
		{ value: '10', month: 'October' },
		{ value: '11', month: 'November' },
		{ value: '12', month: 'December' }
	];

	const employmentTypeList = [
		'Full-time',
		'Part-time',
		'Self-employed',
		'Freelance',
		'Contract',
		'InternShip',
		'Apprenticeship',
		'Seasonal'
	];

	const today = new Date();
	const yearCurrent = today.getFullYear();
	const yearList = [];

	for (let i = yearCurrent; i >= yearStart; i--) {
		yearList.push(i);
	}

	const addExpreience = () => {
		const company_name = document.getElementById(`companyNameUpdate${experience.id}`).value;
		const startYear = document.getElementById(`startYear${experience.id}`).value;
		const startDate = document.getElementById(`startDate${experience.id}`).value;
		const endYear = document.getElementById(`endYear${experience.id}`).value;
		const endDate = document.getElementById(`endDate${experience.id}`).value;
		let start_date = '';

		startYear !== "0" && startDate !== "0"
		? start_date = [parseInt(startYear), parseInt(startDate)]
		: start_date = '';

		let workingCheck = 0;
		const working = document.getElementById(`working${experience.id}`);
		working.checked ? workingCheck = 1 : workingCheck = 0;
		let end_date = '';

		endYear !== '0' && endDate !== '0'
		? end_date = [parseInt(endYear), parseInt(endDate)]
		: end_date = '';

		const location = document.getElementById(`country${experience.id}`).value;
		const titleJob = document.getElementById(`title${experience.id}`).value;
		let employment_type = '';
		const employmentType = document.getElementById(`employmentType${experience.id}`).value;

		employmentType === 'pleaseSelect'
		? employment_type = ''
		: employment_type = employmentType;

		const descriptionJob = document.getElementById(`description${experience.id}`).value;

		// console.log(
		//   userProfile,
		//   company_name,
		//   start_date,
		//   workingCheck,
		//   end_date,
		//   location,
		//   titleJob,
		//   employment_type,
		//   descriptionJob
		// );
		let templateExperience = {};

		const experienceIncompleteMessage = 'please complete all the fields';

		if (workingCheck === 0) {
			if (userProfile !== '' && company_name !== '' && start_date !== '' && end_date !== '' && location !== '' && titleJob !== '' && employment_type !== '' && descriptionJob) {
				templateExperience = {
					"profile": userProfile,
					company_name,
					start_date,
					"working": 0,
					end_date,
					location,
					"title": titleJob,
					employment_type,
					"description": descriptionJob
				};

				// console.log(templateExperience);
				updateExperience(templateExperience);
			} else {
				console.error(experienceIncompleteMessage);
				alert(experienceIncompleteMessage);
			}
		}

		if (workingCheck === 1) {
			if (userProfile !== '' && company_name !== '' && start_date !== '' && location !== '' && titleJob !== '' && employment_type !== '' && descriptionJob) {
				templateExperience = {
					"profile": userProfile,
					company_name,
					start_date,
					"working": 1,
					"end_date": [0, 0],
					location,
					"title": titleJob,
					employment_type,
					"description": descriptionJob
				};

				// console.log(templateExperience);
				updateExperience(templateExperience);
			} else {
				console.error(experienceIncompleteMessage);
				alert(experienceIncompleteMessage);
			}
		}
	};

	const toggleEndDate = () => {
		const endYear = document.getElementById(`endYear${experience.id}`);
		const endDate = document.getElementById(`endDate${experience.id}`);
		const working = document.getElementById(`working${experience.id}`);

		if (working.checked) {
			endYear.setAttribute('disabled', '');
			endDate.setAttribute('disabled', '');
		} else {
			endYear.removeAttribute('disabled', '');
			endDate.removeAttribute('disabled', '');
		}
	};

	async function updateExperience(templateExperience) {
		const postExperience = await fetch(`${urlAPI}/user/experience/?experience_id=${experience.id}`, {
			method: 'PUT',
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify(templateExperience)
		});

		const content = await postExperience.json();

		if (postExperience.status === 200) {
			closeUpdateModal(experience.id);
		}
	}

	$$self.$$set = $$props => {
		if ('userProfile' in $$props) $$invalidate(10, userProfile = $$props.userProfile);
		if ('urlAPI' in $$props) $$invalidate(11, urlAPI = $$props.urlAPI);
		if ('experience' in $$props) $$invalidate(0, experience = $$props.experience);
	};

	return [
		experience,
		dataEndYear,
		joinEndMonth,
		dataStartYear,
		joinStartMonth,
		months,
		employmentTypeList,
		yearList,
		addExpreience,
		toggleEndDate,
		userProfile,
		urlAPI
	];
}

class UpdateExperienceModal extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				userProfile: 10,
				urlAPI: 11,
				experience: 0
			},
			null,
			[-1, -1]
		);
	}
}

export default UpdateExperienceModal;