import './ExperiencesModal.svelte.css.proxy.js';
/* src/components/Modals/ExperiencesModal.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	space,
	text
} from "../../../_snowpack/pkg/svelte/internal.js";

import { closeModal } from '../../js/closeModals.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[16] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	return child_ctx;
}

function get_each_context_4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[16] = list[i];
	return child_ctx;
}

// (184:20) {#each months as month}
function create_each_block_4(ctx) {
	let option;
	let t_value = /*month*/ ctx[16].month + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*month*/ ctx[16].value;
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (190:20) {#each yearList as year}
function create_each_block_3(ctx) {
	let option;
	let t_value = /*year*/ ctx[13] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*year*/ ctx[13];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (201:20) {#each months as month}
function create_each_block_2(ctx) {
	let option;
	let t_value = /*month*/ ctx[16].month + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*month*/ ctx[16].value;
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (207:20) {#each yearList as year}
function create_each_block_1(ctx) {
	let option;
	let t_value = /*year*/ ctx[13] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*year*/ ctx[13];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (231:14) {#each employmentTypeList as employment}
function create_each_block(ctx) {
	let option;
	let t_value = /*employment*/ ctx[10] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*employment*/ ctx[10];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

function create_fragment(ctx) {
	let div14;
	let div13;
	let div12;
	let div0;
	let t2;
	let div10;
	let div1;
	let t6;
	let div9;
	let form;
	let div2;
	let t9;
	let div7;
	let div4;
	let label1;
	let t11;
	let div3;
	let select0;
	let t12;
	let select1;
	let option0;
	let t14;
	let div6;
	let label2;
	let t16;
	let div5;
	let select2;
	let t17;
	let select3;
	let option1;
	let t19;
	let div8;
	let input1;
	let t20;
	let label3;
	let t22;
	let label4;
	let t24;
	let input2;
	let t25;
	let label5;
	let t27;
	let input3;
	let t28;
	let label6;
	let t30;
	let select4;
	let option2;
	let t32;
	let label7;
	let t34;
	let textarea;
	let t35;
	let div11;
	let button1;
	let t37;
	let button2;
	let mounted;
	let dispose;
	let each_value_4 = /*months*/ ctx[0];
	let each_blocks_4 = [];

	for (let i = 0; i < each_value_4.length; i += 1) {
		each_blocks_4[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
	}

	let each_value_3 = /*yearList*/ ctx[2];
	let each_blocks_3 = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks_3[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	let each_value_2 = /*months*/ ctx[0];
	let each_blocks_2 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	let each_value_1 = /*yearList*/ ctx[2];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*employmentTypeList*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div14 = element("div");
			div13 = element("div");
			div12 = element("div");
			div0 = element("div");

			div0.innerHTML = `<h5 class="modal-title" id="modalExperienceLabel">Add Experience</h5> 
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>`;

			t2 = space();
			div10 = element("div");
			div1 = element("div");

			div1.innerHTML = `<h5>Where do you currently work?</h5> 
          <p class="my-3">* Indicates required</p>`;

			t6 = space();
			div9 = element("div");
			form = element("form");
			div2 = element("div");

			div2.innerHTML = `<label for="postCompanyName">Company Name*</label> 
                <input type="text" name="postCompanyName" id="postCompanyName" placeholder="Ex: FlyLinkers" class="svelte-1r8fjdo"/>`;

			t9 = space();
			div7 = element("div");
			div4 = element("div");
			label1 = element("label");
			label1.textContent = "Start date*";
			t11 = space();
			div3 = element("div");
			select0 = element("select");

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				each_blocks_4[i].c();
			}

			t12 = space();
			select1 = element("select");
			option0 = element("option");
			option0.textContent = "Year";

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].c();
			}

			t14 = space();
			div6 = element("div");
			label2 = element("label");
			label2.textContent = "end date*";
			t16 = space();
			div5 = element("div");
			select2 = element("select");

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t17 = space();
			select3 = element("select");
			option1 = element("option");
			option1.textContent = "Year";

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t19 = space();
			div8 = element("div");
			input1 = element("input");
			t20 = space();
			label3 = element("label");
			label3.textContent = "I am currently working in this role";
			t22 = space();
			label4 = element("label");
			label4.textContent = "Location*";
			t24 = space();
			input2 = element("input");
			t25 = space();
			label5 = element("label");
			label5.textContent = "Title*";
			t27 = space();
			input3 = element("input");
			t28 = space();
			label6 = element("label");
			label6.textContent = "Employment type*";
			t30 = space();
			select4 = element("select");
			option2 = element("option");
			option2.textContent = "Please select";

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t32 = space();
			label7 = element("label");
			label7.textContent = "Description*";
			t34 = space();
			textarea = element("textarea");
			t35 = space();
			div11 = element("div");
			button1 = element("button");
			button1.textContent = "Close";
			t37 = space();
			button2 = element("button");
			button2.textContent = "Save";
			attr(div0, "class", "modal-header");
			attr(div1, "class", "headModal");
			attr(div2, "class", "companyName");
			attr(label1, "for", "postStartDate");
			attr(select0, "name", "postStartDate");
			attr(select0, "id", "postStartDate");
			attr(select0, "class", "me-md-1 mb-3 svelte-1r8fjdo");
			option0.__value = "0";
			option0.value = option0.__value;
			attr(select1, "name", "postStartYear");
			attr(select1, "id", "postStartYear");
			attr(select1, "class", "mb-3 svelte-1r8fjdo");
			attr(div3, "class", "workStartDate d-md-flex justify-content-between");
			attr(div4, "class", "start me-md-1 svelte-1r8fjdo");
			attr(label2, "for", "postEndDate");
			attr(select2, "name", "postEndDate");
			attr(select2, "id", "postEndDate");
			attr(select2, "class", "me-md-1 mb-3 svelte-1r8fjdo");
			option1.__value = "0";
			option1.value = option1.__value;
			attr(select3, "name", "postEndYear");
			attr(select3, "id", "postEndYear");
			attr(select3, "class", "mb-3 svelte-1r8fjdo");
			attr(div5, "class", "workEndDate d-md-flex justify-content-between");
			attr(div6, "class", "end svelte-1r8fjdo");
			attr(div7, "class", "dates svelte-1r8fjdo");
			attr(input1, "type", "checkbox");
			attr(input1, "name", "postWorking");
			attr(input1, "id", "postWorking");
			attr(input1, "class", "svelte-1r8fjdo");
			attr(label3, "for", "postWorking");
			attr(div8, "class", "working d-flex align-items-center");
			attr(label4, "for", "postCountry");
			attr(input2, "type", "text");
			attr(input2, "name", "postCountry");
			attr(input2, "id", "postCountry");
			attr(input2, "placeholder", "Ex: Colombia");
			attr(input2, "class", "svelte-1r8fjdo");
			attr(label5, "for", "postTitle");
			attr(input3, "type", "text");
			attr(input3, "name", "postTitle");
			attr(input3, "id", "postTitle");
			attr(input3, "placeholder", "Ex: Manager");
			attr(input3, "class", "svelte-1r8fjdo");
			attr(label6, "for", "postEmploymentType");
			option2.__value = "pleaseSelect";
			option2.value = option2.__value;
			attr(select4, "name", "postEmploymentType");
			attr(select4, "id", "postEmploymentType");
			attr(select4, "class", "svelte-1r8fjdo");
			attr(label7, "for", "postDescriptionExperience");
			attr(textarea, "name", "postDescriptionExperience");
			attr(textarea, "id", "postDescriptionExperience");
			attr(textarea, "cols", "30");
			attr(textarea, "rows", "5");
			attr(textarea, "class", "svelte-1r8fjdo");
			attr(form, "action", "");
			attr(form, "class", "svelte-1r8fjdo");
			attr(div9, "class", "formExperience");
			attr(div10, "class", "modal-body text-start");
			attr(button1, "type", "button");
			attr(button1, "class", "btn btn-secondary");
			attr(button1, "data-bs-dismiss", "modal");
			attr(button2, "id", "btnAddExperience");
			attr(button2, "type", "button");
			attr(button2, "class", "btn btn-primary");
			attr(div11, "class", "modal-footer");
			attr(div12, "class", "modal-content svelte-1r8fjdo");
			attr(div13, "class", "modal-dialog modal-dialog-centered modal-lg");
			attr(div14, "class", "modal fade");
			attr(div14, "id", "modalExperience");
			attr(div14, "tabindex", "-1");
			attr(div14, "aria-labelledby", "modalExperienceLabel");
			attr(div14, "aria-hidden", "true");
		},
		m(target, anchor) {
			insert(target, div14, anchor);
			append(div14, div13);
			append(div13, div12);
			append(div12, div0);
			append(div12, t2);
			append(div12, div10);
			append(div10, div1);
			append(div10, t6);
			append(div10, div9);
			append(div9, form);
			append(form, div2);
			append(form, t9);
			append(form, div7);
			append(div7, div4);
			append(div4, label1);
			append(div4, t11);
			append(div4, div3);
			append(div3, select0);

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				each_blocks_4[i].m(select0, null);
			}

			append(div3, t12);
			append(div3, select1);
			append(select1, option0);

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].m(select1, null);
			}

			append(div7, t14);
			append(div7, div6);
			append(div6, label2);
			append(div6, t16);
			append(div6, div5);
			append(div5, select2);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(select2, null);
			}

			append(div5, t17);
			append(div5, select3);
			append(select3, option1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(select3, null);
			}

			append(form, t19);
			append(form, div8);
			append(div8, input1);
			append(div8, t20);
			append(div8, label3);
			append(form, t22);
			append(form, label4);
			append(form, t24);
			append(form, input2);
			append(form, t25);
			append(form, label5);
			append(form, t27);
			append(form, input3);
			append(form, t28);
			append(form, label6);
			append(form, t30);
			append(form, select4);
			append(select4, option2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select4, null);
			}

			append(form, t32);
			append(form, label7);
			append(form, t34);
			append(form, textarea);
			append(div12, t35);
			append(div12, div11);
			append(div11, button1);
			append(div11, t37);
			append(div11, button2);

			if (!mounted) {
				dispose = [
					listen(input1, "click", /*toggleEndDate*/ ctx[4]),
					listen(button2, "click", /*addExpreience*/ ctx[3])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*months*/ 1) {
				each_value_4 = /*months*/ ctx[0];
				let i;

				for (i = 0; i < each_value_4.length; i += 1) {
					const child_ctx = get_each_context_4(ctx, each_value_4, i);

					if (each_blocks_4[i]) {
						each_blocks_4[i].p(child_ctx, dirty);
					} else {
						each_blocks_4[i] = create_each_block_4(child_ctx);
						each_blocks_4[i].c();
						each_blocks_4[i].m(select0, null);
					}
				}

				for (; i < each_blocks_4.length; i += 1) {
					each_blocks_4[i].d(1);
				}

				each_blocks_4.length = each_value_4.length;
			}

			if (dirty & /*yearList*/ 4) {
				each_value_3 = /*yearList*/ ctx[2];
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks_3[i]) {
						each_blocks_3[i].p(child_ctx, dirty);
					} else {
						each_blocks_3[i] = create_each_block_3(child_ctx);
						each_blocks_3[i].c();
						each_blocks_3[i].m(select1, null);
					}
				}

				for (; i < each_blocks_3.length; i += 1) {
					each_blocks_3[i].d(1);
				}

				each_blocks_3.length = each_value_3.length;
			}

			if (dirty & /*months*/ 1) {
				each_value_2 = /*months*/ ctx[0];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_2[i]) {
						each_blocks_2[i].p(child_ctx, dirty);
					} else {
						each_blocks_2[i] = create_each_block_2(child_ctx);
						each_blocks_2[i].c();
						each_blocks_2[i].m(select2, null);
					}
				}

				for (; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].d(1);
				}

				each_blocks_2.length = each_value_2.length;
			}

			if (dirty & /*yearList*/ 4) {
				each_value_1 = /*yearList*/ ctx[2];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(select3, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*employmentTypeList*/ 2) {
				each_value = /*employmentTypeList*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select4, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div14);
			destroy_each(each_blocks_4, detaching);
			destroy_each(each_blocks_3, detaching);
			destroy_each(each_blocks_2, detaching);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

const yearStart = 1922;

function instance($$self, $$props, $$invalidate) {
	let { userProfile, urlAPI } = $$props;

	const months = [
		{ value: '0', month: 'Please select' },
		{ value: '1', month: 'January' },
		{ value: '2', month: 'February' },
		{ value: '3', month: 'March' },
		{ value: '4', month: 'April' },
		{ value: '5', month: 'May' },
		{ value: '6', month: 'June' },
		{ value: '7', month: 'July' },
		{ value: '8', month: 'August' },
		{ value: '9', month: 'September' },
		{ value: '10', month: 'October' },
		{ value: '11', month: 'November' },
		{ value: '12', month: 'December' }
	];

	const employmentTypeList = [
		'Full-time',
		'Part-time',
		'Self-employed',
		'Freelance',
		'Contract',
		'InternShip',
		'Apprenticeship',
		'Seasonal'
	];

	const today = new Date();
	const yearCurrent = today.getFullYear();
	const yearList = [];

	for (let i = yearCurrent; i >= yearStart; i--) {
		yearList.push(i);
	}

	const addExpreience = () => {
		const company_name = postCompanyName.value;
		let start_date = '';

		postStartYear.value !== "0" && postStartDate.value !== "0"
		? start_date = [parseInt(postStartYear.value), parseInt(postStartDate.value)]
		: start_date = '';

		let workingCheck = 0;

		postWorking.checked
		? workingCheck = 1
		: workingCheck = 0;

		let end_date = '';

		postEndYear.value !== '0' && postEndDate.value !== '0'
		? end_date = [parseInt(postEndYear.value), parseInt(postEndDate.value)]
		: end_date = '';

		const location = postCountry.value;
		const titleJob = postTitle.value;
		let employment_type = '';

		postEmploymentType.value === 'pleaseSelect'
		? employment_type = ''
		: employment_type = postEmploymentType.value;

		const descriptionJob = postDescriptionExperience.value;

		// console.log(
		//   userProfile,
		//   company_name,
		//   start_date,
		//   workingCheck,
		//   end_date,
		//   location,
		//   titleJob,
		//   employment_type,
		//   descriptionJob
		// );
		if (userProfile !== '' && company_name !== '' && start_date !== '' && workingCheck !== '' && end_date !== '' && location !== '' && titleJob !== '' && employment_type !== '' && descriptionJob) {
			let templateExperience;

			if (workingCheck === 0) {
				templateExperience = {
					"profile": userProfile,
					company_name,
					"start_date": [2020, 2],
					"working": 0,
					end_date,
					location,
					"title": titleJob,
					employment_type,
					"description": descriptionJob
				};
			}

			if (workingCheck === 1) {
				templateExperience = {
					"profile": userProfile,
					company_name,
					"start_date": [2020, 2],
					"working": 1,
					location,
					"title": titleJob,
					employment_type,
					"description": descriptionJob
				};
			}

			console.log(templateExperience);
			addNewExperience(templateExperience);
		} else {
			console.error('please complete all the fields');
			alert('please complete all the fields');
		}
	};

	const toggleEndDate = () => {
		if (postWorking.checked) {
			postEndYear.setAttribute('disabled', '');
			postEndDate.setAttribute('disabled', '');
		} else {
			postEndYear.removeAttribute('disabled', '');
			postEndDate.removeAttribute('disabled', '');
		}
	};

	async function addNewExperience(templateExperience) {
		console.log(templateExperience);

		const postExperience = await fetch(`${urlAPI}/user/experience/`, {
			method: 'POST',
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify(templateExperience)
		});

		const content = await postExperience.json();
		console.log(content);

		if (content) {
			closeModal('modalExperience');
		}
	}

	$$self.$$set = $$props => {
		if ('userProfile' in $$props) $$invalidate(5, userProfile = $$props.userProfile);
		if ('urlAPI' in $$props) $$invalidate(6, urlAPI = $$props.urlAPI);
	};

	return [
		months,
		employmentTypeList,
		yearList,
		addExpreience,
		toggleEndDate,
		userProfile,
		urlAPI
	];
}

class ExperiencesModal extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { userProfile: 5, urlAPI: 6 });
	}
}

export default ExperiencesModal;