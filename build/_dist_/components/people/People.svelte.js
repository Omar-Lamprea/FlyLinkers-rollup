import './People.svelte.css.proxy.js';
/* src/components/people/People.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	assign,
	attr,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	run_all,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../../_snowpack/pkg/svelte/internal.js";

import { link } from "../../../_snowpack/pkg/svelte-spa-router.js";
import active from '../../../_snowpack/pkg/svelte-spa-router/active.js';
import User from './User.svelte.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (26:6) {#if dataFriends && dataFriends.length > 0}
function create_if_block(ctx) {
	let t0;
	let a;
	let p;
	let a_href_value;
	let link_action;
	let active_action;
	let current;
	let mounted;
	let dispose;
	let each_value = /*dataFriends*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			a = element("a");
			p = element("p");
			p.textContent = "Show more";
			attr(p, "class", "text-center");
			attr(a, "href", a_href_value = "/network/" + /*id*/ ctx[0]);
			attr(a, "class", "text-center svelte-yoab67");
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, p);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(link_action = link.call(null, a)),
					action_destroyer(active_action = active.call(null, a))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*dataFriends, urlAPI, urlImages*/ 14) {
				each_value = /*dataFriends*/ ctx[3];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(t0.parentNode, t0);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (!current || dirty & /*id*/ 1 && a_href_value !== (a_href_value = "/network/" + /*id*/ ctx[0])) {
				attr(a, "href", a_href_value);
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(a);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (27:9) {#each dataFriends as UserDetails}
function create_each_block(ctx) {
	let user;
	let current;

	const user_spread_levels = [
		/*UserDetails*/ ctx[4],
		{ urlAPI: /*urlAPI*/ ctx[1] },
		{ urlImages: /*urlImages*/ ctx[2] }
	];

	let user_props = {};

	for (let i = 0; i < user_spread_levels.length; i += 1) {
		user_props = assign(user_props, user_spread_levels[i]);
	}

	user = new User({ props: user_props });

	return {
		c() {
			create_component(user.$$.fragment);
		},
		m(target, anchor) {
			mount_component(user, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const user_changes = (dirty & /*dataFriends, urlAPI, urlImages*/ 14)
			? get_spread_update(user_spread_levels, [
					dirty & /*dataFriends*/ 8 && get_spread_object(/*UserDetails*/ ctx[4]),
					dirty & /*urlAPI*/ 2 && { urlAPI: /*urlAPI*/ ctx[1] },
					dirty & /*urlImages*/ 4 && { urlImages: /*urlImages*/ ctx[2] }
				])
			: {};

			user.$set(user_changes);
		},
		i(local) {
			if (current) return;
			transition_in(user.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(user.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(user, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let div0;
	let t1;
	let div2;
	let div1;
	let current;
	let if_block = /*dataFriends*/ ctx[3] && /*dataFriends*/ ctx[3].length > 0 && create_if_block(ctx);

	return {
		c() {
			div3 = element("div");
			div0 = element("div");
			div0.innerHTML = `<h4 data-translate="title-people" class="svelte-yoab67">People</h4>`;
			t1 = space();
			div2 = element("div");
			div1 = element("div");
			if (if_block) if_block.c();
			attr(div0, "class", "People-Ttitle mb-3 text-center svelte-yoab67");
			attr(div1, "class", "User");
			attr(div2, "class", "People-column svelte-yoab67");
			attr(div3, "class", "Default-containers px-3");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div0);
			append(div3, t1);
			append(div3, div2);
			append(div2, div1);
			if (if_block) if_block.m(div1, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*dataFriends*/ ctx[3] && /*dataFriends*/ ctx[3].length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*dataFriends*/ 8) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			if (if_block) if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { id, urlAPI, urlImages, dataFriends } = $$props;

	$$self.$$set = $$props => {
		if ('id' in $$props) $$invalidate(0, id = $$props.id);
		if ('urlAPI' in $$props) $$invalidate(1, urlAPI = $$props.urlAPI);
		if ('urlImages' in $$props) $$invalidate(2, urlImages = $$props.urlImages);
		if ('dataFriends' in $$props) $$invalidate(3, dataFriends = $$props.dataFriends);
	};

	return [id, urlAPI, urlImages, dataFriends];
}

class People extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			id: 0,
			urlAPI: 1,
			urlImages: 2,
			dataFriends: 3
		});
	}
}

export default People;