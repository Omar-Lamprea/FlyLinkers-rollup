import './People.svelte.css.proxy.js';
/* src/components/people/People.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../../_snowpack/pkg/svelte/internal.js";

import User from './User.svelte.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (20:6) {#if dataFriends}
function create_if_block(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*dataFriends*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*dataFriends, urlAPI*/ 3) {
				each_value = /*dataFriends*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (21:9) {#each dataFriends as UserDetails}
function create_each_block(ctx) {
	let user;
	let current;
	const user_spread_levels = [/*UserDetails*/ ctx[3], { urlAPI: /*urlAPI*/ ctx[0] }];
	let user_props = {};

	for (let i = 0; i < user_spread_levels.length; i += 1) {
		user_props = assign(user_props, user_spread_levels[i]);
	}

	user = new User({ props: user_props });

	return {
		c() {
			create_component(user.$$.fragment);
		},
		m(target, anchor) {
			mount_component(user, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const user_changes = (dirty & /*dataFriends, urlAPI*/ 3)
			? get_spread_update(user_spread_levels, [
					dirty & /*dataFriends*/ 2 && get_spread_object(/*UserDetails*/ ctx[3]),
					dirty & /*urlAPI*/ 1 && { urlAPI: /*urlAPI*/ ctx[0] }
				])
			: {};

			user.$set(user_changes);
		},
		i(local) {
			if (current) return;
			transition_in(user.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(user.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(user, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let div0;
	let t1;
	let div2;
	let div1;
	let current;
	let if_block = /*dataFriends*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			div3 = element("div");
			div0 = element("div");
			div0.innerHTML = `<h4 data-translate="title-people" class="svelte-1nd6ce4">People</h4>`;
			t1 = space();
			div2 = element("div");
			div1 = element("div");
			if (if_block) if_block.c();
			attr(div0, "class", "People-Ttitle mb-3 text-center svelte-1nd6ce4");
			attr(div1, "class", "User");
			attr(div2, "class", "People-column");
			attr(div3, "class", "Default-containers px-3");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div0);
			append(div3, t1);
			append(div3, div2);
			append(div2, div1);
			if (if_block) if_block.m(div1, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*dataFriends*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*dataFriends*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			if (if_block) if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { id, urlAPI, dataFriends } = $$props;

	$$self.$$set = $$props => {
		if ('id' in $$props) $$invalidate(2, id = $$props.id);
		if ('urlAPI' in $$props) $$invalidate(0, urlAPI = $$props.urlAPI);
		if ('dataFriends' in $$props) $$invalidate(1, dataFriends = $$props.dataFriends);
	};

	return [urlAPI, dataFriends, id];
}

class People extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { id: 2, urlAPI: 0, dataFriends: 1 });
	}
}

export default People;