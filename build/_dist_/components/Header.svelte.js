import './Header.svelte.css.proxy.js';
/* src/components/Header.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	is_function,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	set_style,
	space,
	src_url_equal,
	text,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import { link } from '../../_snowpack/pkg/svelte-spa-router.js';
import active from '../../_snowpack/pkg/svelte-spa-router/active.js';
import HeaderNav from "./navbar/HeaderNav.svelte.js";
import Loader from './Loader.svelte.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

// (191:14) {:else}
function create_else_block_2(ctx) {
	let loader;
	let current;
	loader = new Loader({});

	return {
		c() {
			create_component(loader.$$.fragment);
		},
		m(target, anchor) {
			mount_component(loader, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(loader.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(loader.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(loader, detaching);
		}
	};
}

// (162:12) {#if usersFound}
function create_if_block(ctx) {
	let each_1_anchor;
	let each_value = /*usersFound*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*usersFound, visitProfile, urlImages, localStorage*/ 140) {
				each_value = /*usersFound*/ ctx[3];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (177:18) {:else}
function create_else_block(ctx) {
	let li;
	let show_if;
	let t;

	function select_block_type_2(ctx, dirty) {
		if (localStorage.getItem('lang') === "En") return create_if_block_2;
		return create_else_block_1;
	}

	let current_block_type = select_block_type_2(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			li = element("li");
			if_block.c();
			t = space();
			attr(li, "class", "svelte-w0qbqd");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			if_block.m(li, null);
			append(li, t);
		},
		p(ctx, dirty) {
			if_block.p(ctx, dirty);
		},
		d(detaching) {
			if (detaching) detach(li);
			if_block.d();
		}
	};
}

// (164:18) {#if user.name}
function create_if_block_1(ctx) {
	let li;
	let a;
	let span;
	let img;
	let img_src_value;
	let t0;
	let div;
	let h6;
	let t1_value = /*user*/ ctx[12].name + "";
	let t1;
	let t2;
	let t3_value = /*user*/ ctx[12].last_name + "";
	let t3;
	let t4;
	let p0;
	let t5_value = /*user*/ ctx[12].title + "";
	let t5;
	let t6;
	let p1;
	let t7_value = /*user*/ ctx[12].email + "";
	let t7;
	let a_href_value;
	let link_action;
	let active_action;
	let t8;
	let mounted;
	let dispose;

	return {
		c() {
			li = element("li");
			a = element("a");
			span = element("span");
			img = element("img");
			t0 = space();
			div = element("div");
			h6 = element("h6");
			t1 = text(t1_value);
			t2 = space();
			t3 = text(t3_value);
			t4 = space();
			p0 = element("p");
			t5 = text(t5_value);
			t6 = space();
			p1 = element("p");
			t7 = text(t7_value);
			t8 = space();
			if (!src_url_equal(img.src, img_src_value = "" + (/*urlImages*/ ctx[2] + /*user*/ ctx[12].photo))) attr(img, "src", img_src_value);
			attr(img, "alt", "img");
			attr(img, "class", "svelte-w0qbqd");
			attr(h6, "class", "svelte-w0qbqd");
			set_style(p0, "color", "grey");
			set_style(p1, "color", "grey");
			attr(div, "class", "userInfo");
			attr(span, "class", "dropdown-item d-flex align-items-center");
			attr(a, "href", a_href_value = "/profile/" + /*user*/ ctx[12].username);
			attr(a, "class", "d-flex");
			attr(li, "class", "svelte-w0qbqd");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, span);
			append(span, img);
			append(span, t0);
			append(span, div);
			append(div, h6);
			append(h6, t1);
			append(h6, t2);
			append(h6, t3);
			append(div, t4);
			append(div, p0);
			append(p0, t5);
			append(div, t6);
			append(div, p1);
			append(p1, t7);
			append(li, t8);

			if (!mounted) {
				dispose = [
					action_destroyer(link_action = link.call(null, a)),
					action_destroyer(active_action = active.call(null, a)),
					listen(a, "click", function () {
						if (is_function(/*visitProfile*/ ctx[7](/*user*/ ctx[12].username))) /*visitProfile*/ ctx[7](/*user*/ ctx[12].username).apply(this, arguments);
					})
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*urlImages, usersFound*/ 12 && !src_url_equal(img.src, img_src_value = "" + (/*urlImages*/ ctx[2] + /*user*/ ctx[12].photo))) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*usersFound*/ 8 && t1_value !== (t1_value = /*user*/ ctx[12].name + "")) set_data(t1, t1_value);
			if (dirty & /*usersFound*/ 8 && t3_value !== (t3_value = /*user*/ ctx[12].last_name + "")) set_data(t3, t3_value);
			if (dirty & /*usersFound*/ 8 && t5_value !== (t5_value = /*user*/ ctx[12].title + "")) set_data(t5, t5_value);
			if (dirty & /*usersFound*/ 8 && t7_value !== (t7_value = /*user*/ ctx[12].email + "")) set_data(t7, t7_value);

			if (dirty & /*usersFound*/ 8 && a_href_value !== (a_href_value = "/profile/" + /*user*/ ctx[12].username)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (183:20) {:else}
function create_else_block_1(ctx) {
	let span;
	let t_value = /*user*/ ctx[12].detailsEs + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
			attr(span, "class", "dropdown-item");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*usersFound*/ 8 && t_value !== (t_value = /*user*/ ctx[12].detailsEs + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (179:20) {#if localStorage.getItem('lang') === "En"}
function create_if_block_2(ctx) {
	let span;
	let t_value = /*user*/ ctx[12].details + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
			attr(span, "class", "dropdown-item");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*usersFound*/ 8 && t_value !== (t_value = /*user*/ ctx[12].details + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (163:15) {#each usersFound as user}
function create_each_block(ctx) {
	let if_block_anchor;

	function select_block_type_1(ctx, dirty) {
		if (/*user*/ ctx[12].name) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_1(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let div6;
	let div5;
	let div4;
	let div2;
	let div0;
	let a;
	let link_action;
	let active_action;
	let t2;
	let div1;
	let input;
	let t3;
	let ul;
	let current_block_type_index;
	let if_block;
	let t4;
	let div3;
	let headernav;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block, create_else_block_2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*usersFound*/ ctx[3]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	headernav = new HeaderNav({
			props: {
				photo: /*photo*/ ctx[4],
				id: /*id*/ ctx[5],
				urlLogOut: /*urlLogOut*/ ctx[0],
				urlAPI: /*urlAPI*/ ctx[1],
				urlImages: /*urlImages*/ ctx[2]
			}
		});

	return {
		c() {
			div6 = element("div");
			div5 = element("div");
			div4 = element("div");
			div2 = element("div");
			div0 = element("div");
			a = element("a");

			a.innerHTML = `<img src="../img/flylinkers-logo-blanco.png" alt="logo" width="100" class="svelte-w0qbqd"/> 
            <h1 class="svelte-w0qbqd">FlyLinkers</h1>`;

			t2 = space();
			div1 = element("div");
			input = element("input");
			t3 = space();
			ul = element("ul");
			if_block.c();
			t4 = space();
			div3 = element("div");
			create_component(headernav.$$.fragment);
			attr(a, "href", "/");
			attr(a, "class", "d-flex align-items-center");
			attr(div0, "class", "Header-logo d-flex align-items-center px-3 svelte-w0qbqd");
			attr(input, "data-translate", "input-search");
			attr(input, "type", "text");
			attr(input, "placeholder", "Search");
			attr(input, "class", "svelte-w0qbqd");
			attr(ul, "class", "dropdown-search d-none svelte-w0qbqd");
			attr(ul, "id", "searchList");
			attr(div1, "class", "Header-input ms-0 ms-xxl-5 svelte-w0qbqd");
			attr(div2, "class", "Header-logo-search d-flex justify-contens-between align-items-center svelte-w0qbqd");
			attr(div3, "class", "Header-nav d-flex m-auto m-lg-0");
			attr(div4, "class", "Header-content d-flex flex-wrap align-items-center justify-content-center justify-content-xl-between svelte-w0qbqd");
			attr(div5, "class", "Header-container container");
			attr(div6, "class", "Header container-fluid svelte-w0qbqd");
		},
		m(target, anchor) {
			insert(target, div6, anchor);
			append(div6, div5);
			append(div5, div4);
			append(div4, div2);
			append(div2, div0);
			append(div0, a);
			append(div2, t2);
			append(div2, div1);
			append(div1, input);
			append(div1, t3);
			append(div1, ul);
			if_blocks[current_block_type_index].m(ul, null);
			append(div4, t4);
			append(div4, div3);
			mount_component(headernav, div3, null);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(link_action = link.call(null, a)),
					action_destroyer(active_action = active.call(null, a)),
					listen(input, "keyup", /*startSearch*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(ul, null);
			}

			const headernav_changes = {};
			if (dirty & /*urlLogOut*/ 1) headernav_changes.urlLogOut = /*urlLogOut*/ ctx[0];
			if (dirty & /*urlAPI*/ 2) headernav_changes.urlAPI = /*urlAPI*/ ctx[1];
			if (dirty & /*urlImages*/ 4) headernav_changes.urlImages = /*urlImages*/ ctx[2];
			headernav.$set(headernav_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(headernav.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(headernav.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div6);
			if_blocks[current_block_type_index].d();
			destroy_component(headernav);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { data } = $$props;
	let { urlLogOut, urlAPI, urlImages } = $$props;
	let photo = data.photo, id = data.id;
	let usersFound = false;

	const makeSearch = async value => {
		const response = await fetch(`${urlAPI}/friend/search/?search=${value}&user_id=${id}`);
		const content = await response.json();

		if (response.ok) {
			if (content.count > 0) {
				$$invalidate(3, usersFound = content.results);
			} else {
				$$invalidate(3, usersFound = [
					{
						details: 'User not found',
						detailsEs: "Usuario no encontrado"
					}
				]);
			}
		}
	};

	let timeCountdown;

	const startSearch = e => {
		const value = e.target.value;
		clearTimeout(timeCountdown);

		if (value !== '') {
			searchList.classList.remove("d-none");

			timeCountdown = setTimeout(
				async () => {
					makeSearch(value);
					clearTimeout(timeCountdown);
				},
				1000
			);
		} else {
			$$invalidate(3, usersFound = false);
			searchList.classList.add("d-none");
		}
	}; // if (e.key === "Enter") {
	//   makeSearch(value)
	// }

	const viewUser = email => {
		window.location.pathname = `profile/${email}`;
	};

	const visitProfile = email => {
		localStorage.setItem('visitProfile', email);
		window.location.reload();
	};

	document.addEventListener('click', e => {
		if (e.target.id !== "searchList") {
			searchList.classList.add('d-none');
			$$invalidate(3, usersFound = false);
		}
	});

	$$self.$$set = $$props => {
		if ('data' in $$props) $$invalidate(8, data = $$props.data);
		if ('urlLogOut' in $$props) $$invalidate(0, urlLogOut = $$props.urlLogOut);
		if ('urlAPI' in $$props) $$invalidate(1, urlAPI = $$props.urlAPI);
		if ('urlImages' in $$props) $$invalidate(2, urlImages = $$props.urlImages);
	};

	return [
		urlLogOut,
		urlAPI,
		urlImages,
		usersFound,
		photo,
		id,
		startSearch,
		visitProfile,
		data
	];
}

class Header extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			data: 8,
			urlLogOut: 0,
			urlAPI: 1,
			urlImages: 2
		});
	}
}

export default Header;