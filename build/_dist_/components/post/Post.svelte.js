import './Post.svelte.css';
/* src/components/post/Post.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	is_function,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_data,
	space,
	src_url_equal,
	text,
	transition_in,
	transition_out
} from "svelte/internal";

import { link } from "svelte-spa-router";
import active from 'svelte-spa-router/active';
import Comment from './Comment.svelte.js';
import SharePost from './actions/SharePost.svelte.js';
import startTime from '../../js/startTime.js';
import { onMount } from "svelte";
import { commentsFirebase } from '../../js/firebase/commentsFirebase.js';
import { reactionsFirebase } from '../../js/firebase/reactionsFirebase.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[37] = list[i];
	return child_ctx;
}

// (637:8) {:else}
function create_else_block(ctx) {
	let div;
	let img_1;
	let img_1_src_value;
	let t0;
	let h2;
	let t1;
	let t2;
	let t3;
	let t4;
	let span0;
	let t5;
	let t6;
	let span1;
	let t7_value = startTime(/*create_time*/ ctx[11]) + "";
	let t7;

	return {
		c() {
			div = element("div");
			img_1 = element("img");
			t0 = space();
			h2 = element("h2");
			t1 = text(/*name*/ ctx[3]);
			t2 = space();
			t3 = text(/*last_name*/ ctx[4]);
			t4 = space();
			span0 = element("span");
			t5 = text(/*title*/ ctx[5]);
			t6 = space();
			span1 = element("span");
			t7 = text(t7_value);
			if (!src_url_equal(img_1.src, img_1_src_value = "" + (/*urlAPI*/ ctx[13] + /*photo*/ ctx[6]))) attr(img_1, "src", img_1_src_value);
			attr(img_1, "alt", "");
			attr(img_1, "class", "svelte-54r9g1");
			attr(span0, "class", "svelte-54r9g1");
			attr(span1, "class", "svelte-54r9g1");
			attr(h2, "class", "svelte-54r9g1");
			attr(div, "class", "Card-user svelte-54r9g1");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, img_1);
			append(div, t0);
			append(div, h2);
			append(h2, t1);
			append(h2, t2);
			append(h2, t3);
			append(h2, t4);
			append(h2, span0);
			append(span0, t5);
			append(h2, t6);
			append(h2, span1);
			append(span1, t7);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*urlAPI, photo*/ 8256 && !src_url_equal(img_1.src, img_1_src_value = "" + (/*urlAPI*/ ctx[13] + /*photo*/ ctx[6]))) {
				attr(img_1, "src", img_1_src_value);
			}

			if (dirty[0] & /*name*/ 8) set_data(t1, /*name*/ ctx[3]);
			if (dirty[0] & /*last_name*/ 16) set_data(t3, /*last_name*/ ctx[4]);
			if (dirty[0] & /*title*/ 32) set_data(t5, /*title*/ ctx[5]);
			if (dirty[0] & /*create_time*/ 2048 && t7_value !== (t7_value = startTime(/*create_time*/ ctx[11]) + "")) set_data(t7, t7_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (626:8) {#if user}
function create_if_block_9(ctx) {
	let div;
	let a;
	let img_1;
	let img_1_src_value;
	let t0;
	let h2;
	let t1_value = /*user*/ ctx[2].name + "";
	let t1;
	let t2;
	let t3_value = /*user*/ ctx[2].last_name + "";
	let t3;
	let t4;
	let span0;
	let t5_value = /*user*/ ctx[2].title + "";
	let t5;
	let t6;
	let span1;
	let t7_value = startTime(/*create_time*/ ctx[11]) + "";
	let t7;
	let a_href_value;
	let link_action;
	let active_action;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			a = element("a");
			img_1 = element("img");
			t0 = space();
			h2 = element("h2");
			t1 = text(t1_value);
			t2 = space();
			t3 = text(t3_value);
			t4 = space();
			span0 = element("span");
			t5 = text(t5_value);
			t6 = space();
			span1 = element("span");
			t7 = text(t7_value);
			if (!src_url_equal(img_1.src, img_1_src_value = "" + (/*urlAPI*/ ctx[13] + /*user*/ ctx[2].photo))) attr(img_1, "src", img_1_src_value);
			attr(img_1, "alt", "");
			attr(img_1, "class", "svelte-54r9g1");
			attr(span0, "class", "svelte-54r9g1");
			attr(span1, "class", "svelte-54r9g1");
			attr(h2, "class", "svelte-54r9g1");
			attr(a, "href", a_href_value = "/profile/" + /*user*/ ctx[2].email);
			attr(a, "class", "d-flex");
			attr(div, "class", "Card-user svelte-54r9g1");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, a);
			append(a, img_1);
			append(a, t0);
			append(a, h2);
			append(h2, t1);
			append(h2, t2);
			append(h2, t3);
			append(h2, t4);
			append(h2, span0);
			append(span0, t5);
			append(h2, t6);
			append(h2, span1);
			append(span1, t7);

			if (!mounted) {
				dispose = [
					action_destroyer(link_action = link.call(null, a)),
					action_destroyer(active_action = active.call(null, a)),
					listen(div, "click", /*visitProfile*/ ctx[15])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*urlAPI, user*/ 8196 && !src_url_equal(img_1.src, img_1_src_value = "" + (/*urlAPI*/ ctx[13] + /*user*/ ctx[2].photo))) {
				attr(img_1, "src", img_1_src_value);
			}

			if (dirty[0] & /*user*/ 4 && t1_value !== (t1_value = /*user*/ ctx[2].name + "")) set_data(t1, t1_value);
			if (dirty[0] & /*user*/ 4 && t3_value !== (t3_value = /*user*/ ctx[2].last_name + "")) set_data(t3, t3_value);
			if (dirty[0] & /*user*/ 4 && t5_value !== (t5_value = /*user*/ ctx[2].title + "")) set_data(t5, t5_value);
			if (dirty[0] & /*create_time*/ 2048 && t7_value !== (t7_value = startTime(/*create_time*/ ctx[11]) + "")) set_data(t7, t7_value);

			if (dirty[0] & /*user*/ 4 && a_href_value !== (a_href_value = "/profile/" + /*user*/ ctx[2].email)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (658:14) {#if userMain.toString() === localStorage.getItem('userId')}
function create_if_block_8(ctx) {
	let li;
	let mounted;
	let dispose;

	return {
		c() {
			li = element("li");
			li.textContent = "Delete post";
			attr(li, "class", "dropdown-item svelte-54r9g1");
		},
		m(target, anchor) {
			insert(target, li, anchor);

			if (!mounted) {
				dispose = listen(li, "click", function () {
					if (is_function(/*deletePost*/ ctx[22](/*id*/ ctx[12]))) /*deletePost*/ ctx[22](/*id*/ ctx[12]).apply(this, arguments);
				});

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			dispose();
		}
	};
}

// (653:12) {#if user}
function create_if_block_6(ctx) {
	let show_if = /*user*/ ctx[2].id.toString() === localStorage.getItem('userId');
	let if_block_anchor;
	let if_block = show_if && create_if_block_7(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*user*/ 4) show_if = /*user*/ ctx[2].id.toString() === localStorage.getItem('userId');

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_7(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (654:15) {#if user.id.toString() === localStorage.getItem('userId')}
function create_if_block_7(ctx) {
	let li;
	let mounted;
	let dispose;

	return {
		c() {
			li = element("li");
			li.textContent = "Delete post";
			attr(li, "class", "dropdown-item svelte-54r9g1");
		},
		m(target, anchor) {
			insert(target, li, anchor);

			if (!mounted) {
				dispose = listen(li, "click", function () {
					if (is_function(/*deletePost*/ ctx[22](/*id*/ ctx[12]))) /*deletePost*/ ctx[22](/*id*/ ctx[12]).apply(this, arguments);
				});

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			dispose();
		}
	};
}

// (685:6) {#if meta}
function create_if_block_2(ctx) {
	let div;
	let a;
	let t0;
	let t1;
	let a_href_value;
	let if_block0 = /*meta*/ ctx[8].title && create_if_block_5(ctx);
	let if_block1 = /*meta*/ ctx[8].description && create_if_block_4(ctx);
	let if_block2 = /*meta*/ ctx[8].image && create_if_block_3(ctx);

	return {
		c() {
			div = element("div");
			a = element("a");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			attr(a, "href", a_href_value = /*meta*/ ctx[8].url);
			attr(a, "target", "_blank");
			attr(a, "class", "svelte-54r9g1");
			attr(div, "class", "urlMeta d-flex flex-column mb-3 svelte-54r9g1");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, a);
			if (if_block0) if_block0.m(a, null);
			append(a, t0);
			if (if_block1) if_block1.m(a, null);
			append(a, t1);
			if (if_block2) if_block2.m(a, null);
		},
		p(ctx, dirty) {
			if (/*meta*/ ctx[8].title) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_5(ctx);
					if_block0.c();
					if_block0.m(a, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*meta*/ ctx[8].description) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_4(ctx);
					if_block1.c();
					if_block1.m(a, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*meta*/ ctx[8].image) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_3(ctx);
					if_block2.c();
					if_block2.m(a, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty[0] & /*meta*/ 256 && a_href_value !== (a_href_value = /*meta*/ ctx[8].url)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
		}
	};
}

// (688:12) {#if meta.title}
function create_if_block_5(ctx) {
	let h6;
	let t_value = /*meta*/ ctx[8].title + "";
	let t;

	return {
		c() {
			h6 = element("h6");
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, h6, anchor);
			append(h6, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*meta*/ 256 && t_value !== (t_value = /*meta*/ ctx[8].title + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(h6);
		}
	};
}

// (691:12) {#if meta.description}
function create_if_block_4(ctx) {
	let p;
	let t_value = /*meta*/ ctx[8].description + "";
	let t;

	return {
		c() {
			p = element("p");
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*meta*/ 256 && t_value !== (t_value = /*meta*/ ctx[8].description + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (694:12) {#if meta.image}
function create_if_block_3(ctx) {
	let img_1;
	let img_1_src_value;

	return {
		c() {
			img_1 = element("img");
			if (!src_url_equal(img_1.src, img_1_src_value = /*meta*/ ctx[8].image)) attr(img_1, "src", img_1_src_value);
			attr(img_1, "alt", "");
			attr(img_1, "class", "svelte-54r9g1");
		},
		m(target, anchor) {
			insert(target, img_1, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*meta*/ 256 && !src_url_equal(img_1.src, img_1_src_value = /*meta*/ ctx[8].image)) {
				attr(img_1, "src", img_1_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img_1);
		}
	};
}

// (701:6) {#if !!img}
function create_if_block_1(ctx) {
	let figure;
	let img_1;
	let img_1_src_value;

	return {
		c() {
			figure = element("figure");
			img_1 = element("img");
			if (!src_url_equal(img_1.src, img_1_src_value = "" + (/*urlAPI*/ ctx[13] + /*img*/ ctx[10]))) attr(img_1, "src", img_1_src_value);
			attr(img_1, "alt", "img post");
			attr(img_1, "class", "svelte-54r9g1");
			attr(figure, "class", "svelte-54r9g1");
		},
		m(target, anchor) {
			insert(target, figure, anchor);
			append(figure, img_1);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*urlAPI, img*/ 9216 && !src_url_equal(img_1.src, img_1_src_value = "" + (/*urlAPI*/ ctx[13] + /*img*/ ctx[10]))) {
				attr(img_1, "src", img_1_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(figure);
		}
	};
}

// (759:6) {#if dataComment}
function create_if_block(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*dataComment*/ ctx[14];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*dataComment, urlAPI*/ 24576) {
				each_value = /*dataComment*/ ctx[14];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (760:8) {#each dataComment as comment}
function create_each_block(ctx) {
	let comment;
	let current;

	comment = new Comment({
			props: {
				comment: /*comment*/ ctx[37],
				urlAPI: /*urlAPI*/ ctx[13]
			}
		});

	return {
		c() {
			create_component(comment.$$.fragment);
		},
		m(target, anchor) {
			mount_component(comment, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const comment_changes = {};
			if (dirty[0] & /*dataComment*/ 16384) comment_changes.comment = /*comment*/ ctx[37];
			if (dirty[0] & /*urlAPI*/ 8192) comment_changes.urlAPI = /*urlAPI*/ ctx[13];
			comment.$set(comment_changes);
		},
		i(local) {
			if (current) return;
			transition_in(comment.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(comment.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(comment, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div18;
	let div4;
	let div2;
	let t0;
	let div1;
	let div0;
	let i0;
	let t1;
	let ul;
	let li;
	let a;
	let t2;
	let a_href_value;
	let link_action;
	let active_action;
	let t3;
	let show_if;
	let t4;
	let div3;
	let span0;
	let t5;
	let t6;
	let div5;
	let t7;
	let t8;
	let div10;
	let div9;
	let div6;
	let i1;
	let t9;
	let span1;
	let t10_value = /*reactions*/ ctx[0].like + "";
	let t10;
	let t11;
	let div7;
	let i2;
	let t12;
	let span2;
	let t13_value = /*reactions*/ ctx[0].love + "";
	let t13;
	let t14;
	let div8;
	let i3;
	let t15;
	let span4;
	let span3;
	let t16;
	let t17;
	let t18;
	let div15;
	let div14;
	let button0;
	let i4;
	let i4_id_value;
	let t19;
	let span5;
	let button0_id_value;
	let t21;
	let button1;
	let i5;
	let i5_id_value;
	let t22;
	let span6;
	let button1_id_value;
	let t24;
	let div11;
	let t27;
	let div12;
	let sharepost;
	let t28;
	let div13;
	let t31;
	let div17;
	let div16;
	let img_1;
	let img_1_src_value;
	let t32;
	let form;
	let input;
	let input_id_value;
	let t33;
	let button2;
	let t34;
	let button2_id_value;
	let t35;
	let div17_id_value;
	let current;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*user*/ ctx[2]) return create_if_block_9;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, [-1, -1]);
	let if_block0 = current_block_type(ctx);

	function select_block_type_1(ctx, dirty) {
		if (dirty[0] & /*userMain*/ 128) show_if = null;
		if (/*user*/ ctx[2]) return create_if_block_6;
		if (show_if == null) show_if = !!(/*userMain*/ ctx[7].toString() === localStorage.getItem('userId'));
		if (show_if) return create_if_block_8;
	}

	let current_block_type_1 = select_block_type_1(ctx, [-1, -1]);
	let if_block1 = current_block_type_1 && current_block_type_1(ctx);
	let if_block2 = /*meta*/ ctx[8] && create_if_block_2(ctx);
	let if_block3 = !!/*img*/ ctx[10] && create_if_block_1(ctx);
	sharepost = new SharePost({ props: { id: /*id*/ ctx[12] } });
	let if_block4 = /*dataComment*/ ctx[14] && create_if_block(ctx);

	return {
		c() {
			div18 = element("div");
			div4 = element("div");
			div2 = element("div");
			if_block0.c();
			t0 = space();
			div1 = element("div");
			div0 = element("div");
			i0 = element("i");
			t1 = space();
			ul = element("ul");
			li = element("li");
			a = element("a");
			t2 = text("View post");
			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			div3 = element("div");
			span0 = element("span");
			t5 = text(/*desc*/ ctx[9]);
			t6 = space();
			div5 = element("div");
			if (if_block2) if_block2.c();
			t7 = space();
			if (if_block3) if_block3.c();
			t8 = space();
			div10 = element("div");
			div9 = element("div");
			div6 = element("div");
			i1 = element("i");
			t9 = space();
			span1 = element("span");
			t10 = text(t10_value);
			t11 = space();
			div7 = element("div");
			i2 = element("i");
			t12 = space();
			span2 = element("span");
			t13 = text(t13_value);
			t14 = space();
			div8 = element("div");
			i3 = element("i");
			t15 = space();
			span4 = element("span");
			span3 = element("span");
			t16 = text(/*comments*/ ctx[1]);
			t17 = text(" Comments");
			t18 = space();
			div15 = element("div");
			div14 = element("div");
			button0 = element("button");
			i4 = element("i");
			t19 = space();
			span5 = element("span");
			span5.textContent = "Like";
			t21 = space();
			button1 = element("button");
			i5 = element("i");
			t22 = space();
			span6 = element("span");
			span6.textContent = "love";
			t24 = space();
			div11 = element("div");

			div11.innerHTML = `<i class="fa-comments far"></i> 
          <span class="svelte-54r9g1">Comment</span>`;

			t27 = space();
			div12 = element("div");
			create_component(sharepost.$$.fragment);
			t28 = space();
			div13 = element("div");

			div13.innerHTML = `<i class="fas fa-paper-plane"></i> 
          <span class="svelte-54r9g1">Send</span>`;

			t31 = space();
			div17 = element("div");
			div16 = element("div");
			img_1 = element("img");
			t32 = space();
			form = element("form");
			input = element("input");
			t33 = space();
			button2 = element("button");
			t34 = text("Post");
			t35 = space();
			if (if_block4) if_block4.c();
			attr(i0, "class", "fas fa-ellipsis-h dropdown-toggle svelte-54r9g1");
			attr(i0, "type", "button");
			attr(i0, "id", "settings-post");
			attr(i0, "data-bs-toggle", "dropdown");
			attr(i0, "aria-expanded", "false");
			attr(a, "class", "dropdown-item svelte-54r9g1");
			attr(a, "href", a_href_value = "/post/" + /*id*/ ctx[12]);
			attr(li, "class", "svelte-54r9g1");
			attr(ul, "class", "dropdown-menu");
			attr(ul, "aria-labelledby", "settings-post");
			attr(div0, "class", "dropdown svelte-54r9g1");
			attr(div1, "class", "Card-settings svelte-54r9g1");
			attr(div2, "class", "Card-Header px-3 px-md-0 svelte-54r9g1");
			attr(span0, "class", "mx-0 svelte-54r9g1");
			attr(div3, "class", "Card-description mx-3 mx-md-0 svelte-54r9g1");
			attr(div4, "class", "Card-container");
			attr(div5, "class", "Card-photo px-0 svelte-54r9g1");
			attr(i1, "class", "fas fa-thumbs-up");
			attr(span1, "id", /*likeValue*/ ctx[16]);
			attr(span1, "class", "svelte-54r9g1");
			attr(div6, "class", "Reaction Header-nav-like mx-2 svelte-54r9g1");
			attr(i2, "class", "fas fa-heart");
			attr(span2, "id", /*loveValue*/ ctx[17]);
			attr(span2, "class", "svelte-54r9g1");
			attr(div7, "class", "Reaction Header-nav-heart mx-2 svelte-54r9g1");
			attr(i3, "class", "fas fa-comment");
			attr(span3, "class", "svelte-54r9g1");
			attr(span4, "class", "svelte-54r9g1");
			attr(div8, "class", "Reaction Header-nav-comment mx-2 svelte-54r9g1");
			attr(div9, "class", "Card-board-icons-first d-flex px-3 px-md-0");
			attr(div10, "class", "Card-board-icons svelte-54r9g1");
			attr(i4, "id", i4_id_value = "btnLike" + /*id*/ ctx[12]);
			attr(i4, "class", "fa-thumbs-up far");
			attr(span5, "class", "svelte-54r9g1");
			attr(button0, "id", button0_id_value = "btnReactionLike" + /*id*/ ctx[12]);
			attr(button0, "class", "Action Header-nav-thumbs-up svelte-54r9g1");
			attr(i5, "id", i5_id_value = "btnLove" + /*id*/ ctx[12]);
			attr(i5, "class", "fa-heart far");
			attr(span6, "class", "svelte-54r9g1");
			attr(button1, "id", button1_id_value = "btnReactionLove" + /*id*/ ctx[12]);
			attr(button1, "class", "Action Header-nav-heart svelte-54r9g1");
			attr(div11, "class", "Action Header-nav-comments svelte-54r9g1");
			attr(div12, "class", "Action Header-nav-share svelte-54r9g1");
			attr(div13, "class", "Action Header-nav-paper-plane hidden disabled svelte-54r9g1");
			attr(div14, "class", "Card-board-actions d-flex justify-content-center justify-content-md-start svelte-54r9g1");
			attr(div15, "class", "Card-board-actions svelte-54r9g1");
			if (!src_url_equal(img_1.src, img_1_src_value = "" + (/*urlAPI*/ ctx[13] + localStorage.getItem('profilePhoto')))) attr(img_1, "src", img_1_src_value);
			attr(img_1, "alt", "img");
			attr(img_1, "class", "svelte-54r9g1");
			attr(input, "id", input_id_value = "inputAddComment" + /*id*/ ctx[12]);
			attr(input, "type", "text");
			attr(input, "class", "Comments-input svelte-54r9g1");
			attr(input, "placeholder", "Write a comment...");
			attr(button2, "id", button2_id_value = "btn-sendComment" + /*id*/ ctx[12]);
			attr(button2, "class", "btn-sendComment svelte-54r9g1");
			button2.disabled = true;
			attr(form, "class", "svelte-54r9g1");
			attr(div16, "class", "Comments-add d-flex justify-content-between svelte-54r9g1");
			attr(div17, "id", div17_id_value = "comment" + /*id*/ ctx[12]);
			attr(div17, "class", "comments mt-3 d-none");
			attr(div18, "class", "Card Default-containers");
		},
		m(target, anchor) {
			insert(target, div18, anchor);
			append(div18, div4);
			append(div4, div2);
			if_block0.m(div2, null);
			append(div2, t0);
			append(div2, div1);
			append(div1, div0);
			append(div0, i0);
			append(div0, t1);
			append(div0, ul);
			append(ul, li);
			append(li, a);
			append(a, t2);
			append(ul, t3);
			if (if_block1) if_block1.m(ul, null);
			append(div4, t4);
			append(div4, div3);
			append(div3, span0);
			append(span0, t5);
			append(div18, t6);
			append(div18, div5);
			if (if_block2) if_block2.m(div5, null);
			append(div5, t7);
			if (if_block3) if_block3.m(div5, null);
			append(div18, t8);
			append(div18, div10);
			append(div10, div9);
			append(div9, div6);
			append(div6, i1);
			append(div6, t9);
			append(div6, span1);
			append(span1, t10);
			append(div9, t11);
			append(div9, div7);
			append(div7, i2);
			append(div7, t12);
			append(div7, span2);
			append(span2, t13);
			append(div9, t14);
			append(div9, div8);
			append(div8, i3);
			append(div8, t15);
			append(div8, span4);
			append(span4, span3);
			append(span3, t16);
			append(span4, t17);
			append(div18, t18);
			append(div18, div15);
			append(div15, div14);
			append(div14, button0);
			append(button0, i4);
			append(button0, t19);
			append(button0, span5);
			append(div14, t21);
			append(div14, button1);
			append(button1, i5);
			append(button1, t22);
			append(button1, span6);
			append(div14, t24);
			append(div14, div11);
			append(div14, t27);
			append(div14, div12);
			mount_component(sharepost, div12, null);
			append(div14, t28);
			append(div14, div13);
			append(div18, t31);
			append(div18, div17);
			append(div17, div16);
			append(div16, img_1);
			append(div16, t32);
			append(div16, form);
			append(form, input);
			append(form, t33);
			append(form, button2);
			append(button2, t34);
			append(div17, t35);
			if (if_block4) if_block4.m(div17, null);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(link_action = link.call(null, a)),
					action_destroyer(active_action = active.call(null, a)),
					listen(span4, "click", /*showComments*/ ctx[19]),
					listen(button0, "click", /*changeReaction*/ ctx[18]),
					listen(button1, "click", /*changeReaction*/ ctx[18]),
					listen(div11, "click", /*showComments*/ ctx[19]),
					listen(input, "keyup", /*commentAbled*/ ctx[20]),
					listen(button2, "click", /*addComment*/ ctx[21])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div2, t0);
				}
			}

			if (!current || dirty[0] & /*id*/ 4096 && a_href_value !== (a_href_value = "/post/" + /*id*/ ctx[12])) {
				attr(a, "href", a_href_value);
			}

			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx, dirty)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if (if_block1) if_block1.d(1);
				if_block1 = current_block_type_1 && current_block_type_1(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(ul, null);
				}
			}

			if (!current || dirty[0] & /*desc*/ 512) set_data(t5, /*desc*/ ctx[9]);

			if (/*meta*/ ctx[8]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_2(ctx);
					if_block2.c();
					if_block2.m(div5, t7);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (!!/*img*/ ctx[10]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_1(ctx);
					if_block3.c();
					if_block3.m(div5, null);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if ((!current || dirty[0] & /*reactions*/ 1) && t10_value !== (t10_value = /*reactions*/ ctx[0].like + "")) set_data(t10, t10_value);
			if ((!current || dirty[0] & /*reactions*/ 1) && t13_value !== (t13_value = /*reactions*/ ctx[0].love + "")) set_data(t13, t13_value);
			if (!current || dirty[0] & /*comments*/ 2) set_data(t16, /*comments*/ ctx[1]);

			if (!current || dirty[0] & /*id*/ 4096 && i4_id_value !== (i4_id_value = "btnLike" + /*id*/ ctx[12])) {
				attr(i4, "id", i4_id_value);
			}

			if (!current || dirty[0] & /*id*/ 4096 && button0_id_value !== (button0_id_value = "btnReactionLike" + /*id*/ ctx[12])) {
				attr(button0, "id", button0_id_value);
			}

			if (!current || dirty[0] & /*id*/ 4096 && i5_id_value !== (i5_id_value = "btnLove" + /*id*/ ctx[12])) {
				attr(i5, "id", i5_id_value);
			}

			if (!current || dirty[0] & /*id*/ 4096 && button1_id_value !== (button1_id_value = "btnReactionLove" + /*id*/ ctx[12])) {
				attr(button1, "id", button1_id_value);
			}

			const sharepost_changes = {};
			if (dirty[0] & /*id*/ 4096) sharepost_changes.id = /*id*/ ctx[12];
			sharepost.$set(sharepost_changes);

			if (!current || dirty[0] & /*urlAPI*/ 8192 && !src_url_equal(img_1.src, img_1_src_value = "" + (/*urlAPI*/ ctx[13] + localStorage.getItem('profilePhoto')))) {
				attr(img_1, "src", img_1_src_value);
			}

			if (!current || dirty[0] & /*id*/ 4096 && input_id_value !== (input_id_value = "inputAddComment" + /*id*/ ctx[12])) {
				attr(input, "id", input_id_value);
			}

			if (!current || dirty[0] & /*id*/ 4096 && button2_id_value !== (button2_id_value = "btn-sendComment" + /*id*/ ctx[12])) {
				attr(button2, "id", button2_id_value);
			}

			if (/*dataComment*/ ctx[14]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty[0] & /*dataComment*/ 16384) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(div17, null);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*id*/ 4096 && div17_id_value !== (div17_id_value = "comment" + /*id*/ ctx[12])) {
				attr(div17, "id", div17_id_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(sharepost.$$.fragment, local);
			transition_in(if_block4);
			current = true;
		},
		o(local) {
			transition_out(sharepost.$$.fragment, local);
			transition_out(if_block4);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div18);
			if_block0.d();

			if (if_block1) {
				if_block1.d();
			}

			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			destroy_component(sharepost);
			if (if_block4) if_block4.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { userId } = $$props;
	let { desc, reactions, img, comments, create_time, user, id, user_id, update_time } = $$props;
	let { name, middle_name, last_name, title, photo, email } = $$props;
	let { userMain, urlAPI, url_id, meta } = $$props;
	let { share_id, share_count } = $$props;
	console.log(share_id, share_count);
	const userStorage = JSON.parse(localStorage.getItem('data'));

	// console.log(userId, user);
	if (!meta) {
		meta = false;
	}

	// console.log(meta);
	let userLink;

	if (userId === undefined) {
		userId = userMain;
	}

	if (userMain === undefined) {
		userMain = userId;
	}

	if (user) {
		(name = '', middle_name = '', last_name = '', title = '', photo = '', email = '', update_time = '', user_id = '', userLink = user.email);
	} else {
		user = '';
		userLink = email;
	}

	userId = parseInt(userId);
	userMain = parseInt(userMain);

	const viewUserProfile = () => {
		if (user) {
			const userEmail = user.email;
			window.location.pathname = `profile/${userEmail}`;
		}
	};

	const visitProfile = () => {
		localStorage.setItem('visitProfile', user.email);
	};

	const likeValue = `likeValue${id}`;
	const loveValue = `loveValue${id}`;
	let reactionsPost = '';

	const reactionUser = async () => {
		const spanLikeValue = document.getElementById(`likeValue${id}`);
		const spanLoveValue = document.getElementById(`loveValue${id}`);
		const btnLike = document.getElementById(`btnLike${id}`);
		const btnLove = document.getElementById(`btnLove${id}`);

		if (spanLikeValue.textContent !== '0' || spanLoveValue.textContent !== '0') {
			const getIdReaction = await fetch(`${urlAPI}/post/like/?post_id=${id}`);
			const response = await getIdReaction.json();
			reactionsPost = response;

			response.forEach(reaction => {
				if (reaction.id === userId && reaction.like) {
					btnLike.classList.remove('far');
					btnLike.classList.add('fas');
				}

				if (reaction.id === userId && reaction.love) {
					btnLove.classList.remove('far');
					btnLove.classList.add('fas');
				}
			});
		}
	};

	const changeReaction = async e => {
		const btnReactionLike = document.getElementById(`btnReactionLike${id}`);
		const btnReactionLove = document.getElementById(`btnReactionLove${id}`);
		btnReactionLike.setAttribute('disabled', '');
		btnReactionLove.setAttribute('disabled', '');
		const spanLikeValue = document.getElementById(`likeValue${id}`);
		const spanLoveValue = document.getElementById(`loveValue${id}`);

		if (spanLikeValue.textContent === '0' || spanLoveValue.textContent === '0') {
			const getIdReaction = await fetch(`${urlAPI}/post/like/?post_id=${id}`);
			const response = await getIdReaction.json();
			reactionsPost = response;
		}

		const likeAcount = document.getElementById(likeValue);
		const loveAcount = document.getElementById(loveValue);
		const element = e.target.parentNode.childNodes[0];
		const reactionType = element.classList[0];
		const reactionElement = element.classList[1];
		const btnLike = document.getElementById(`btnLike${id}`);
		const btnLove = document.getElementById(`btnLove${id}`);
		let myLike = false;
		let userlike = [];

		if (reactionsPost !== '' && !reactionsPost.Error) {
			reactionsPost.forEach(like => {
				if (like.id === userId) {
					myLike = true;
					userlike.push(like);
				} else {
					myLike = false;
				}
			});
		}

		let myLove = false;
		let userLove = [];

		if (reactionsPost !== '' && !reactionsPost.Error) {
			reactionsPost.forEach(love => {
				if (love.id === userId) {
					myLove = true;
					userLove.push(love);
				} else {
					myLove = false;
				}
			});
		}

		if (userlike.length > 0 && userlike[0].id === userId) {
			myLike = true;
		}

		if (userLove.length > 0 && userLove[0].id === userId) {
			myLove = true;
		}

		// console.log(myLike, reactionType);
		// update like reaction
		if (myLike && reactionType === 'fa-thumbs-up') {
			if (reactionElement === 'far') {
				// console.log('actualizando like');
				const like = await fetch(`${urlAPI}/post/like/?post_id=${id}&user=${userId}`, {
					method: 'PUT',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ like: 1 })
				});

				const response = like.json();

				if (response) {
					$$invalidate(0, reactions.like += 1, reactions);
					likeAcount.textContent = reactions.like;
					toggleReaction();

					if (btnLove.classList[1] === 'fas') {
						btnLove.classList.remove('fas');
						btnLove.classList.add('far');
						$$invalidate(0, reactions.love -= 1, reactions);
						loveAcount.textContent = reactions.love;
					}
				} // await reactionUser()
			}

			if (reactionElement === 'fas') {
				// console.log('actualizando dislike');
				const dislike = await fetch(`${urlAPI}/post/like/?post_id=${id}&user=${userId}`, {
					method: 'PUT',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({})
				});

				const response = dislike.json();

				if (response) {
					$$invalidate(0, reactions.like -= 1, reactions);
					likeAcount.textContent = reactions.like;
					toggleReaction();
				} // await reactionUser()
			}
		}

		// update love reaction
		if (myLove && reactionType === 'fa-heart') {
			if (reactionElement === 'far') {
				// console.log('actualizando love');
				const dislove = await fetch(`${urlAPI}/post/like/?post_id=${id}&user=${userId}`, {
					method: 'PUT',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ love: 1 })
				});

				const response = dislove.json();

				if (response) {
					$$invalidate(0, reactions.love += 1, reactions);
					loveAcount.textContent = reactions.love;
					toggleReaction();

					if (btnLike.classList[1] === 'fas') {
						btnLike.classList.remove('fas');
						btnLike.classList.add('far');
						$$invalidate(0, reactions.like -= 1, reactions);
						likeAcount.textContent = reactions.like;
					}
				}
			}

			// console.log(reactionsPost, reactionType, reactionElement, userId);
			if (reactionElement === 'fas') {
				// console.log('actualizando dislove');
				const dislove = await fetch(`${urlAPI}/post/like/?post_id=${id}&user=${userId}`, {
					method: 'PUT',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({})
				});

				const response = dislove.json();

				if (response) {
					$$invalidate(0, reactions.love -= 1, reactions);
					loveAcount.textContent = reactions.love;
					toggleReaction();
				} // await reactionUser()
			}
		}

		//new like
		if (reactionType === 'fa-thumbs-up' && reactionElement === 'far') {
			if (reactions.like === 0 && reactions.love === 0 || !myLike && !myLove) {
				// console.log('creando like');
				const createReaction = await fetch(`${urlAPI}/post/like/`, {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ user_id: userId, post_id: id, like: 1 })
				});

				const response = createReaction.json();

				if (response) {
					$$invalidate(0, reactions.like += 1, reactions);
					likeAcount.textContent = reactions.like;
					toggleReaction();
					let aux;

					if (user.length === 0) {
						aux = user_id;
					} else {
						aux = user.id;
					}

					// console.log(reactionsPost, aux);
					if (aux !== userId) {
						// console.log(reactionsPost);
						const template = {
							user_id: userId,
							name: userStorage.name + ' ' + userStorage.last_name,
							photo: userStorage.photo,
							create_at: new Date(),
							seen: false,
							post_id: id
						};

						// console.log(template, aux);
						reactionsFirebase(template, aux);
					}
				}
			}
		}

		// new love
		if (reactionType === 'fa-heart' && reactionElement === 'far') {
			if (reactions.like === 0 && reactions.love === 0 || !myLike && !myLove) {
				// console.log('creando love');
				const createReaction = await fetch(`${urlAPI}/post/like/`, {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ user_id: userId, post_id: id, love: 1 })
				});

				const response = createReaction.json();

				if (response) {
					$$invalidate(0, reactions.love += 1, reactions);
					loveAcount.textContent = reactions.love;
					toggleReaction();
					reactionsFirebase();
					let aux;

					if (user.length === 0) {
						aux = user_id;
					} else {
						aux = user.id;
					}

					// console.log(reactionsPost, aux);
					if (aux !== userId) {
						// console.log(reactionsPost);
						const template = {
							user_id: userId,
							name: userStorage.name + ' ' + userStorage.last_name,
							photo: userStorage.photo,
							create_at: new Date(),
							seen: false,
							post_id: id
						};

						// console.log(template, aux);
						reactionsFirebase(template, aux);
					}
				}
			}
		}

		function toggleReaction() {
			if (element.classList[1] === 'far') {
				element.classList.remove('far');
				element.classList.add('fas');
			} else {
				element.classList.remove('fas');
				element.classList.add('far');
			}
		}

		await reactionUser();
		btnReactionLike.removeAttribute('disabled');
		btnReactionLove.removeAttribute('disabled');
	};

	const showComments = () => {
		const comment = document.getElementById(`comment${id}`);
		comment.classList.remove('d-none');
		getCommets();
	};

	let dataComment;

	const getCommets = async () => {
		if (comments >= 1) {
			const response = await fetch(`${urlAPI}/post/comment/?post_id=${id}`);
			const content = await response.json();
			$$invalidate(14, dataComment = content);
		}
	};

	const commentAbled = e => {
		const btnSendComment = document.getElementById(`btn-sendComment${id}`);

		if (e.target.value !== '') {
			btnSendComment.removeAttribute('disabled');
		} else {
			btnSendComment.setAttribute('disabled', '');
		}
	};

	const addComment = async e => {
		e.preventDefault();
		const inputAddComment = document.getElementById(`inputAddComment${id}`);

		const response = await fetch(`${urlAPI}/post/comment/`, {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({
				comment: inputAddComment.value,
				user_id: userId,
				post_id: id
			})
		});

		const content = await response.json();

		if (content) {
			inputAddComment.value = '';
			$$invalidate(1, comments += 1);
			await getCommets();
			let aux;

			if (user.length === 0) {
				aux = user_id;
			} else {
				aux = user.id;
			}

			if (aux !== userId) {
				let userDataComment = 0;

				if (dataComment.length > 0) {
					userDataComment = dataComment[dataComment.length - 1];
				} else {
					userDataComment = dataComment[0];
				}

				const commentUserFirebase = {
					user_id: userId,
					comment: userDataComment.comment,
					name: userStorage.name + ' ' + userStorage.last_name,
					photo: userStorage.photo,
					post_id: id,
					seen: false,
					create_at: new Date()
				};

				commentsFirebase(commentUserFirebase, aux);
			}
		}
	};

	const deletePost = async id => {
		const response = await fetch(`${urlAPI}/post/create/?post_id=${id}`, {
			method: 'DELETE',
			headers: { 'Content-Type': 'application/json' }
		});

		if (response.ok) {
			const reloadPost = document.getElementById('reloadPostCheck');
			reloadPost.classList.toggle('data-reloading');
		}
	};

	onMount(() => {
		reactionUser();
	});

	$$self.$$set = $$props => {
		if ('userId' in $$props) $$invalidate(23, userId = $$props.userId);
		if ('desc' in $$props) $$invalidate(9, desc = $$props.desc);
		if ('reactions' in $$props) $$invalidate(0, reactions = $$props.reactions);
		if ('img' in $$props) $$invalidate(10, img = $$props.img);
		if ('comments' in $$props) $$invalidate(1, comments = $$props.comments);
		if ('create_time' in $$props) $$invalidate(11, create_time = $$props.create_time);
		if ('user' in $$props) $$invalidate(2, user = $$props.user);
		if ('id' in $$props) $$invalidate(12, id = $$props.id);
		if ('user_id' in $$props) $$invalidate(24, user_id = $$props.user_id);
		if ('update_time' in $$props) $$invalidate(25, update_time = $$props.update_time);
		if ('name' in $$props) $$invalidate(3, name = $$props.name);
		if ('middle_name' in $$props) $$invalidate(26, middle_name = $$props.middle_name);
		if ('last_name' in $$props) $$invalidate(4, last_name = $$props.last_name);
		if ('title' in $$props) $$invalidate(5, title = $$props.title);
		if ('photo' in $$props) $$invalidate(6, photo = $$props.photo);
		if ('email' in $$props) $$invalidate(27, email = $$props.email);
		if ('userMain' in $$props) $$invalidate(7, userMain = $$props.userMain);
		if ('urlAPI' in $$props) $$invalidate(13, urlAPI = $$props.urlAPI);
		if ('url_id' in $$props) $$invalidate(28, url_id = $$props.url_id);
		if ('meta' in $$props) $$invalidate(8, meta = $$props.meta);
		if ('share_id' in $$props) $$invalidate(29, share_id = $$props.share_id);
		if ('share_count' in $$props) $$invalidate(30, share_count = $$props.share_count);
	};

	return [
		reactions,
		comments,
		user,
		name,
		last_name,
		title,
		photo,
		userMain,
		meta,
		desc,
		img,
		create_time,
		id,
		urlAPI,
		dataComment,
		visitProfile,
		likeValue,
		loveValue,
		changeReaction,
		showComments,
		commentAbled,
		addComment,
		deletePost,
		userId,
		user_id,
		update_time,
		middle_name,
		email,
		url_id,
		share_id,
		share_count
	];
}

class Post extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				userId: 23,
				desc: 9,
				reactions: 0,
				img: 10,
				comments: 1,
				create_time: 11,
				user: 2,
				id: 12,
				user_id: 24,
				update_time: 25,
				name: 3,
				middle_name: 26,
				last_name: 4,
				title: 5,
				photo: 6,
				email: 27,
				userMain: 7,
				urlAPI: 13,
				url_id: 28,
				meta: 8,
				share_id: 29,
				share_count: 30
			},
			null,
			[-1, -1]
		);
	}
}

export default Post;