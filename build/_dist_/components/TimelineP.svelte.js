import './TimelineP.svelte.css.proxy.js';
/* src/components/TimelineP.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_style,
	space,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import CoverPhoto from './profile/CoverPhoto.svelte.js';
import UserDetails from './profile/UserDetails.svelte.js';
import Experience from './profile/Experience.svelte.js';
import Panel from './profile/Panel.svelte.js';
import AddPost from './post/AddPost.svelte.js';
import Post from './post/Post.svelte.js';
import Loader from './Loader.svelte.js';
import { writable } from '../../_snowpack/pkg/svelte/store.js';
import { onMount } from '../../_snowpack/pkg/svelte.js';
import { translate } from '../js/translate.js';

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[25] = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[25] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[25] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[25] = list[i];
	return child_ctx;
}

// (152:6) {#if email === dataJson.email}
function create_if_block_5(ctx) {
	let div;
	let p;
	let t1;
	let addpost;
	let current;

	addpost = new AddPost({
			props: {
				id: /*id*/ ctx[6],
				urlAPI: /*urlAPI*/ ctx[7]
			}
		});

	return {
		c() {
			div = element("div");
			p = element("p");
			p.textContent = "Post";
			t1 = space();
			create_component(addpost.$$.fragment);
			attr(p, "class", "my-2 svelte-9igu1v");
			attr(div, "class", "Background-post-profile svelte-9igu1v");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, p);
			append(div, t1);
			mount_component(addpost, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const addpost_changes = {};
			if (dirty[0] & /*id*/ 64) addpost_changes.id = /*id*/ ctx[6];
			if (dirty[0] & /*urlAPI*/ 128) addpost_changes.urlAPI = /*urlAPI*/ ctx[7];
			addpost.$set(addpost_changes);
		},
		i(local) {
			if (current) return;
			transition_in(addpost.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(addpost.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(addpost);
		}
	};
}

// (158:6) {#if experiences !== undefined}
function create_if_block_4(ctx) {
	let experience;
	let current;

	experience = new Experience({
			props: {
				urlAPI: /*urlAPI*/ ctx[7],
				id: /*id*/ ctx[6],
				experiences: /*experiences*/ ctx[10],
				userProfile: /*userProfile*/ ctx[11]
			}
		});

	return {
		c() {
			create_component(experience.$$.fragment);
		},
		m(target, anchor) {
			mount_component(experience, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const experience_changes = {};
			if (dirty[0] & /*urlAPI*/ 128) experience_changes.urlAPI = /*urlAPI*/ ctx[7];
			if (dirty[0] & /*id*/ 64) experience_changes.id = /*id*/ ctx[6];
			if (dirty[0] & /*experiences*/ 1024) experience_changes.experiences = /*experiences*/ ctx[10];
			if (dirty[0] & /*userProfile*/ 2048) experience_changes.userProfile = /*userProfile*/ ctx[11];
			experience.$set(experience_changes);
		},
		i(local) {
			if (current) return;
			transition_in(experience.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(experience.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(experience, detaching);
		}
	};
}

// (163:6) {#if post}
function create_if_block_2(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_3, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*userMain*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, [-1, -1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (170:8) {:else}
function create_else_block_1(ctx) {
	let each_1_anchor;
	let current;
	let each_value_3 = /*post*/ ctx[12];
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*userPost, post, userId, urlAPI*/ 77952) {
				each_value_3 = /*post*/ ctx[12];
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_3.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_3.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (164:8) {#if userMain}
function create_if_block_3(ctx) {
	let each_1_anchor;
	let current;
	let each_value_2 = /*post*/ ctx[12];
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*userPost, post, userMain, urlAPI*/ 12417) {
				each_value_2 = /*post*/ ctx[12];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_2.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_2.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (172:10) {#each post as dataPost}
function create_each_block_3(ctx) {
	let post_1;
	let current;

	const post_1_spread_levels = [
		/*userPost*/ ctx[13],
		/*dataPost*/ ctx[25],
		{ userId: /*userId*/ ctx[16] },
		{ urlAPI: /*urlAPI*/ ctx[7] }
	];

	let post_1_props = {};

	for (let i = 0; i < post_1_spread_levels.length; i += 1) {
		post_1_props = assign(post_1_props, post_1_spread_levels[i]);
	}

	post_1 = new Post({ props: post_1_props });

	return {
		c() {
			create_component(post_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(post_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const post_1_changes = (dirty[0] & /*userPost, post, userId, urlAPI*/ 77952)
			? get_spread_update(post_1_spread_levels, [
					dirty[0] & /*userPost*/ 8192 && get_spread_object(/*userPost*/ ctx[13]),
					dirty[0] & /*post*/ 4096 && get_spread_object(/*dataPost*/ ctx[25]),
					dirty[0] & /*userId*/ 65536 && { userId: /*userId*/ ctx[16] },
					dirty[0] & /*urlAPI*/ 128 && { urlAPI: /*urlAPI*/ ctx[7] }
				])
			: {};

			post_1.$set(post_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(post_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(post_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(post_1, detaching);
		}
	};
}

// (166:10) {#each post as dataPost}
function create_each_block_2(ctx) {
	let post_1;
	let current;

	const post_1_spread_levels = [
		/*userPost*/ ctx[13],
		/*dataPost*/ ctx[25],
		{ userMain: /*userMain*/ ctx[0] },
		{ urlAPI: /*urlAPI*/ ctx[7] }
	];

	let post_1_props = {};

	for (let i = 0; i < post_1_spread_levels.length; i += 1) {
		post_1_props = assign(post_1_props, post_1_spread_levels[i]);
	}

	post_1 = new Post({ props: post_1_props });

	return {
		c() {
			create_component(post_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(post_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const post_1_changes = (dirty[0] & /*userPost, post, userMain, urlAPI*/ 12417)
			? get_spread_update(post_1_spread_levels, [
					dirty[0] & /*userPost*/ 8192 && get_spread_object(/*userPost*/ ctx[13]),
					dirty[0] & /*post*/ 4096 && get_spread_object(/*dataPost*/ ctx[25]),
					dirty[0] & /*userMain*/ 1 && { userMain: /*userMain*/ ctx[0] },
					dirty[0] & /*urlAPI*/ 128 && { urlAPI: /*urlAPI*/ ctx[7] }
				])
			: {};

			post_1.$set(post_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(post_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(post_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(post_1, detaching);
		}
	};
}

// (180:6) {#if $posts}
function create_if_block(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*userMain*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx, [-1, -1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (187:8) {:else}
function create_else_block(ctx) {
	let each_1_anchor;
	let current;
	let each_value_1 = /*$posts*/ ctx[14];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*userPost, $posts, userId, urlAPI*/ 90240) {
				each_value_1 = /*$posts*/ ctx[14];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (181:8) {#if userMain}
function create_if_block_1(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*$posts*/ ctx[14];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*userPost, $posts, userMain, urlAPI*/ 24705) {
				each_value = /*$posts*/ ctx[14];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (189:10) {#each $posts as dataPost}
function create_each_block_1(ctx) {
	let post_1;
	let current;

	const post_1_spread_levels = [
		/*userPost*/ ctx[13],
		/*dataPost*/ ctx[25],
		{ userId: /*userId*/ ctx[16] },
		{ urlAPI: /*urlAPI*/ ctx[7] }
	];

	let post_1_props = {};

	for (let i = 0; i < post_1_spread_levels.length; i += 1) {
		post_1_props = assign(post_1_props, post_1_spread_levels[i]);
	}

	post_1 = new Post({ props: post_1_props });

	return {
		c() {
			create_component(post_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(post_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const post_1_changes = (dirty[0] & /*userPost, $posts, userId, urlAPI*/ 90240)
			? get_spread_update(post_1_spread_levels, [
					dirty[0] & /*userPost*/ 8192 && get_spread_object(/*userPost*/ ctx[13]),
					dirty[0] & /*$posts*/ 16384 && get_spread_object(/*dataPost*/ ctx[25]),
					dirty[0] & /*userId*/ 65536 && { userId: /*userId*/ ctx[16] },
					dirty[0] & /*urlAPI*/ 128 && { urlAPI: /*urlAPI*/ ctx[7] }
				])
			: {};

			post_1.$set(post_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(post_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(post_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(post_1, detaching);
		}
	};
}

// (183:10) {#each $posts as dataPost}
function create_each_block(ctx) {
	let post_1;
	let current;

	const post_1_spread_levels = [
		/*userPost*/ ctx[13],
		/*dataPost*/ ctx[25],
		{ userMain: /*userMain*/ ctx[0] },
		{ urlAPI: /*urlAPI*/ ctx[7] }
	];

	let post_1_props = {};

	for (let i = 0; i < post_1_spread_levels.length; i += 1) {
		post_1_props = assign(post_1_props, post_1_spread_levels[i]);
	}

	post_1 = new Post({ props: post_1_props });

	return {
		c() {
			create_component(post_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(post_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const post_1_changes = (dirty[0] & /*userPost, $posts, userMain, urlAPI*/ 24705)
			? get_spread_update(post_1_spread_levels, [
					dirty[0] & /*userPost*/ 8192 && get_spread_object(/*userPost*/ ctx[13]),
					dirty[0] & /*$posts*/ 16384 && get_spread_object(/*dataPost*/ ctx[25]),
					dirty[0] & /*userMain*/ 1 && { userMain: /*userMain*/ ctx[0] },
					dirty[0] & /*urlAPI*/ 128 && { urlAPI: /*urlAPI*/ ctx[7] }
				])
			: {};

			post_1.$set(post_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(post_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(post_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(post_1, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div2;
	let input;
	let t0;
	let div1;
	let coverphoto;
	let t1;
	let userdetails;
	let t2;
	let t3;
	let t4;
	let panel;
	let t5;
	let t6;
	let t7;
	let div0;
	let current;

	coverphoto = new CoverPhoto({
			props: {
				coverPhoto: /*coverPhoto*/ ctx[8],
				userId: /*userId*/ ctx[16]
			}
		});

	userdetails = new UserDetails({
			props: {
				name: /*name*/ ctx[1],
				last_name: /*last_name*/ ctx[2],
				title: /*title*/ ctx[3],
				email: /*email*/ ctx[4],
				photo: /*photo*/ ctx[5],
				id: /*id*/ ctx[6],
				aboutMe: /*aboutMe*/ ctx[9],
				userMain: /*userMain*/ ctx[0],
				urlAPI: /*urlAPI*/ ctx[7]
			}
		});

	let if_block0 = /*email*/ ctx[4] === /*dataJson*/ ctx[15].email && create_if_block_5(ctx);
	let if_block1 = /*experiences*/ ctx[10] !== undefined && create_if_block_4(ctx);
	panel = new Panel({});
	let if_block2 = /*post*/ ctx[12] && create_if_block_2(ctx);
	let if_block3 = /*$posts*/ ctx[14] && create_if_block(ctx);

	return {
		c() {
			div2 = element("div");
			input = element("input");
			t0 = space();
			div1 = element("div");
			create_component(coverphoto.$$.fragment);
			t1 = space();
			create_component(userdetails.$$.fragment);
			t2 = space();
			if (if_block0) if_block0.c();
			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			create_component(panel.$$.fragment);
			t5 = space();
			if (if_block2) if_block2.c();
			t6 = space();
			if (if_block3) if_block3.c();
			t7 = space();
			div0 = element("div");
			div0.textContent = "Sorry!, we can't find more post to show you.";
			attr(input, "type", "checkbox");
			attr(input, "id", "reloadPostCheck");
			attr(input, "name", "reloadPost");
			attr(input, "class", "d-none");
			attr(div0, "id", "endPosts");
			attr(div0, "class", "d-none text-center fw-bold");
			set_style(div0, "color", "var(--main-color)");
			attr(div1, "class", "Profile-container");
			attr(div2, "class", "Profile col-12 col-lg-9");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, input);
			append(div2, t0);
			append(div2, div1);
			mount_component(coverphoto, div1, null);
			append(div1, t1);
			mount_component(userdetails, div1, null);
			append(div1, t2);
			if (if_block0) if_block0.m(div1, null);
			append(div1, t3);
			if (if_block1) if_block1.m(div1, null);
			append(div1, t4);
			mount_component(panel, div1, null);
			append(div1, t5);
			if (if_block2) if_block2.m(div1, null);
			append(div1, t6);
			if (if_block3) if_block3.m(div1, null);
			append(div1, t7);
			append(div1, div0);
			current = true;
		},
		p(ctx, dirty) {
			const coverphoto_changes = {};
			if (dirty[0] & /*coverPhoto*/ 256) coverphoto_changes.coverPhoto = /*coverPhoto*/ ctx[8];
			coverphoto.$set(coverphoto_changes);
			const userdetails_changes = {};
			if (dirty[0] & /*name*/ 2) userdetails_changes.name = /*name*/ ctx[1];
			if (dirty[0] & /*last_name*/ 4) userdetails_changes.last_name = /*last_name*/ ctx[2];
			if (dirty[0] & /*title*/ 8) userdetails_changes.title = /*title*/ ctx[3];
			if (dirty[0] & /*email*/ 16) userdetails_changes.email = /*email*/ ctx[4];
			if (dirty[0] & /*photo*/ 32) userdetails_changes.photo = /*photo*/ ctx[5];
			if (dirty[0] & /*id*/ 64) userdetails_changes.id = /*id*/ ctx[6];
			if (dirty[0] & /*aboutMe*/ 512) userdetails_changes.aboutMe = /*aboutMe*/ ctx[9];
			if (dirty[0] & /*userMain*/ 1) userdetails_changes.userMain = /*userMain*/ ctx[0];
			if (dirty[0] & /*urlAPI*/ 128) userdetails_changes.urlAPI = /*urlAPI*/ ctx[7];
			userdetails.$set(userdetails_changes);

			if (/*email*/ ctx[4] === /*dataJson*/ ctx[15].email) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*email*/ 16) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_5(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div1, t3);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*experiences*/ ctx[10] !== undefined) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*experiences*/ 1024) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_4(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div1, t4);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*post*/ ctx[12]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*post*/ 4096) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_2(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div1, t6);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*$posts*/ ctx[14]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty[0] & /*$posts*/ 16384) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div1, t7);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(coverphoto.$$.fragment, local);
			transition_in(userdetails.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(panel.$$.fragment, local);
			transition_in(if_block2);
			transition_in(if_block3);
			current = true;
		},
		o(local) {
			transition_out(coverphoto.$$.fragment, local);
			transition_out(userdetails.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(panel.$$.fragment, local);
			transition_out(if_block2);
			transition_out(if_block3);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_component(coverphoto);
			destroy_component(userdetails);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			destroy_component(panel);
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $posts;
	let { name, last_name, title, email, photo, id, urlAPI } = $$props;
	let { userMain } = $$props;

	if (userMain === undefined) {
		userMain = "";
	}

	const dataJson = JSON.parse(localStorage.getItem('data'));
	let coverPhoto;
	let aboutMe;
	let userId = id;
	let data;
	let experiences;
	let userProfile;

	const getProfile = async () => {
		const response = await fetch(`${urlAPI}/user/profile/?user_id=${id}`);
		const content = await response.json();

		if (content[0]) {
			data = content[0];
			$$invalidate(11, userProfile = data.id);
			$$invalidate(10, experiences = data.experiences);
			$$invalidate(8, coverPhoto = `${urlAPI}${data.cover_img}`);
			$$invalidate(9, aboutMe = data.about);
		}
	};

	let post;
	let userPost;
	let countPost = null;

	const getPost = async () => {
		$$invalidate(12, post = '');

		const response = await fetch(`${urlAPI}/post/create/?user=${id}`).then(res => {
			if (res.ok) {
				return res.json();
			} else {
				throw new Error("Sorry, there isn't posts to show");
			}
		}).then(json => {
			const content = json;
			countPost = content.next;

			if (!content.Detail) {
				if (content.results) {
					$$invalidate(12, post = content.results.splice(1));
					$$invalidate(13, userPost = content.results[0]);
				}
			}
		}).catch(error => {
			console.error(error);
		});
	};

	const posts = writable([]);
	component_subscribe($$self, posts, value => $$invalidate(14, $posts = value));
	let page = 1;

	async function getPosts() {
		page += 1;
		const response = await fetch(`${urlAPI}/post/create/?page=${page}&user=${id}`);
		const content = await response.json();
		countPost = content.next;

		try {
			if (content) {
				posts.set([...$posts, ...content.results]);
			}
		} catch(error) {
			endPosts.classList.remove('d-none');
		}
	}

	const reloadPosts = () => {
		const reloadPosts = document.getElementById('reloadPostCheck');

		const observer = new MutationObserver(() => {
				// console.log('reloading post...');
				$$invalidate(12, post = '');

				getPost(1);
				reloadPosts.removeAttribute('data-reloading');
			});

		if (!window.location.href.includes('settings')) {
			observer.observe(reloadPosts, { attributes: true });
		}
	};

	onMount(async () => {
		await getProfile();

		if (data.posts) {
			getPost();
		}

		reloadPosts();

		document.addEventListener('scroll', async e => {
			if (window.innerHeight + window.scrollY >= main.offsetHeight - 1 && !window.location.href.includes('settings') && window.location.hash.length === 9) {
				if (countPost !== null) {
					getPosts();
				} else {
					setTimeout(
						() => {
							endPosts.classList.remove('d-none');
						},
						1000
					);
				}
			}
		});
	}); // translate()

	$$self.$$set = $$props => {
		if ('name' in $$props) $$invalidate(1, name = $$props.name);
		if ('last_name' in $$props) $$invalidate(2, last_name = $$props.last_name);
		if ('title' in $$props) $$invalidate(3, title = $$props.title);
		if ('email' in $$props) $$invalidate(4, email = $$props.email);
		if ('photo' in $$props) $$invalidate(5, photo = $$props.photo);
		if ('id' in $$props) $$invalidate(6, id = $$props.id);
		if ('urlAPI' in $$props) $$invalidate(7, urlAPI = $$props.urlAPI);
		if ('userMain' in $$props) $$invalidate(0, userMain = $$props.userMain);
	};

	return [
		userMain,
		name,
		last_name,
		title,
		email,
		photo,
		id,
		urlAPI,
		coverPhoto,
		aboutMe,
		experiences,
		userProfile,
		post,
		userPost,
		$posts,
		dataJson,
		userId,
		posts
	];
}

class TimelineP extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				name: 1,
				last_name: 2,
				title: 3,
				email: 4,
				photo: 5,
				id: 6,
				urlAPI: 7,
				userMain: 0
			},
			null,
			[-1, -1]
		);
	}
}

export default TimelineP;